{"ast":null,"code":"var _jsxFileName = \"/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GenreSelect/GenreSelect.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './GenreSelect.css';\nimport { dbGenOpSearch, apiGenOpSearch, searchGenre } from '../../actions/actions'; //used on SearchMenu\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GenreSelect() {\n  _s();\n\n  let dispatch = useDispatch();\n  let origin = useSelector(state => state.searchOrig); // <--Busca el origen del store.\n\n  let apigenres = useSelector(state => state.apigenopts);\n  let apigenRef = useRef(apigenres); //<--para evitar missing dependency en useEffect\n\n  let dbgenres = useSelector(state => state.dbgenopts);\n  let dbgenRef = useRef(dbgenres);\n  let cleans = useSelector(state => state.cleansearch);\n  let [genreopts, setGenreopts] = useState(''); // opciones de géneros\n\n  let [sgenre, setSgenre] = useState(''); // género seleccionado\n  // Cada vez que cambie el origen guarda el estado en el store\n  // y setea genreopts con los valores correspondientes\n\n  useEffect(() => {\n    // Que limpie cualquier selección anterior\n    //   dispatch(searchGenre(''));\n    //   setSgenre('');\n    // }\n    let sendgenopsearch = (orig, apig, dbg) => {\n      if (orig === 'base de datos') {\n        //console.log(orig);\n        //dispatch(dbGenOpSearch()); // <-- Hacer...\n        setGenreopts(dbg); // <-- Cambiar en store...\n      }\n\n      if (orig === 'API') {\n        //console.log(orig);\n        dispatch(apiGenOpSearch()); // setGenreopts(apig);\n        //console.log(apig);\n      }\n    };\n\n    sendgenopsearch(origin, apigenRef.current, dbgenRef.current); // <-- referencia a apigenres\n  }, [origin, dispatch]); //Cada vez que cambie el origen guarda el estado en el store\n\n  useEffect(() => {\n    setGenreopts(apigenres);\n  }, [apigenres]);\n  useEffect(() => {\n    setGenreopts(dbgenres);\n  }, [dbgenres]); // Manda al store el género a buscar\n\n  function handleChange(e) {\n    dispatch(searchGenre(e.target.value));\n    setSgenre(e.target.value);\n  } // Cuando cambie el género seleccionado lo manda al store.\n\n\n  useEffect(() => {\n    dispatch(searchGenre(sgenre));\n  }, [sgenre, dispatch]); // Si presiona nueva búsqueda limpia el género\n\n  useEffect(() => {// if (cleans) {\n    //   dispatch(searchGenre(''));\n    //   setSgenre('');\n    // }\n  }, [cleans, dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gcont\",\n    children: /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"genres\",\n      className: \"gselect\",\n      value: sgenre,\n      onChange: handleChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        defaultValue: true,\n        children: \"G\\xE9nero:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), genreopts && genreopts.map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: option.value,\n        children: option.label\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GenreSelect, \"NWhsNy8JjRsNG7jR8S8qGOtol3k=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = GenreSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenreSelect\");","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GenreSelect/GenreSelect.jsx"],"names":["React","useState","useEffect","useRef","useSelector","useDispatch","dbGenOpSearch","apiGenOpSearch","searchGenre","GenreSelect","dispatch","origin","state","searchOrig","apigenres","apigenopts","apigenRef","dbgenres","dbgenopts","dbgenRef","cleans","cleansearch","genreopts","setGenreopts","sgenre","setSgenre","sendgenopsearch","orig","apig","dbg","current","handleChange","e","target","value","map","option","index","label"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './GenreSelect.css';\nimport { dbGenOpSearch, apiGenOpSearch, searchGenre } from '../../actions/actions';\n\n//used on SearchMenu\n\nexport default function GenreSelect() {\n\n  let dispatch = useDispatch();\n  let origin = useSelector(state => state.searchOrig);// <--Busca el origen del store.\n  let apigenres = useSelector(state => state.apigenopts);\n  let apigenRef = useRef(apigenres);//<--para evitar missing dependency en useEffect\n  let dbgenres = useSelector(state => state.dbgenopts);\n  let dbgenRef = useRef(dbgenres);\n  let cleans = useSelector(state => state.cleansearch);\n\n  let [genreopts, setGenreopts] = useState(''); // opciones de géneros\n  let [sgenre, setSgenre] = useState(''); // género seleccionado\n\n  // Cada vez que cambie el origen guarda el estado en el store\n  // y setea genreopts con los valores correspondientes\n  useEffect(() => {\n    // Que limpie cualquier selección anterior\n    //   dispatch(searchGenre(''));\n    //   setSgenre('');\n    // }\n    let sendgenopsearch = (orig, apig, dbg) => {\n      if (orig === 'base de datos') {\n        //console.log(orig);\n        //dispatch(dbGenOpSearch()); // <-- Hacer...\n        setGenreopts(dbg); // <-- Cambiar en store...\n      }\n      if (orig === 'API') {\n        //console.log(orig);\n        dispatch(apiGenOpSearch());\n        // setGenreopts(apig);\n        //console.log(apig);\n      }\n    }\n    sendgenopsearch(origin, apigenRef.current, dbgenRef.current);// <-- referencia a apigenres\n  }, [origin, dispatch]);\n\n  //Cada vez que cambie el origen guarda el estado en el store\n  useEffect(() => {\n    setGenreopts(apigenres);\n  }, [apigenres]);\n\n  useEffect(() => {\n    setGenreopts(dbgenres);\n  }, [dbgenres]);\n\n  // Manda al store el género a buscar\n  function handleChange(e) {\n    dispatch(searchGenre(e.target.value));\n    setSgenre(e.target.value);\n  }\n\n  // Cuando cambie el género seleccionado lo manda al store.\n  useEffect(() => {\n    dispatch(searchGenre(sgenre));\n  }, [sgenre,dispatch]);\n\n  // Si presiona nueva búsqueda limpia el género\n  useEffect(() => {\n    // if (cleans) {\n    //   dispatch(searchGenre(''));\n    //   setSgenre('');\n    // }\n  }, [cleans,dispatch]);\n\n  return (\n    <div className=\"gcont\">\n      <select\n        name=\"genres\"\n        className=\"gselect\"\n        value={sgenre}\n        onChange={handleChange}\n      >\n        <option defaultValue  >Género:</option>\n        {genreopts && genreopts.map((option, index) => (\n          <option key={index} value={option.value}>{option.label}</option>\n        ))}\n      </select>\n    </div>\n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}