{"ast":null,"code":"import { GET_API_PLATFORMS } from '../actions/actions'; //GET_PLATFORMS,GET_GENRES,ADD_NEW_PLATFORM,ADD_NEW_GENRE\n\nconst initialState = {\n  apiplatforms: [] //arreglo de plataformas de la api\n  // moviesLoaded: [], // peliculas que nos trae la busqueda\n  // movieDetail: {} // info de una sola película\n\n};\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_MOVIES:\n      return { ...state,\n        moviesLoaded: action.payload //el payload es el arreglo de películas con el nombre buscado\n\n      };\n\n    case GET_MOVIE_DETAIL:\n      return { ...state,\n        movieDetail: action.payload\n      };\n\n    case ADD_MOVIE_FAVORITE:\n      let foundMovie = state.moviesLoaded.find(peli => peli.imdbID !== action.payload);\n      return { ...state,\n        //moviesFavorite: state.moviesFavorite.concat(foundMovie)\n        moviesFavorite: [...state.moviesFavorite, foundMovie]\n      };\n\n    case REMOVE_MOVIE_FAVORITE:\n      return { ...state,\n        moviesFavorite: state.moviesFavorite.filter(peli => peli.imdbID !== action.payload) //crea un nuevo array con todos los elementos que cumplan la condición\n        //cada peli es un objeto que en particular tiene una prop id\n\n      };\n\n    default:\n      return state;\n  }\n}\n\n;\nexport default reducer;","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/reducers/reducers.js"],"names":["GET_API_PLATFORMS","initialState","apiplatforms","reducer","state","action","type","GET_MOVIES","moviesLoaded","payload","GET_MOVIE_DETAIL","movieDetail","ADD_MOVIE_FAVORITE","foundMovie","find","peli","imdbID","moviesFavorite","REMOVE_MOVIE_FAVORITE","filter"],"mappings":"AAAA,SAAQA,iBAAR,QAAgC,oBAAhC,C,CACA;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,YAAY,EAAE,EADK,CACD;AAClB;AACA;;AAHmB,CAArB;;AAMA,SAASC,OAAT,CAAiBC,KAAK,GAAGH,YAAzB,EAAuCI,MAAvC,EAA+C;AAE7C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKC,UAAL;AACE,aAAO,EACL,GAAGH,KADE;AAELI,QAAAA,YAAY,EAAEH,MAAM,CAACI,OAFhB,CAEyB;;AAFzB,OAAP;;AAIF,SAAKC,gBAAL;AACE,aAAO,EACL,GAAGN,KADE;AAELO,QAAAA,WAAW,EAAEN,MAAM,CAACI;AAFf,OAAP;;AAIF,SAAKG,kBAAL;AACE,UAAIC,UAAU,GAAGT,KAAK,CAACI,YAAN,CAAmBM,IAAnB,CAAwBC,IAAI,IAAIA,IAAI,CAACC,MAAL,KAAgBX,MAAM,CAACI,OAAvD,CAAjB;AACA,aAAO,EACL,GAAGL,KADE;AAEL;AACAa,QAAAA,cAAc,EAAE,CAAC,GAAGb,KAAK,CAACa,cAAV,EAAyBJ,UAAzB;AAHX,OAAP;;AAKF,SAAKK,qBAAL;AACE,aAAO,EACL,GAAGd,KADE;AAELa,QAAAA,cAAc,EAAEb,KAAK,CAACa,cAAN,CAAqBE,MAArB,CAA8BJ,IAAD,IAAUA,IAAI,CAACC,MAAL,KAAgBX,MAAM,CAACI,OAA9D,CAFX,CAGL;AACA;;AAJK,OAAP;;AAMF;AACE,aAAOL,KAAP;AA1BJ;AA4BD;;AAAA;AAED,eAAeD,OAAf","sourcesContent":["import {GET_API_PLATFORMS} from '../actions/actions';\n//GET_PLATFORMS,GET_GENRES,ADD_NEW_PLATFORM,ADD_NEW_GENRE\n\nconst initialState = {\n  apiplatforms: [], //arreglo de plataformas de la api\n  // moviesLoaded: [], // peliculas que nos trae la busqueda\n  // movieDetail: {} // info de una sola película\n};\n\nfunction reducer(state = initialState, action) {\n\n  switch (action.type) {\n    case GET_MOVIES:\n      return {\n        ...state,\n        moviesLoaded: action.payload  //el payload es el arreglo de películas con el nombre buscado\n      }\n    case GET_MOVIE_DETAIL:\n      return {\n        ...state,\n        movieDetail: action.payload\n      }\n    case ADD_MOVIE_FAVORITE:\n      let foundMovie = state.moviesLoaded.find(peli => peli.imdbID !== action.payload)\n      return {\n        ...state,\n        //moviesFavorite: state.moviesFavorite.concat(foundMovie)\n        moviesFavorite: [...state.moviesFavorite,foundMovie]\n      }\n    case REMOVE_MOVIE_FAVORITE:\n      return {\n        ...state,\n        moviesFavorite: state.moviesFavorite.filter( (peli) => peli.imdbID !== action.payload)\n        //crea un nuevo array con todos los elementos que cumplan la condición\n        //cada peli es un objeto que en particular tiene una prop id\n      }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}