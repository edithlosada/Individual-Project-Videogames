{"ast":null,"code":"var _jsxFileName = \"/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/MultiSelectGenre/MultiSelectGenre.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './MultiSelectGenre.css';\nimport fetch from 'node-fetch';\nimport { saveNgGenSel } from '../../actions/actions';\nimport { useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function MultiSelectGenre() {\n  _s();\n\n  const dispatch = useDispatch();\n\n  function genObjFromArr(arr) {\n    let gen = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      let obj = {\n        value: arr[i].name,\n        label: arr[i].name\n      };\n      gen.push(obj);\n    }\n\n    return gen;\n  }\n\n  async function getGenreAsync() {\n    let response = await fetch(\"http://localhost:3001/genres\");\n    let data = await response.json();\n    let objArr = genObjFromArr(data);\n    return objArr;\n  }\n\n  let [show, setShow] = useState(false);\n  const genreopt = useRef([]);\n  useEffect(() => {\n    getGenreAsync().then(gen => {\n      genreopt.current = gen; //console.log(genreopt);\n    }).then(() => {\n      //console.log(genreopt);\n      setShow(true);\n    }).catch(error => console.log(error));\n  }); // Estado de géneros seleccionados\n\n  let [sgenres, setSgenres] = useState([]); // selected genres\n  // Quita género de la selección\n\n  function removeItem(item) {\n    let newItems = sgenres.filter(e => e !== item);\n    setSgenres(newItems);\n    dispatch(saveNgGenSel(sgenres));\n  } // Cuando hace selección en desplegable lo seleciona/deselecciona\n\n\n  function handleChange(e) {\n    let itemP = e.target.value;\n    let hasItem = sgenres.includes(itemP);\n\n    if (!hasItem) {\n      setSgenres([...sgenres, itemP]);\n    } else {\n      removeItem(itemP);\n    }\n  }\n\n  console.log(sgenres); // Cuando hace click en el botón lo saca\n\n  function handleClick(e) {\n    let itm = e.target.value;\n    removeItem(itm);\n  }\n\n  useEffect(() => {\n    dispatch(saveNgGenSel(sgenres));\n  }, [sgenres]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"selgenfom\",\n    children: !show ? '...cargando géneros.' : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"genres\",\n        placeholder: \"Plataformas...\",\n        className: \"multselectgen\",\n        value: '',\n        onChange: handleChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          defaultValue: true,\n          children: \"G\\xE9neros:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this), genreopt.current && genreopt.current.map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: item.value,\n          children: item.label\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gencont\",\n        children: sgenres.map((item, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"selgenbtn\",\n          value: item,\n          onClick: handleClick,\n          children: item\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MultiSelectGenre, \"dZn3+Q7WV5BeJA5LxaOxc91obDk=\", false, function () {\n  return [useDispatch];\n});\n\n_c = MultiSelectGenre;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiSelectGenre\");","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/MultiSelectGenre/MultiSelectGenre.jsx"],"names":["React","useState","useEffect","useRef","fetch","saveNgGenSel","useDispatch","MultiSelectGenre","dispatch","genObjFromArr","arr","gen","i","length","obj","value","name","label","push","getGenreAsync","response","data","json","objArr","show","setShow","genreopt","then","current","catch","error","console","log","sgenres","setSgenres","removeItem","item","newItems","filter","e","handleChange","itemP","target","hasItem","includes","handleClick","itm","map","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './MultiSelectGenre.css';\nimport fetch from 'node-fetch';\nimport {saveNgGenSel} from '../../actions/actions';\nimport { useDispatch } from 'react-redux';\n\nexport default function MultiSelectGenre() {\n\n  const dispatch = useDispatch();\n\n  function genObjFromArr(arr) {\n    let gen = [];\n    for (let i = 0; i < arr.length; i++) {\n      let obj = { value: arr[i].name, label: arr[i].name };\n      gen.push(obj);\n    }\n    return gen;\n  }\n\n  async function getGenreAsync() {\n    let response = await fetch(\"http://localhost:3001/genres\");\n    let data = await response.json();\n    let objArr = genObjFromArr(data);\n    return objArr;\n  }\n\n  let [show, setShow] = useState(false);\n  const genreopt = useRef([]);\n\n  useEffect(() => {\n    getGenreAsync()\n      .then(gen => {\n        genreopt.current = gen;\n        //console.log(genreopt);\n      })\n      .then(() => {\n        //console.log(genreopt);\n        setShow(true);\n      })\n      .catch(error => console.log(error))\n  })\n\n  // Estado de géneros seleccionados\n  let [sgenres, setSgenres] = useState([]);// selected genres\n\n  // Quita género de la selección\n  function removeItem(item) {\n    let newItems = sgenres.filter(e => e !== item);\n    setSgenres(newItems);\n    dispatch(saveNgGenSel(sgenres));\n  }\n\n  // Cuando hace selección en desplegable lo seleciona/deselecciona\n  function handleChange(e) {\n    let itemP = e.target.value;\n    let hasItem = sgenres.includes(itemP);\n    if (!hasItem) {\n      setSgenres([...sgenres, itemP]);\n    } else {\n      removeItem(itemP);\n    }\n  }\n  console.log(sgenres);\n\n  // Cuando hace click en el botón lo saca\n  function handleClick(e) {\n    let itm = e.target.value;\n    removeItem(itm);\n  }\n\n  useEffect(() => {\n    dispatch(saveNgGenSel(sgenres));\n  }, [sgenres]);\n\n  return (\n    <div className=\"selgenfom\">\n      {!show ? '...cargando géneros.' :\n        <>\n          <select\n            name=\"genres\"\n            placeholder=\"Plataformas...\"\n            className=\"multselectgen\"\n            value={''}\n            onChange={handleChange}\n          >\n            <option defaultValue>Géneros:</option>\n            {genreopt.current && genreopt.current.map((item, index) => (\n              <option key={index} value={item.value}>{item.label}</option>\n            ))}\n          </select>\n          <div className=\"gencont\">\n            {sgenres.map((item, index) => (\n              <button className=\"selgenbtn\" value={item}\n                onClick={handleClick} key={index}>\n                {item}\n              </button>\n            ))}\n          </div>\n        </>\n      }\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}