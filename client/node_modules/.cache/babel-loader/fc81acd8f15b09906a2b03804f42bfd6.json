{"ast":null,"code":"var _jsxFileName = \"/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/MultiSelectGenre/MultiSelectGenre.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport './MultiSelectGenre.css';\nimport store from '../../store/index'; //import genresopt from '../Genres/Genres';\n\nimport { getDbGenres } from '../../actions/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function MultiSelectGenre() {\n  _s();\n\n  //   const [genreop, setGenreop] = useState([]);\n  //   let [show, setShow] = useState(false);\n  const genreopt = [];\n\n  async function buildGenObjArr() {\n    fetch(\"http://localhost:3001/genres\").then(response => response.json()).then(arr => {\n      for (let i = 0; i < arr.length; i++) {\n        let obj = {\n          value: arr[i].name,\n          label: arr[i].name\n        };\n        genreopt.push(obj);\n      }\n    }).catch(error => console.log(error));\n  }\n\n  buildGenObjArr(); // // const state = useSelector(state => state.genreopt);\n  // // console.log(state);\n  //   // (1) Cuando cargue el componente que despache la acción \n  //   // que busca los géneros.\n  //   useEffect(() => {\n  //     console.log('(1) se cargó la página');\n  //     store.dispatch(getDbGenres());\n  //   }, []);\n  //   const [genreop, setGenreop] = useState([]);\n  //   let [show, setShow] = useState(false);\n  //   //(2) Cuando cargó los géneros en (1) que cambie el estado \"show\" a true\n  //   useEffect(() => {\n  //     console.log('(2) El store se cargó');\n  //     const genres = store.getState().genreopt;\n  //     //console.log(genres);\n  //     setGenreop(genres);\n  //     //console.log(genreop);\n  //   }, [store.getState().genreopt]).then(()=>      console.log('(3) Se trajo el arreglo'))\n  //   //console.log(genres);\n  //   useEffect(() => {\n  //     console.log('(3) Se trajo el arreglo');\n  //     console.log(genreop);\n  //     setShow(true);\n  //   }, [genreop])\n  //console.log('(2)cambió show a true, loading='+store.getState().loading);\n  // const genres = useSelector(state => state.genreopt);\n  // console.log(genres);\n  // useEffect(() => {\n  //   console.log(genreop);\n  //   setShow(true);\n  // }, [show,genreop])\n\n  console.log(show); // Estado de géneros seleccionados\n\n  let [sgenres, setSgenres] = useState([]); // selected genres\n\n  function removeItem(item) {\n    let newItems = sgenres.filter(e => e !== item);\n    setSgenres(newItems);\n  }\n\n  async function handleChange(e) {\n    let itemP = e.target.value;\n    let hasItem = sgenres.includes(itemP);\n\n    if (!hasItem) {\n      setSgenres([...sgenres, itemP]);\n    } else {\n      removeItem(itemP);\n    }\n  }\n\n  function handleClick(e) {\n    let itm = e.target.value;\n    removeItem(itm);\n  }\n\n  useEffect(() => {}, [sgenres]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"selgenfom\",\n    children: !show ? 'no muestra' : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"genres\",\n        placeholder: \"Plataformas...\",\n        className: \"multselectgen\",\n        value: '',\n        onChange: handleChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          defaultValue: true,\n          children: \"G\\xE9neros:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this), genreop && genreop.map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: item.value,\n          children: item.label\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gencont\",\n        children: sgenres.map((item, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"selgenbtn\",\n          value: item,\n          onClick: handleClick,\n          children: item\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MultiSelectGenre, \"GgSGUc3EUrWFdOW/IdZ7jZ5k8h0=\");\n\n_c = MultiSelectGenre;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiSelectGenre\");","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/MultiSelectGenre/MultiSelectGenre.jsx"],"names":["React","useState","useEffect","useDispatch","useSelector","store","getDbGenres","MultiSelectGenre","genreopt","buildGenObjArr","fetch","then","response","json","arr","i","length","obj","value","name","label","push","catch","error","console","log","show","sgenres","setSgenres","removeItem","item","newItems","filter","e","handleChange","itemP","target","hasItem","includes","handleClick","itm","genreop","map","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport './MultiSelectGenre.css';\nimport store from '../../store/index';\n//import genresopt from '../Genres/Genres';\nimport { getDbGenres } from '../../actions/actions';\n\nexport default function MultiSelectGenre() {\n\n\n  //   const [genreop, setGenreop] = useState([]);\n\n  //   let [show, setShow] = useState(false);\n\n  const genreopt = [];\n\n   async function buildGenObjArr() {\n    fetch(\"http://localhost:3001/genres\")\n      .then(response => response.json())\n      .then(arr => {\n        for (let i = 0; i < arr.length; i++) {\n          let obj = { value: arr[i].name, label: arr[i].name };\n          genreopt.push(obj);\n        }\n      })\n      .catch(error => console.log(error))\n  }\n\n  buildGenObjArr();\n\n\n\n\n\n\n\n  // // const state = useSelector(state => state.genreopt);\n  // // console.log(state);\n  \n  //   // (1) Cuando cargue el componente que despache la acción \n  //   // que busca los géneros.\n  //   useEffect(() => {\n  //     console.log('(1) se cargó la página');\n  //     store.dispatch(getDbGenres());\n  //   }, []);\n\n  //   const [genreop, setGenreop] = useState([]);\n\n  //   let [show, setShow] = useState(false);\n\n  //   //(2) Cuando cargó los géneros en (1) que cambie el estado \"show\" a true\n  //   useEffect(() => {\n  //     console.log('(2) El store se cargó');\n  //     const genres = store.getState().genreopt;\n  //     //console.log(genres);\n  //     setGenreop(genres);\n  //     //console.log(genreop);\n  //   }, [store.getState().genreopt]).then(()=>      console.log('(3) Se trajo el arreglo'))\n\n  //   //console.log(genres);\n\n  //   useEffect(() => {\n  //     console.log('(3) Se trajo el arreglo');\n  //     console.log(genreop);\n  //     setShow(true);\n  //   }, [genreop])\n  \n    //console.log('(2)cambió show a true, loading='+store.getState().loading);\n\n    // const genres = useSelector(state => state.genreopt);\n    // console.log(genres);\n\n\n    // useEffect(() => {\n    //   console.log(genreop);\n    //   setShow(true);\n    // }, [show,genreop])\n\n    console.log(show);\n\n\n  // Estado de géneros seleccionados\n  let [sgenres, setSgenres] = useState([]);// selected genres\n\n  function removeItem(item) {\n    let newItems = sgenres.filter(e => e !== item);\n    setSgenres(newItems);\n  }\n\n  async function handleChange(e) {\n    let itemP = e.target.value;\n    let hasItem = sgenres.includes(itemP);\n    if (!hasItem) {\n      setSgenres([...sgenres, itemP]);\n    } else {\n      removeItem(itemP);\n    }\n  }\n\n  function handleClick(e) {\n    let itm = e.target.value;\n    removeItem(itm);\n  }\n\n  useEffect(() => {\n  }, [sgenres]);\n\n  return (\n    <div className=\"selgenfom\">\n      {!show ? 'no muestra' :\n        <>\n          <select\n            name=\"genres\"\n            placeholder=\"Plataformas...\"\n            className=\"multselectgen\"\n            value={''}\n            onChange={handleChange}\n          >\n            <option defaultValue>Géneros:</option>\n            {genreop && genreop.map((item, index) => (\n              <option key={index} value={item.value}>{item.label}</option>\n            ))}\n          </select>\n          <div className=\"gencont\">\n            {sgenres.map((item, index) => (\n              <button className=\"selgenbtn\" value={item}\n                onClick={handleClick} key={index}>\n                {item}\n              </button>\n            ))}\n          </div>\n        </>\n      }\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}