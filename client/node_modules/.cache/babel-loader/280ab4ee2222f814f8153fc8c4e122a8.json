{"ast":null,"code":"var _jsxFileName = \"/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GenreSelect/GenreSelect.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './GenreSelect.css';\nimport { dbGenOpSearch, apiGenOpSearch, setSearchGenre } from '../../actions/actions'; //used on SearchMenu\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GenreSelect() {\n  _s();\n\n  const dispatch = useDispatch();\n  const origin = useSelector(state => state.searchOrig); // <--Busca el origen del store.\n\n  const apigenres = useSelector(state => state.apigenopts);\n  const [genres, setGenres] = useState('');\n  const apigenRef = useRef(apigenres); //<--para evitar missing dependency en useEffect\n  //console.log(apigenRef);\n  //     const genreopts = useCallback((orig,apig) => {\n  //   if (orig === 'db') {\n  //     console.log(orig);\n  //     dispatch(dbGenOpSearch());\n  //   }\n  //   if (orig === 'api') {\n  //     console.log(orig);\n  //     dispatch(apiGenOpSearch());\n  //     setGenres(apig);\n  //     //console.log(apig);\n  //   }\n  // },[dispatch])\n\n  const stableDispatch = useCallback(dispatch(), []);\n\n  const genreopts = (orig, apig) => {\n    if (orig === 'db') {\n      console.log(orig);\n      stableDispatch(dbGenOpSearch());\n    }\n\n    if (orig === 'api') {\n      console.log(orig);\n      stableDispatch(apiGenOpSearch());\n      setGenres(apig); //console.log(apig);\n    }\n  }; //Cada vez que cambie el origen guarda el estado en el store\n\n\n  useEffect(() => {\n    genreopts(origin, apigenRef.current);\n  }, [origin, stableDispatch]); // const genres = [\n  //   { label: 'acción', value: 'acción' },\n  //   { label: 'aventura', value: 'aventura' }\n  // ];\n  // Género a buscar\n\n  function handleChange(e) {\n    setGenres(e.target.value);\n    dispatch(setSearchGenre());\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gcont\",\n    children: /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"genres\",\n      className: \"gselect\",\n      value: genres,\n      onChange: handleChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        defaultValue: true,\n        children: \"G\\xE9nero:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), genres && genres.map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: option.value,\n        children: option.label\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GenreSelect, \"9lWStjLq1MtVpHNhcaXjmmqC4r0=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = GenreSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenreSelect\");","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GenreSelect/GenreSelect.jsx"],"names":["React","useState","useEffect","useRef","useCallback","useSelector","useDispatch","dbGenOpSearch","apiGenOpSearch","setSearchGenre","GenreSelect","dispatch","origin","state","searchOrig","apigenres","apigenopts","genres","setGenres","apigenRef","stableDispatch","genreopts","orig","apig","console","log","current","handleChange","e","target","value","map","option","index","label"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,EAA6CC,WAA7C,QAAgE,OAAhE;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAO,mBAAP;AACA,SAASC,aAAT,EAAwBC,cAAxB,EAAwCC,cAAxC,QAA8D,uBAA9D,C,CAEA;;;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AAEpC,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AAEA,QAAMM,MAAM,GAAGP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACC,UAAhB,CAA1B,CAJoC,CAIkB;;AACtD,QAAMC,SAAS,GAAGV,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACG,UAAhB,CAA7B;AAEA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBjB,QAAQ,CAAC,EAAD,CAApC;AAGA,QAAMkB,SAAS,GAAGhB,MAAM,CAACY,SAAD,CAAxB,CAVoC,CAUA;AACpC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMK,cAAc,GAAGhB,WAAW,CAACO,QAAQ,EAAT,EAAa,EAAb,CAAlC;;AAEA,QAAMU,SAAS,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAChC,QAAID,IAAI,KAAK,IAAb,EAAmB;AACjBE,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAF,MAAAA,cAAc,CAACb,aAAa,EAAd,CAAd;AACD;;AACD,QAAIe,IAAI,KAAK,KAAb,EAAoB;AAClBE,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAF,MAAAA,cAAc,CAACZ,cAAc,EAAf,CAAd;AACAU,MAAAA,SAAS,CAACK,IAAD,CAAT,CAHkB,CAIlB;AACD;AACF,GAXD,CA5BoC,CAyCpC;;;AACArB,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,SAAS,CAACT,MAAD,EAASO,SAAS,CAACO,OAAnB,CAAT;AACD,GAFQ,EAEN,CAACd,MAAD,EAAQQ,cAAR,CAFM,CAAT,CA1CoC,CAgDpC;AACA;AACA;AACA;AAEA;;AACA,WAASO,YAAT,CAAsBC,CAAtB,EAAyB;AACvBV,IAAAA,SAAS,CAACU,CAAC,CAACC,MAAF,CAASC,KAAV,CAAT;AACAnB,IAAAA,QAAQ,CAACF,cAAc,EAAf,CAAR;AACD;;AAID,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,2BACE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,SAAS,EAAC,SAFZ;AAGE,MAAA,KAAK,EAAEQ,MAHT;AAIE,MAAA,QAAQ,EAAEU,YAJZ;AAAA,8BAME;AAAQ,QAAA,YAAY,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,EAOGV,MAAM,IAAIA,MAAM,CAACc,GAAP,CAAW,CAACC,MAAD,EAASC,KAAT,kBACpB;AAAoB,QAAA,KAAK,EAAED,MAAM,CAACF,KAAlC;AAAA,kBAA0CE,MAAM,CAACE;AAAjD,SAAaD,KAAb;AAAA;AAAA;AAAA;AAAA,cADS,CAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GA5EuBvB,W;UAELJ,W,EAEFD,W,EACGA,W;;;KALIK,W","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './GenreSelect.css';\nimport { dbGenOpSearch, apiGenOpSearch, setSearchGenre } from '../../actions/actions';\n\n//used on SearchMenu\n\nexport default function GenreSelect() {\n\n  const dispatch = useDispatch();\n\n  const origin = useSelector(state => state.searchOrig);// <--Busca el origen del store.\n  const apigenres = useSelector(state => state.apigenopts);\n\n  const [genres, setGenres] = useState('');\n\n\n  const apigenRef = useRef(apigenres);//<--para evitar missing dependency en useEffect\n  //console.log(apigenRef);\n\n  //     const genreopts = useCallback((orig,apig) => {\n  //   if (orig === 'db') {\n  //     console.log(orig);\n  //     dispatch(dbGenOpSearch());\n  //   }\n  //   if (orig === 'api') {\n  //     console.log(orig);\n  //     dispatch(apiGenOpSearch());\n  //     setGenres(apig);\n  //     //console.log(apig);\n  //   }\n  // },[dispatch])\n\n  const stableDispatch = useCallback(dispatch(), [])\n\n  const genreopts = (orig, apig) => {\n    if (orig === 'db') {\n      console.log(orig);\n      stableDispatch(dbGenOpSearch());\n    }\n    if (orig === 'api') {\n      console.log(orig);\n      stableDispatch(apiGenOpSearch());\n      setGenres(apig);\n      //console.log(apig);\n    }\n  }\n\n  //Cada vez que cambie el origen guarda el estado en el store\n  useEffect(() => {\n    genreopts(origin, apigenRef.current);\n  }, [origin,stableDispatch]);\n\n\n\n  // const genres = [\n  //   { label: 'acción', value: 'acción' },\n  //   { label: 'aventura', value: 'aventura' }\n  // ];\n\n  // Género a buscar\n  function handleChange(e) {\n    setGenres(e.target.value);\n    dispatch(setSearchGenre());\n  }\n\n\n\n  return (\n    <div className=\"gcont\">\n      <select\n        name=\"genres\"\n        className=\"gselect\"\n        value={genres}\n        onChange={handleChange}\n      >\n        <option defaultValue >Género:</option>\n        {genres && genres.map((option, index) => (\n          <option key={index} value={option.value}>{option.label}</option>\n        ))}\n      </select>\n    </div>\n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}