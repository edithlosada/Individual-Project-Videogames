{"ast":null,"code":"var _jsxFileName = \"/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GamesGetter/GamesGetter.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './GamesGetter.css';\nimport GamesToShow from '../GamesToShow/GamesToShow.jsx';\nimport GameCard from '../GameCard/GameCard.jsx';\nimport { getApiGames, getdbGames, initsearch, setShowmsg, setGamesToShow } from '../../actions/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function GamesGetter() {\n  _s();\n\n  let dispatch = useDispatch();\n  let inits = useSelector(state => state.initsearch);\n  let cleans = useSelector(state => state.cleansearch);\n  let orig = useSelector(state => state.searchOrig);\n  let show = useSelector(state => state.showmsg);\n  let apig = useSelector(state => state.apigames);\n  let apigRef = useRef(apig); //---\n\n  let dbg = useSelector(state => state.dbgames);\n  let dbgRef = useRef(dbg); //---\n\n  let sgenre = useSelector(state => state.searchgenre);\n  let st = useSelector(state => state.stitle);\n  let stRef = useRef(st); //---\n  //let [showMsg, setShowMsg] = useState(true); //showmsg setShowmsg\n\n  let [gettingG, setGettingG] = useState(false);\n  let [games, setGames] = useState([]);\n  let gRef = useRef(games); //---\n\n  let [genFiltGames, setGenFiltGames] = useState(null);\n  let gfgRef = useRef(genFiltGames); //---\n\n  let [titFiltGames, setTitFiltGames] = useState(null);\n  let tfgRef = useRef(titFiltGames); //---\n  // Según el origen manda a buscar el arreglo de juegos \n  // donde corresponda y admninistra mjes.\n\n  useEffect(() => {\n    setGames([]);\n\n    if (orig === 'API') {\n      //console.log('cargaste API');\n      // dispatch(getApiGames());  // <<-- Sacar!!\n      dispatch(setShowmsg(false));\n      setGettingG(true);\n    }\n\n    if (orig === 'base de datos') {\n      // dispatch(getdbGames());  // <<-- Sacar!!\n      dispatch(setShowmsg(false));\n      setGettingG(true);\n    }\n  }, [orig, dispatch]); // Cuando obtiene el arreglo de juegos lo guarda localmente.\n  // y administra mje-\n\n  useEffect(() => {\n    if (orig === 'API') {\n      setGettingG(false);\n      console.log(apigRef.current);\n      setGames(apigRef.current);\n    }\n\n    if (orig === 'base de datos') {\n      setGettingG(false);\n      console.log(dbgRef.current);\n      setGames(dbgRef.current);\n    }\n  }, [gettingG, orig]); //sacar gettingG y dejar apiG / dbg\n  // Si se filtra por género reduce la búsqueda y guarda lo obtenido\n  // en el estado genFiltGames.\n\n  useEffect(() => {\n    let newarr = games.filter(e => e.genres.includes(sgenre));\n    setGenFiltGames(newarr);\n    setTitFiltGames(null); // Si cambio el género que quite cualquier selección previa guardada por título.\n\n    dispatch(initsearch(false)); // Cancela cualquier búsqueda anterior para poder escribir.\n    // console.log('cleans,'+cleans+', inits,' +inits)\n  }, [sgenre, games, dispatch]);\n  useEffect(() => {\n    console.log(genFiltGames); //........\n  }, [genFiltGames]); // Cuando presiona \"buscar\" filtra lo que ya tenía según el título\n\n  useEffect(() => {\n    if (inits) {\n      // Si presionó/está en buscar\n      let arr = games; // arreglo obtenido según orígen\n\n      if (!sgenre) {\n        console.log('no había género de búsqueda');\n      } else {\n        // si filtró x género usa el arreglo ya filtrado\n        console.log(genFiltGames);\n        arr = genFiltGames;\n      }\n\n      if (!st) {\n        // si no ingreso texto trae todo\n        console.log('no había texto de búsqueda');\n        setTitFiltGames(arr);\n      } else {\n        console.log('search title is' + st);\n        let newarr = arr.filter(e => e.name.toLowerCase().includes(st.toLowerCase()));\n        setTitFiltGames(newarr);\n      }\n    }\n  }, [inits, genFiltGames, st]);\n  useEffect(() => {\n    if (cleans) {\n      setTitFiltGames([]);\n    }\n  }, [cleans]); // useEffect(() => {\n  //   dispatch(setGamesToShow(titFiltGames));\n  //   // console.log('(1)');\n  //   // console.log(titFiltGames);\n  // }, [titFiltGames,dispatch])\n  //-----------------------------------------\n\n  let [n, setN] = useState(0); // n es el número de juegos en el arreglo\n\n  let [g, setG] = useState([]);\n  useEffect(() => {\n    if (titFiltGames.length !== 0) {\n      setN(titFiltGames);\n    } else {\n      console.log();\n    } // console.log('(1)');\n    // console.log(titFiltGames);\n\n  }, [titFiltGames]);\n  useEffect(() => {\n    effect;\n  }, [titFiltGames]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p_cards_area\",\n    children: [show && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \" Seleccione primero un or\\xEDgen para su b\\xFAsqueda (API/DB)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 16\n    }, this), gettingG && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\" ...Obteniendo juegos de la \", orig, \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 20\n    }, this), inits && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(GamesToShow, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 7\n      }, this)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GamesGetter, \"g+gqrUMQJ+Xm8A1CW0e41/qAJrM=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = GamesGetter;\n\nvar _c;\n\n$RefreshReg$(_c, \"GamesGetter\");","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GamesGetter/GamesGetter.jsx"],"names":["React","useState","useEffect","useRef","useSelector","useDispatch","GamesToShow","GameCard","getApiGames","getdbGames","initsearch","setShowmsg","setGamesToShow","GamesGetter","dispatch","inits","state","cleans","cleansearch","orig","searchOrig","show","showmsg","apig","apigames","apigRef","dbg","dbgames","dbgRef","sgenre","searchgenre","st","stitle","stRef","gettingG","setGettingG","games","setGames","gRef","genFiltGames","setGenFiltGames","gfgRef","titFiltGames","setTitFiltGames","tfgRef","console","log","current","newarr","filter","e","genres","includes","arr","name","toLowerCase","n","setN","g","setG","length","effect"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './GamesGetter.css';\nimport GamesToShow from '../GamesToShow/GamesToShow.jsx';\nimport GameCard from '../GameCard/GameCard.jsx';\nimport { getApiGames, getdbGames, initsearch, setShowmsg , setGamesToShow} from '../../actions/actions';\n\nexport default function GamesGetter() {\n\n  let dispatch = useDispatch();\n\n  let inits = useSelector(state => state.initsearch);\n  let cleans = useSelector(state => state.cleansearch);\n  let orig = useSelector(state => state.searchOrig);\n  let show = useSelector(state => state.showmsg);\n  let apig = useSelector(state => state.apigames);\n  let apigRef = useRef(apig); //---\n  let dbg = useSelector(state => state.dbgames);\n  let dbgRef = useRef(dbg); //---\n  let sgenre = useSelector(state => state.searchgenre);\n  let st = useSelector(state => state.stitle);\n  let stRef = useRef(st); //---\n\n  //let [showMsg, setShowMsg] = useState(true); //showmsg setShowmsg\n  let [gettingG, setGettingG] = useState(false);\n  let [games, setGames] = useState([]);\n  let gRef = useRef(games); //---\n  let [genFiltGames, setGenFiltGames] = useState(null);\n  let gfgRef = useRef(genFiltGames); //---\n  let [titFiltGames, setTitFiltGames] = useState(null);\n  let tfgRef = useRef(titFiltGames); //---\n\n  // Según el origen manda a buscar el arreglo de juegos \n  // donde corresponda y admninistra mjes.\n  useEffect(() => {\n    setGames([]);\n    if (orig === 'API') {\n      //console.log('cargaste API');\n      // dispatch(getApiGames());  // <<-- Sacar!!\n      dispatch(setShowmsg(false));\n      setGettingG(true);\n    }\n    if (orig === 'base de datos') {\n      // dispatch(getdbGames());  // <<-- Sacar!!\n      dispatch(setShowmsg(false));\n      setGettingG(true);\n    }\n  }, [orig, dispatch]);\n\n  // Cuando obtiene el arreglo de juegos lo guarda localmente.\n  // y administra mje-\n  useEffect(() => {\n    if (orig === 'API') {\n      setGettingG(false);\n      console.log(apigRef.current);\n      setGames(apigRef.current);\n    }\n    if (orig === 'base de datos') {\n      setGettingG(false);\n      console.log(dbgRef.current);\n      setGames(dbgRef.current);\n    }\n  }, [gettingG, orig]); //sacar gettingG y dejar apiG / dbg\n\n  // Si se filtra por género reduce la búsqueda y guarda lo obtenido\n  // en el estado genFiltGames.\n  useEffect(() => {\n    let newarr = games.filter(e => e.genres.includes(sgenre));\n    setGenFiltGames(newarr);\n    setTitFiltGames(null); // Si cambio el género que quite cualquier selección previa guardada por título.\n    dispatch(initsearch(false)); // Cancela cualquier búsqueda anterior para poder escribir.\n    // console.log('cleans,'+cleans+', inits,' +inits)\n  }, [sgenre, games, dispatch])\n\n  useEffect(() => {\n    console.log(genFiltGames); //........\n  }, [genFiltGames])\n\n  // Cuando presiona \"buscar\" filtra lo que ya tenía según el título\n  useEffect(() => {\n    if (inits) { // Si presionó/está en buscar\n      let arr = games; // arreglo obtenido según orígen\n      if (!sgenre) {\n        console.log('no había género de búsqueda');\n      } else {// si filtró x género usa el arreglo ya filtrado\n        console.log(genFiltGames);\n        arr = genFiltGames;\n      }\n      if (!st) {// si no ingreso texto trae todo\n        console.log('no había texto de búsqueda');\n        setTitFiltGames(arr);\n      } else {\n        console.log('search title is' + st);\n        let newarr = arr.filter(e => e.name.toLowerCase().includes(st.toLowerCase()));\n        setTitFiltGames(newarr);\n      }\n    }\n  }, [inits, genFiltGames, st])\n\n  useEffect(() => {\n    if (cleans) {\n      setTitFiltGames([]);\n    }\n  }, [cleans])\n\n  // useEffect(() => {\n  //   dispatch(setGamesToShow(titFiltGames));\n  //   // console.log('(1)');\n  //   // console.log(titFiltGames);\n  // }, [titFiltGames,dispatch])\n  //-----------------------------------------\n\n  let [n, setN] = useState(0); // n es el número de juegos en el arreglo\n  let [g, setG] = useState([]);\n\n  useEffect(() => {\n    if(titFiltGames.length !== 0){\n    setN(titFiltGames)\n    } else {\n      console.log()\n    }\n    // console.log('(1)');\n    // console.log(titFiltGames);\n  }, [titFiltGames])\n\n  useEffect(() => {\n    effect\n  }, [titFiltGames])\n\n\n  return (\n    <div className=\"p_cards_area\">\n      {show && <h3> Seleccione primero un orígen para su búsqueda (API/DB)</h3>}\n      {gettingG && <h3> ...Obteniendo juegos de la {orig}.</h3>}\n      {inits && <>\n      {/* <GameCard key={1} id={3498} name={\"Grand Theft Auto V\"}  genres={\"Action,Adventure\"} /> */}\n      <GamesToShow />\n      </>}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}