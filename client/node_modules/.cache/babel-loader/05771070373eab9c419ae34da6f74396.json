{"ast":null,"code":"var _jsxFileName = \"/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/MultiSelectPlatform/MultiSelectPlatform.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './MultiSelectPlatform.css';\nimport { connect } from \"react-redux\";\nimport { getApiPlatforms } from '../../actions/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function MultiSelectPlatform(props) {\n  _s();\n\n  //console.log(props);\n  //const platfopt = props.getApiPlatforms();\n  const plataformas = [];\n  const plataformasO = [];\n\n  function getPlatforms() {\n    fetch(\"https://api.rawg.io/api/platforms\") //url de api con plataformas\n    .then(response => response.json()) //aplica json y retorna\n    .then(json => {\n      let data = json.results;\n\n      for (let i = 0; i < data.length; i++) {\n        plataformas.push(data[i].name);\n        plataformas.push(`{value: data[i].name`);\n      }\n    }).catch(error => console.log(error));\n    return;\n  }\n\n  getPlatforms(); //console.log(plataformas);\n\n  function createPlatfOpts(arr) {\n    let p = arr;\n    console.log(p);\n    console.log(`${p[0]}`);\n    const platfOpts = [];\n\n    for (let i = 0; i < p.length; i++) {\n      let a = p[i]; // console.log(a);\n\n      platfOpts.push(a); // platfOpts.push( {value: p[i], label: p[i]} );\n    } //console.log(platfOpts);\n\n\n    return platfOpts;\n  }\n\n  createPlatfOpts(plataformas); //let platfopt = createPlatfOpts(plataformas);\n  // console.log(platfopt);\n\n  let [splatforms, setSplatforms] = useState([]); // selected platforms\n\n  function removeItem(item) {\n    let newItems = splatforms.filter(e => e !== item);\n    setSplatforms(newItems);\n  }\n\n  async function handleChange(e) {\n    let itemP = e.target.value;\n    let hasItem = splatforms.includes(itemP);\n\n    if (!hasItem) {\n      setSplatforms([...splatforms, itemP]);\n    } else {\n      removeItem(itemP);\n    }\n  }\n\n  function handleClick(e) {\n    let itm = e.target.value;\n    removeItem(itm);\n  }\n\n  useEffect(() => {}, [splatforms]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"selplatfom\",\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"platforms\",\n      placeholder: \"Plataformas...\",\n      className: \"multselectpf\",\n      value: '',\n      onChange: handleChange,\n      children: /*#__PURE__*/_jsxDEV(\"option\", {\n        defaultValue: true,\n        children: \"Plataformas:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"platfcont\",\n      children: splatforms.map((item, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"selplatfbtn\",\n        value: item,\n        onClick: handleClick,\n        children: item\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n} // Función que recibe como argumento el estado de Redux y retorna\n// como \"props\" un objeto que contiene el estado.\n\n_s(MultiSelectPlatform, \"JidCj2aTRoSdkQ8cj9qo5Ayovxg=\");\n\n_c = MultiSelectPlatform;\n\nconst mapStateToProps = state => {\n  return {\n    platforms: state.apiplatforms\n  };\n}; // // Función que recibe como argumento el método dispatch() de Redux\n// // y retorna un objeto.\n// const mapDispatchToProps = dispatch => {\n// \treturn { getplatforms: () => dispatch(getApiPlatforms()) }\n// }\n\n\nexport default connect(mapStateToProps, {\n  getApiPlatforms\n})(MultiSelectPlatform);\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiSelectPlatform\");","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/MultiSelectPlatform/MultiSelectPlatform.jsx"],"names":["React","useState","useEffect","connect","getApiPlatforms","MultiSelectPlatform","props","plataformas","plataformasO","getPlatforms","fetch","then","response","json","data","results","i","length","push","name","catch","error","console","log","createPlatfOpts","arr","p","platfOpts","a","splatforms","setSplatforms","removeItem","item","newItems","filter","e","handleChange","itemP","target","value","hasItem","includes","handleClick","itm","map","index","mapStateToProps","state","platforms","apiplatforms"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './MultiSelectPlatform.css';\nimport { connect } from \"react-redux\";\nimport { getApiPlatforms } from '../../actions/actions';\n\nexport function MultiSelectPlatform(props) {\n  //console.log(props);\n  //const platfopt = props.getApiPlatforms();\n\n  const plataformas = [];\n  const plataformasO = [];\n\n  function getPlatforms() {\n    fetch(\"https://api.rawg.io/api/platforms\") //url de api con plataformas\n      .then(response => response.json()) //aplica json y retorna\n      .then(json => {\n        let data = json.results;\n        for (let i=0 ; i< data.length; i++){\n          plataformas.push(data[i].name)\n          plataformas.push(`{value: data[i].name`)\n        }\n      })\n      .catch(error => console.log(error))\n    return\n  }\n\n  getPlatforms();\n  //console.log(plataformas);\n\n  function createPlatfOpts(arr) {\n    let p = arr;\n    console.log(p);\n    console.log(`${p[0]}`);\n    const platfOpts = [];\n    for (let i=0 ; i< p.length; i++){\n      let a =  p[i];\n     // console.log(a);\n      platfOpts.push( a );\n      // platfOpts.push( {value: p[i], label: p[i]} );\n    }\n    //console.log(platfOpts);\n    return platfOpts;\n  }\n\n  createPlatfOpts(plataformas);\n  //let platfopt = createPlatfOpts(plataformas);\n // console.log(platfopt);\n\n  let [splatforms, setSplatforms] = useState([]); // selected platforms\n\n  function removeItem(item) {\n    let newItems = splatforms.filter(e => e !== item);\n    setSplatforms(newItems);\n  }\n\n  async function handleChange(e) {\n    let itemP = e.target.value;\n    let hasItem = splatforms.includes(itemP);\n    if (!hasItem) {\n      setSplatforms([...splatforms, itemP]);\n    } else {\n      removeItem(itemP);\n    }\n  }\n\n  function handleClick(e) {\n    let itm = e.target.value;\n    removeItem(itm);\n  }\n\n  useEffect(() => {\n  }, [splatforms]);\n\n  return (\n    <div className=\"selplatfom\">\n      <select\n        name=\"platforms\"\n        placeholder=\"Plataformas...\"\n        className=\"multselectpf\"\n        value={''}\n        onChange={handleChange}\n      >\n        <option defaultValue>Plataformas:</option>\n        {/* {platfopt.map((item, index) => (\n          <option key={index} value={item.value}>{item.label}</option>\n        ))} */}\n      </select>\n      <div className=\"platfcont\">\n        {splatforms.map((item, index) => (\n          <button className=\"selplatfbtn\" value={item}\n            onClick={handleClick} key={index}>\n            {item}\n          </button>\n        ))}\n      </div>\n    </div>\n  )\n}\n\n// Función que recibe como argumento el estado de Redux y retorna\n// como \"props\" un objeto que contiene el estado.\nconst mapStateToProps = state => {\n  return { platforms: state.apiplatforms }\n}\n\n// // Función que recibe como argumento el método dispatch() de Redux\n// // y retorna un objeto.\n\n// const mapDispatchToProps = dispatch => {\n// \treturn { getplatforms: () => dispatch(getApiPlatforms()) }\n// }\n\nexport default connect(mapStateToProps, { getApiPlatforms })(MultiSelectPlatform);\n"]},"metadata":{},"sourceType":"module"}