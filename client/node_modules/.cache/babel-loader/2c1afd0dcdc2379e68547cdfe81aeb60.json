{"ast":null,"code":"var _jsxFileName = \"/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GamesGetter/GamesGetter.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './GamesGetter.css';\nimport GamesToShow from '../GamesToShow/GamesToShow.jsx';\nimport GameCard from '../GameCard/GameCard.jsx';\nimport { getApiGames, getdbGames, initsearch, setShowmsg, setGamesToShow } from '../../actions/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function GamesGetter() {\n  _s();\n\n  let dispatch = useDispatch();\n  let inits = useSelector(state => state.initsearch);\n  let cleans = useSelector(state => state.cleansearch);\n  let orig = useSelector(state => state.searchOrig);\n  let show = useSelector(state => state.showmsg);\n  let apig = useSelector(state => state.apigames);\n  let apigRef = useRef(apig); //---\n\n  let dbg = useSelector(state => state.dbgames);\n  let dbgRef = useRef(dbg); //---\n\n  let sgenre = useSelector(state => state.searchgenre);\n  let st = useSelector(state => state.stitle);\n  let stRef = useRef(st); //---\n\n  let gamests = useSelector(state => state.gamestoshow); // juegos para mostrar\n  //let [showMsg, setShowMsg] = useState(true); //showmsg setShowmsg\n\n  let [gettingG, setGettingG] = useState(false);\n  let [games, setGames] = useState([]);\n  let gRef = useRef(games); //---\n\n  let [genFiltGames, setGenFiltGames] = useState(null);\n  let gfgRef = useRef(genFiltGames); //---\n\n  let [titFiltGames, setTitFiltGames] = useState(null);\n  let tfgRef = useRef(titFiltGames); //---\n  // Según el origen manda a buscar el arreglo de juegos \n  // donde corresponda y admninistra mjes.\n\n  useEffect(() => {\n    setGames([]);\n\n    if (orig === 'API') {\n      //console.log('cargaste API');\n      // dispatch(getApiGames());  // <<-- Sacar!!\n      dispatch(setShowmsg(false));\n      setGettingG(true);\n    }\n\n    if (orig === 'base de datos') {\n      // dispatch(getdbGames());  // <<-- Sacar!!\n      dispatch(setShowmsg(false));\n      setGettingG(true);\n    }\n  }, [orig, dispatch]); // Cuando obtiene el arreglo de juegos lo guarda localmente.\n  // y administra mje-\n\n  useEffect(() => {\n    if (orig === 'API') {\n      setGettingG(false);\n      console.log(apigRef.current);\n      setGames(apigRef.current);\n    }\n\n    if (orig === 'base de datos') {\n      setGettingG(false);\n      console.log(dbgRef.current);\n      setGames(dbgRef.current);\n    }\n  }, [gettingG, orig]); //sacar gettingG y dejar apiG / dbg\n  // Si se filtra por género reduce la búsqueda y guarda lo obtenido\n  // en el estado genFiltGames.\n\n  useEffect(() => {\n    let newarr = games.filter(e => e.genres.includes(sgenre));\n    setGenFiltGames(newarr);\n    setTitFiltGames(null); // Si cambio el género que quite cualquier selección previa guardada por título.\n\n    dispatch(initsearch(false)); // Cancela cualquier búsqueda anterior para poder escribir.\n    // console.log('cleans,'+cleans+', inits,' +inits)\n  }, [sgenre, games, dispatch]); // useEffect(() => {\n  //   console.log(genFiltGames); //........\n  // }, [genFiltGames])\n  // Cuando presiona \"buscar\" filtra lo que ya tenía según el título\n\n  useEffect(() => {\n    //console.log(genFiltGames); //........\n    if (inits) {\n      // Si presionó/está en buscar\n      let arr = games; // arreglo obtenido según orígen\n\n      if (!sgenre) {\n        console.log('no había género de búsqueda');\n      } else {\n        // si filtró x género usa el arreglo ya filtrado\n        console.log(genFiltGames);\n        arr = genFiltGames;\n      }\n\n      if (!st) {\n        // si no ingreso texto trae todo\n        console.log('no había texto de búsqueda');\n        console.log(genFiltGames); //........\n\n        setTitFiltGames(arr);\n      } else {\n        console.log('search title is' + st);\n        let newarr = arr.filter(e => e.name.toLowerCase().includes(st.toLowerCase()));\n        setTitFiltGames(newarr);\n      }\n    }\n  }, [inits, genFiltGames, st]);\n  useEffect(() => {\n    if (cleans) {\n      setTitFiltGames([]);\n    }\n  }, [cleans]);\n  useEffect(() => {\n    console.log(titFiltGames);\n    dispatch(setGamesToShow(titFiltGames)); // console.log('(1)');\n  }, [titFiltGames, dispatch]);\n  useEffect(() => {// borrar x qe es del store\n  }, [gamests]); //-----------------------------------------\n\n  let [pageCount, setPageCount] = useState(0);\n  let [currentPage, setCurrentPage] = useState(0); //inicialmente la primer página\n\n  let [currentPageArr, setCurrentPArr] = useState([]);\n  let [pages, setPages] = useState(null);\n  let PER_PAGE = 3;\n  useEffect(() => {\n    if (titFiltGames) {\n      console.log('Toy acá 1');\n      let n = titFiltGames.length;\n      let pc = Math.ceil(n / PER_PAGE);\n      setPageCount(pc); // Función que obtiene el subarreglo de juegos a mostrar según la pagina\n      // en la que se encuentre.\n\n      function inpageshow(currentPage, perpage, titFiltGames) {\n        let offset = currentPage * perpage;\n        let currentPageArr = titFiltGames.slice(offset, offset + PER_PAGE);\n        console.log(currentPageArr);\n        setCurrentPArr([...currentPageArr]);\n      }\n\n      console.log('Toy acá 2');\n      inpageshow(currentPage, PER_PAGE, titFiltGames); // Función que crea botones para cáda página\n\n      function pagesNumArr(pageCount) {\n        let arr = [];\n\n        for (let i = 1; i <= pageCount; i++) {\n          arr.push(i);\n        }\n\n        return arr;\n      }\n\n      let pages = pagesNumArr(pageCount);\n      setPages(pages);\n    }\n  }, [titFiltGames, PER_PAGE, currentPage]);\n  useEffect(() => {}, []);\n\n  function handlePrev() {\n    if (currentPage != 0) {\n      setCurrentPage(currentPage - 1);\n    }\n  }\n\n  const handleNext = e => {\n    console.log(currentPage);\n    console.log(pageCount);\n\n    if (currentPage < pageCount - 1) {\n      setCurrentPage(currentPage + 1);\n    }\n  };\n\n  function handlePage(e) {\n    setCurrentPage(e.target.value - 1);\n    console.log('current page is' + currentPage);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p_cards_area\",\n    children: [show && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \" Seleccione primero un or\\xEDgen para su b\\xFAsqueda (API/DB)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 16\n    }, this), gettingG && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\" ...Obteniendo juegos de la \", orig, \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 20\n    }, this), inits && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cardcont\",\n        children: currentPageArr && currentPageArr.map((g, i) => /*#__PURE__*/_jsxDEV(GameCard, {\n          id: g.apId,\n          name: g.name,\n          img: g.img_url,\n          genres: g.genres\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p_btn_area\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"p_button\",\n          onClick: handlePrev,\n          children: \"Anterior\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this), pages && pages.map((p, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"op_button\",\n          onClick: handlePage,\n          value: p,\n          children: [\" \", p, \" \"]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"p_button\",\n          onClick: handleNext,\n          children: \"Siguiente\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GamesGetter, \"se7p4B3cl/heFogAEytgiTFf1fY=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = GamesGetter;\n\nvar _c;\n\n$RefreshReg$(_c, \"GamesGetter\");","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GamesGetter/GamesGetter.jsx"],"names":["React","useState","useEffect","useRef","useSelector","useDispatch","GamesToShow","GameCard","getApiGames","getdbGames","initsearch","setShowmsg","setGamesToShow","GamesGetter","dispatch","inits","state","cleans","cleansearch","orig","searchOrig","show","showmsg","apig","apigames","apigRef","dbg","dbgames","dbgRef","sgenre","searchgenre","st","stitle","stRef","gamests","gamestoshow","gettingG","setGettingG","games","setGames","gRef","genFiltGames","setGenFiltGames","gfgRef","titFiltGames","setTitFiltGames","tfgRef","console","log","current","newarr","filter","e","genres","includes","arr","name","toLowerCase","pageCount","setPageCount","currentPage","setCurrentPage","currentPageArr","setCurrentPArr","pages","setPages","PER_PAGE","n","length","pc","Math","ceil","inpageshow","perpage","offset","slice","pagesNumArr","i","push","handlePrev","handleNext","handlePage","target","value","map","g","apId","img_url","p"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './GamesGetter.css';\nimport GamesToShow from '../GamesToShow/GamesToShow.jsx';\nimport GameCard from '../GameCard/GameCard.jsx';\nimport { getApiGames, getdbGames, initsearch, setShowmsg, setGamesToShow } from '../../actions/actions';\n\nexport default function GamesGetter() {\n\n  let dispatch = useDispatch();\n\n  let inits = useSelector(state => state.initsearch);\n  let cleans = useSelector(state => state.cleansearch);\n  let orig = useSelector(state => state.searchOrig);\n  let show = useSelector(state => state.showmsg);\n  let apig = useSelector(state => state.apigames);\n  let apigRef = useRef(apig); //---\n  let dbg = useSelector(state => state.dbgames);\n  let dbgRef = useRef(dbg); //---\n  let sgenre = useSelector(state => state.searchgenre);\n  let st = useSelector(state => state.stitle);\n  let stRef = useRef(st); //---\n  let gamests = useSelector(state => state.gamestoshow); // juegos para mostrar\n\n  //let [showMsg, setShowMsg] = useState(true); //showmsg setShowmsg\n  let [gettingG, setGettingG] = useState(false);\n  let [games, setGames] = useState([]);\n  let gRef = useRef(games); //---\n  let [genFiltGames, setGenFiltGames] = useState(null);\n  let gfgRef = useRef(genFiltGames); //---\n  let [titFiltGames, setTitFiltGames] = useState(null);\n  let tfgRef = useRef(titFiltGames); //---\n\n  // Según el origen manda a buscar el arreglo de juegos \n  // donde corresponda y admninistra mjes.\n  useEffect(() => {\n    setGames([]);\n    if (orig === 'API') {\n      //console.log('cargaste API');\n      // dispatch(getApiGames());  // <<-- Sacar!!\n      dispatch(setShowmsg(false));\n      setGettingG(true);\n    }\n    if (orig === 'base de datos') {\n      // dispatch(getdbGames());  // <<-- Sacar!!\n      dispatch(setShowmsg(false));\n      setGettingG(true);\n    }\n  }, [orig, dispatch]);\n\n  // Cuando obtiene el arreglo de juegos lo guarda localmente.\n  // y administra mje-\n  useEffect(() => {\n    if (orig === 'API') {\n      setGettingG(false);\n      console.log(apigRef.current);\n      setGames(apigRef.current);\n    }\n    if (orig === 'base de datos') {\n      setGettingG(false);\n      console.log(dbgRef.current);\n      setGames(dbgRef.current);\n    }\n  }, [gettingG, orig]); //sacar gettingG y dejar apiG / dbg\n\n  // Si se filtra por género reduce la búsqueda y guarda lo obtenido\n  // en el estado genFiltGames.\n  useEffect(() => {\n    let newarr = games.filter(e => e.genres.includes(sgenre));\n    setGenFiltGames(newarr);\n    setTitFiltGames(null); // Si cambio el género que quite cualquier selección previa guardada por título.\n    dispatch(initsearch(false)); // Cancela cualquier búsqueda anterior para poder escribir.\n    // console.log('cleans,'+cleans+', inits,' +inits)\n  }, [sgenre, games, dispatch])\n\n  // useEffect(() => {\n  //   console.log(genFiltGames); //........\n  // }, [genFiltGames])\n\n  // Cuando presiona \"buscar\" filtra lo que ya tenía según el título\n  useEffect(() => {\n    //console.log(genFiltGames); //........\n    if (inits) { // Si presionó/está en buscar\n      let arr = games; // arreglo obtenido según orígen\n      if (!sgenre) {\n        console.log('no había género de búsqueda');\n      } else {// si filtró x género usa el arreglo ya filtrado\n        console.log(genFiltGames);\n        arr = genFiltGames;\n      }\n      if (!st) {// si no ingreso texto trae todo\n        console.log('no había texto de búsqueda');\n        console.log(genFiltGames); //........\n        setTitFiltGames(arr);\n      } else {\n        console.log('search title is' + st);\n        let newarr = arr.filter(e => e.name.toLowerCase().includes(st.toLowerCase()));\n        setTitFiltGames(newarr);\n      }\n    }\n  }, [inits, genFiltGames, st])\n\n  useEffect(() => {\n    if (cleans) {\n      setTitFiltGames([]);\n    }\n  }, [cleans])\n\n  useEffect(() => {\n    console.log(titFiltGames);\n    dispatch(setGamesToShow(titFiltGames));\n    // console.log('(1)');\n  }, [titFiltGames, dispatch])\n\n  useEffect(() => {// borrar x qe es del store\n  }, [gamests])\n  //-----------------------------------------\n\n  let [pageCount, setPageCount] = useState(0);\n  let [currentPage, setCurrentPage] = useState(0); //inicialmente la primer página\n  let [currentPageArr, setCurrentPArr] = useState([]);\n  let [pages, setPages] = useState(null);\n  let PER_PAGE = 3;\n\n  useEffect(() => {\n    if (titFiltGames) {\n      console.log('Toy acá 1')\n      let n = titFiltGames.length;\n      let pc = Math.ceil(n / PER_PAGE);\n      setPageCount(pc);\n\n      // Función que obtiene el subarreglo de juegos a mostrar según la pagina\n      // en la que se encuentre.\n      function inpageshow(currentPage, perpage, titFiltGames) {\n        let offset = currentPage * perpage;\n        let currentPageArr = titFiltGames.slice(offset, offset + PER_PAGE)\n        console.log(currentPageArr);\n        setCurrentPArr([...currentPageArr]);\n      }\n      console.log('Toy acá 2')\n      inpageshow(currentPage, PER_PAGE, titFiltGames);\n\n      // Función que crea botones para cáda página\n      function pagesNumArr(pageCount) {\n        let arr = [];\n        for (let i = 1; i <= pageCount; i++) {\n          arr.push(i);\n        }\n        return arr;\n      }\n      let pages = pagesNumArr(pageCount);\n      setPages(pages);\n    }\n  }, [titFiltGames, PER_PAGE, currentPage])\n\n  useEffect(() => {\n\n  },[])\n\n\n  function handlePrev() {\n    if (currentPage != 0) {\n      setCurrentPage(currentPage - 1);\n    }\n  }\n\n  const handleNext = (e) => {\n    console.log(currentPage);\n    console.log(pageCount);\n    if (currentPage < pageCount - 1) {\n      setCurrentPage(currentPage + 1);\n    }\n  }\n\n  function handlePage(e) {\n    setCurrentPage(e.target.value - 1);\n    console.log('current page is' + currentPage);\n  }\n\n\n  return (\n    <div className=\"p_cards_area\">\n      {show && <h3> Seleccione primero un orígen para su búsqueda (API/DB)</h3>}\n      {gettingG && <h3> ...Obteniendo juegos de la {orig}.</h3>}\n      {inits && <>\n        {/* <GameCard key={1} id={3498} name={\"Grand Theft Auto V\"} genres={\"Action,Adventure,Indie, Puzzle,Platformer\"} /> */}\n        <div className=\"cardcont\" >\n          {currentPageArr && currentPageArr.map((g, i) => (\n            <GameCard key={i} id={g.apId} name={g.name} img={g.img_url} genres={g.genres} />\n          ))}\n        </div>\n        <div className=\"p_btn_area\">\n          <button className=\"p_button\" onClick={handlePrev}>Anterior</button>\n          {pages && pages.map((p, i) => (\n          <button key={i} className=\"op_button\" onClick={handlePage} value={p}> {p} </button>\n        ))}\n          <button className=\"p_button\" onClick={handleNext}>Siguiente</button>\n        </div>\n      </>}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}