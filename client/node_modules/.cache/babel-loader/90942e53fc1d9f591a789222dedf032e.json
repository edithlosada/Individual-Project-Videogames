{"ast":null,"code":"var _jsxFileName = \"/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GenreSelect/GenreSelect.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './GenreSelect.css';\nimport { dbGenOpSearch, apiGenOpSearch, searchGenre } from '../../actions/actions'; //used on SearchMenu\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GenreSelect() {\n  _s();\n\n  let dispatch = useDispatch();\n  let orig = useSelector(state => state.searchOrig); // <--Busca el origen del store.\n\n  let origRef = useRef(orig);\n  let apigop = useSelector(state => state.apigenopts);\n  let dbgop = useSelector(state => state.dbgenopts);\n  let cleans = useSelector(state => state.cleansearch); //sacar?\n\n  let [genOp, setGenOp] = useState([]); // opciones de géneros\n\n  let [sgenre, setSgenre] = useState(''); // género seleccionado\n  // Cada vez que cambie el origen guarda el estado en el store\n  // y setea genreopts con los valores correspondientes\n\n  useEffect(() => {\n    // Que limpie 1ro cualquier selección anterior de género\n    dispatch(searchGenre(''));\n    setSgenre('');\n\n    if (orig) {\n      if (orig === 'API') {\n        dispatch(apiGenOpSearch());\n      }\n\n      if (orig === 'base de datos') {\n        dispatch(dbGenOpSearch());\n      }\n    }\n\n    console.log(`(1) ${genOp}`);\n  }, [orig, dispatch]);\n  useEffect(() => {\n    if (orig) {\n      if (orig === 'API') {\n        if (apigop) {\n          console.log(apigop);\n          setGenOp(apigop); //setea localmente los géneros\n        }\n      }\n\n      if (orig === 'base de datos') {\n        if (dbgop) {\n          console.log(dbgop);\n          setGenOp(dbgop);\n        }\n      }\n    }\n  }, [orig, apigop, dbgop, setGenOp]); //Carga el componente nuevamente cuando recibe los géneros\n\n  useEffect(() => {\n    console.log(`(3) ${genOp.length}`);\n  }, [genOp]); // Manda al store el género a buscar\n\n  function handleChange(e) {\n    dispatch(searchGenre(e.target.value));\n    setSgenre(e.target.value);\n  } // Cuando cambie el género seleccionado lo manda al store.\n\n\n  useEffect(() => {\n    dispatch(searchGenre(sgenre));\n  }, [sgenre, dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gcont\",\n    children: /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"genres\",\n      className: \"gselect\",\n      value: sgenre,\n      onChange: handleChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        defaultValue: true,\n        children: \"G\\xE9nero:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), genOp && genOp.map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: option,\n        children: option\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GenreSelect, \"rYFFHnQdckqfgtSkv04Q3XXTlHA=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = GenreSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenreSelect\");","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GenreSelect/GenreSelect.jsx"],"names":["React","useState","useEffect","useSelector","useDispatch","dbGenOpSearch","apiGenOpSearch","searchGenre","GenreSelect","dispatch","orig","state","searchOrig","origRef","useRef","apigop","apigenopts","dbgop","dbgenopts","cleans","cleansearch","genOp","setGenOp","sgenre","setSgenre","console","log","length","handleChange","e","target","value","map","option","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './GenreSelect.css';\nimport { dbGenOpSearch, apiGenOpSearch, searchGenre } from '../../actions/actions';\n\n//used on SearchMenu\n\nexport default function GenreSelect() {\n\n  let dispatch = useDispatch();\n  let orig = useSelector(state => state.searchOrig);// <--Busca el origen del store.\n  let origRef = useRef(orig);\n  let apigop = useSelector(state => state.apigenopts);\n  let dbgop = useSelector(state => state.dbgenopts);\n  let cleans = useSelector(state => state.cleansearch); //sacar?\n\n  let [genOp, setGenOp] = useState([]); // opciones de géneros\n  let [sgenre, setSgenre] = useState(''); // género seleccionado\n\n  // Cada vez que cambie el origen guarda el estado en el store\n  // y setea genreopts con los valores correspondientes\n  useEffect(() => {\n    // Que limpie 1ro cualquier selección anterior de género\n    dispatch(searchGenre(''));\n    setSgenre('');\n    if (orig) {\n      if (orig === 'API') {\n        dispatch(apiGenOpSearch());\n      }\n      if (orig === 'base de datos') {\n        dispatch(dbGenOpSearch());\n      }\n    }\n    console.log(`(1) ${genOp}`);\n  }, [orig, dispatch]);\n\n  useEffect(() => {\n   if (orig) {\n      if (orig === 'API') {\n        if(apigop){\n          console.log(apigop);\n          setGenOp(apigop);//setea localmente los géneros\n        }\n      }\n      if (orig === 'base de datos') {\n        if(dbgop){\n          console.log(dbgop);\n          setGenOp(dbgop); \n        }\n      }\n   }\n  }, [orig,apigop,dbgop,setGenOp]); \n\n  //Carga el componente nuevamente cuando recibe los géneros\n  useEffect(() => {\n    console.log(`(3) ${genOp.length}`);\n  }, [genOp]);\n\n  // Manda al store el género a buscar\n  function handleChange(e) {\n    dispatch(searchGenre(e.target.value));\n    setSgenre(e.target.value);\n  }\n\n  // Cuando cambie el género seleccionado lo manda al store.\n  useEffect(() => {\n    dispatch(searchGenre(sgenre));\n  }, [sgenre, dispatch]);\n\n  return (\n    <div className=\"gcont\">\n      <select\n        name=\"genres\"\n        className=\"gselect\"\n        value={sgenre}\n        onChange={handleChange}\n      >\n        <option defaultValue  >Género:</option>\n        {genOp && genOp.map((option, index) => (\n          <option key={index} value={option}>{option}</option>\n        ))}\n      </select>\n    </div>\n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}