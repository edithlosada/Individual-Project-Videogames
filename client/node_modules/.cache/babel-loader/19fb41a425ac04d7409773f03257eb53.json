{"ast":null,"code":"var _jsxFileName = \"/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/Pagination/Pagination.jsx\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './Pagination.css';\nimport GameCard from '../GameCard/GameCard.jsx';\nimport { getApiGames, getdbGames, initsearch } from '../../actions/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Pagination() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const dispatch = useDispatch();\n  const origin = useSelector(state => state.searchOrig);\n  const apiGames = useSelector(state => state.apigames);\n  const dbGames = useSelector(state => state.dbgames);\n  const search_gen = useSelector(state => state.searchgenre);\n  const search_t = useSelector(state => state.stitle);\n  const sent = useSelector(state => state.initsearch);\n  const cleancards = useSelector(state => state.cleancards);\n  const [showMsg, setShowMsg] = useState(true);\n  const [gettingG, setGettingG] = useState(false);\n  const [games, setGames] = useState([]);\n  const [genFiltGames, setGenFiltGames] = useState(null);\n  const [titFiltGames, setTitFiltGames] = useState(null); // const Name = ({ name }) => {\n  //   const [data, setData] = useState({});\n  //   const loadData = async () => {\n  //     const res = await fetch(`https://api.agify.io/?name=${name}`);\n  //     setData(await res.json());\n  //   };\n  //   useEffect(() => {\n  //     loadData();\n  //     return () => { };\n  //   }, [name]);\n  //   return <p>{data.name}</p>;\n  // };\n\n  const ShowMsg = origin => {\n    _s();\n\n    useEffect(() => {\n      if (origin === '') {\n        return /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \" Seleccione primero un or\\xEDgen para su b\\xFAsqueda (API/DB)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 16\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\" ...Obteniendo los juegos de la $\", origin, \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 16\n        }, this);\n      }\n    }, [origin]);\n  }; // Según el origen busca el arreglo de juegos\n  // una vez elegido origen desactiva el mje de sel. orig. y activa \n  // el mje de obteniendo juegos.\n\n\n  _s(ShowMsg, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n  useEffect(() => {\n    if (origin === 'api') {\n      // console.log('cargaste API');\n      dispatch(getApiGames());\n      setShowMsg(false); // desactiva mje de seleccionar origen\n\n      setGettingG(true); // activa mje de obteniendo\n      //limpiar dbgames\n    }\n\n    if (origin === 'db') {\n      console.log('falta cargar videojuegos en la base de datos'); // dispatch(getdbGames());\n\n      setShowMsg(false);\n      setGettingG(true); //limpiar apigames\n    }\n  }, [origin, dispatch]); // Cuando registre un cambio en el estado de mjes, que actualice\n\n  let gRef = useRef(games);\n  useEffect(() => {//console.log(gRef.current)\n  }, [showMsg, gettingG]);\n  let origRef = useRef(origin); // Una vez cargados los juegos en el store desactiva mje \"buscando\"\n  // y guarda el arreglo en el estado local games.\n\n  useEffect(() => {\n    setGettingG(false);\n\n    if (origRef.current === 'api') {\n      setGames(apiGames);\n      console.log(`(1)${apiGames}`);\n      console.log(`(2)${gRef.current}`);\n    }\n\n    if (origRef.current === 'db') {\n      setGames(dbGames);\n    }\n  }, [apiGames, dbGames]); // useEffect(() => {\n  //   console.log(`(3)${gRef.current}`);\n  // }, [games])\n  // function genreFilter(arr, str) {\n  //   let newarr = arr.filter(e => e.genres.includes(str));\n  //   return newarr;\n  // }\n  // // Si se especifica un género para filtar llama a genreFilter\n  // useEffect(() => {\n  //   let newarr = genreFilter(gRef.current, search_gen);\n  //   setGenFiltGames(newarr);\n  //   setTitFiltGames(null); // Si cambio el género que quite cualquier selección previa guardada por título.\n  //   //limpiar area\n  // }, [search_gen])\n  // function titleFilter(arr, str) {\n  //   let newarr = arr.filter(e => e.name.includes(str));\n  //   setTitFiltGames(newarr);\n  //   return newarr;\n  // }\n  // let gfg = useRef(genFiltGames)\n  // let tref= useRef(search_t)\n  // let tfgRef = useRef(titFiltGames);\n  // useEffect(() => {\n  //   let newarr = titleFilter(gfg.current||gRef.current, tref.current);// Si no filtro por género que deje los de la api\n  //   setTitFiltGames(newarr);\n  //   // console.log(tfgRef.current);\n  //   // console.log(sent);\n  // }, [sent]) // en submit\n  // useEffect(()=>{\n  //   dispatch(initsearch(false)); // limpia????\n  //   // setShowMsg(true);// desactiva mje de seleccionar origen\n  //   // setSearchingG(false);\n  // },[cleancards,dispatch])\n  // // traerme el arreglo\n  // // traerme el género y el título a buscar\n  // // hacer el filtrado\n  // // mostrar de a 6\n  // // \n  // // si es api y el texto de búsqueda es '' trae 100 de la ruta local / videogames\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ShowMsg, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), cleancards && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p_cards_area\",\n      children: [/*#__PURE__*/_jsxDEV(GameCard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GameCard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p_btn_area\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"p_button\",\n        children: \"Anterior\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"p_button\",\n        children: \"Siguiente\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Pagination, \"BKQ/vneMOfhESk46pHYvooPNMfw=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Pagination;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pagination\");","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/Pagination/Pagination.jsx"],"names":["React","useState","useEffect","useRef","useSelector","useDispatch","GameCard","getApiGames","getdbGames","initsearch","Pagination","dispatch","origin","state","searchOrig","apiGames","apigames","dbGames","dbgames","search_gen","searchgenre","search_t","stitle","sent","cleancards","showMsg","setShowMsg","gettingG","setGettingG","games","setGames","genFiltGames","setGenFiltGames","titFiltGames","setTitFiltGames","ShowMsg","console","log","gRef","origRef","current"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './Pagination.css';\nimport GameCard from '../GameCard/GameCard.jsx';\nimport { getApiGames, getdbGames, initsearch } from '../../actions/actions';\n\nexport default function Pagination() {\n\n  const dispatch = useDispatch();\n\n  const origin = useSelector(state => state.searchOrig);\n  const apiGames = useSelector(state => state.apigames);\n  const dbGames = useSelector(state => state.dbgames);\n  const search_gen = useSelector(state => state.searchgenre);\n  const search_t = useSelector(state => state.stitle);\n  const sent = useSelector(state => state.initsearch);\n  const cleancards = useSelector(state => state.cleancards);\n\n  const [showMsg, setShowMsg] = useState(true);\n  const [gettingG, setGettingG] = useState(false);\n  const [games, setGames] = useState([]);\n  const [genFiltGames, setGenFiltGames] = useState(null);\n  const [titFiltGames, setTitFiltGames] = useState(null);\n\n  // const Name = ({ name }) => {\n  //   const [data, setData] = useState({});\n  //   const loadData = async () => {\n  //     const res = await fetch(`https://api.agify.io/?name=${name}`);\n  //     setData(await res.json());\n  //   };\n  //   useEffect(() => {\n  //     loadData();\n  //     return () => { };\n  //   }, [name]);\n  //   return <p>{data.name}</p>;\n  // };\n\n  const ShowMsg = (origin) => {\n    useEffect(() => {\n      if (origin === '') {\n        return <h3> Seleccione primero un orígen para su búsqueda (API/DB)</h3>;\n      } else {\n        return <h3> ...Obteniendo los juegos de la ${origin}.</h3>\n      }\n    }, [origin]);\n  }\n\n\n  // Según el origen busca el arreglo de juegos\n  // una vez elegido origen desactiva el mje de sel. orig. y activa \n  // el mje de obteniendo juegos.\n  useEffect(() => {\n    if (origin === 'api') {\n      // console.log('cargaste API');\n      dispatch(getApiGames());\n      setShowMsg(false);// desactiva mje de seleccionar origen\n      setGettingG(true); // activa mje de obteniendo\n      //limpiar dbgames\n    }\n    if (origin === 'db') {\n      console.log('falta cargar videojuegos en la base de datos');\n      // dispatch(getdbGames());\n      setShowMsg(false);\n      setGettingG(true);\n      //limpiar apigames\n    }\n  }, [origin, dispatch])\n\n  // Cuando registre un cambio en el estado de mjes, que actualice\n  let gRef = useRef(games);\n  useEffect(() => {\n    //console.log(gRef.current)\n  }, [showMsg, gettingG])\n\n  let origRef = useRef(origin);\n  // Una vez cargados los juegos en el store desactiva mje \"buscando\"\n  // y guarda el arreglo en el estado local games.\n  useEffect(() => {\n    setGettingG(false);\n    if (origRef.current === 'api') {\n      setGames(apiGames)\n      console.log(`(1)${apiGames}`);\n      console.log(`(2)${gRef.current}`);\n    }\n    if (origRef.current === 'db') {\n      setGames(dbGames)\n    }\n  }, [apiGames, dbGames])\n\n  // useEffect(() => {\n  //   console.log(`(3)${gRef.current}`);\n  // }, [games])\n\n  // function genreFilter(arr, str) {\n  //   let newarr = arr.filter(e => e.genres.includes(str));\n  //   return newarr;\n  // }\n\n\n  // // Si se especifica un género para filtar llama a genreFilter\n  // useEffect(() => {\n  //   let newarr = genreFilter(gRef.current, search_gen);\n  //   setGenFiltGames(newarr);\n  //   setTitFiltGames(null); // Si cambio el género que quite cualquier selección previa guardada por título.\n  //   //limpiar area\n  // }, [search_gen])\n\n  // function titleFilter(arr, str) {\n  //   let newarr = arr.filter(e => e.name.includes(str));\n  //   setTitFiltGames(newarr);\n  //   return newarr;\n  // }\n\n  // let gfg = useRef(genFiltGames)\n  // let tref= useRef(search_t)\n  // let tfgRef = useRef(titFiltGames);\n  // useEffect(() => {\n  //   let newarr = titleFilter(gfg.current||gRef.current, tref.current);// Si no filtro por género que deje los de la api\n  //   setTitFiltGames(newarr);\n  //   // console.log(tfgRef.current);\n  //   // console.log(sent);\n  // }, [sent]) // en submit\n\n  // useEffect(()=>{\n  //   dispatch(initsearch(false)); // limpia????\n  //   // setShowMsg(true);// desactiva mje de seleccionar origen\n  //   // setSearchingG(false);\n  // },[cleancards,dispatch])\n\n  // // traerme el arreglo\n  // // traerme el género y el título a buscar\n  // // hacer el filtrado\n  // // mostrar de a 6\n  // // \n\n  // // si es api y el texto de búsqueda es '' trae 100 de la ruta local / videogames\n\n\n  return (\n    <div>\n      <ShowMsg/>\n      {/* {showMsg && <h3> Seleccione primero un orígen para su búsqueda (API/DB)</h3>}\n      {gettingG && <h3> ...Obteniendo juegos de origen</h3>} */}\n      {cleancards && <div className=\"p_cards_area\">\n        <GameCard />\n        <GameCard />\n      </div>}\n      <div className=\"p_btn_area\">\n        <button className=\"p_button\">Anterior</button>\n        <button className=\"p_button\">Siguiente</button>\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}