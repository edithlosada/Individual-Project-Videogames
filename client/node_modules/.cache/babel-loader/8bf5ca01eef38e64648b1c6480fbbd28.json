{"ast":null,"code":"var _jsxFileName = \"/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GenreSelect/GenreSelect.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './GenreSelect.css';\nimport { dbGenOpSearch, apiGenOpSearch, searchGenre } from '../../actions/actions'; //used on SearchMenu\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GenreSelect() {\n  _s();\n\n  let dispatch = useDispatch();\n  let orig = useSelector(state => state.searchOrig); // <--Busca el origen del store.\n\n  let apigop = useSelector(state => state.apigenopts); // let apigenRef = useRef(apigenres);//<--para evitar missing dependency en useEffect\n\n  let dbgop = useSelector(state => state.dbgenopts); // let dbgenRef = useRef(dbgenres);\n\n  let cleans = useSelector(state => state.cleansearch);\n  let [genreopts, setGenreopts] = useState(''); // opciones de géneros\n\n  let [sgenre, setSgenre] = useState(''); // género seleccionado\n  // Cada vez que cambie el origen guarda el estado en el store\n  // y setea genreopts con los valores correspondientes\n\n  useEffect(() => {\n    if (orig === 'API') {\n      dispatch(apiGenOpSearch());\n      setGenreopts(apigop);\n    }\n\n    if (orig === 'base de datos') {\n      dispatch(apiGenOpSearch());\n      setGenreopts(apig);\n    } // Que limpie 1ro cualquier selección anterior de género\n\n\n    dispatch(searchGenre(''));\n    setSgenre('');\n\n    let sendgenopsearch = (orig, apig, dbg) => {\n      if (orig === 'base de datos') {\n        //console.log(orig);\n        dispatch(dbGenOpSearch());\n        setGenreopts(dbg); // <-- Cambiar en store...\n      }\n\n      if (orig === 'API') {\n        //console.log(orig);\n        dispatch(apiGenOpSearch());\n        setGenreopts(apig); //console.log(apig);\n      }\n    };\n\n    sendgenopsearch(orig, apigenRef.current, dbgenRef.current); // <-- referencia a apigenres\n  }, [orig, dispatch]); //Cada vez que cambie el origen guarda el estado en el store\n\n  useEffect(() => {\n    setGenreopts(apigenres);\n  }, [apigenres]);\n  useEffect(() => {\n    setGenreopts(dbgenres);\n  }, [dbgenres]); // Manda al store el género a buscar\n\n  function handleChange(e) {\n    dispatch(searchGenre(e.target.value));\n    setSgenre(e.target.value);\n  } // Cuando cambie el género seleccionado lo manda al store.\n\n\n  useEffect(() => {\n    dispatch(searchGenre(sgenre));\n  }, [sgenre, dispatch]); // Si presiona nueva búsqueda limpia el género\n\n  useEffect(() => {// if (cleans) {\n    //   dispatch(searchGenre(''));\n    //   setSgenre('');\n    // }\n  }, [cleans, dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gcont\",\n    children: /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"genres\",\n      className: \"gselect\",\n      value: sgenre,\n      onChange: handleChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        defaultValue: true,\n        children: \"G\\xE9nero:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), genreopts && genreopts.map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: option.value,\n        children: option.label\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GenreSelect, \"FG9WbmhEvbT6b0fL99TLNJ/s7kU=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = GenreSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenreSelect\");","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GenreSelect/GenreSelect.jsx"],"names":["React","useState","useEffect","useRef","useSelector","useDispatch","dbGenOpSearch","apiGenOpSearch","searchGenre","GenreSelect","dispatch","orig","state","searchOrig","apigop","apigenopts","dbgop","dbgenopts","cleans","cleansearch","genreopts","setGenreopts","sgenre","setSgenre","apig","sendgenopsearch","dbg","apigenRef","current","dbgenRef","apigenres","dbgenres","handleChange","e","target","value","map","option","index","label"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAO,mBAAP;AACA,SAASC,aAAT,EAAwBC,cAAxB,EAAwCC,WAAxC,QAA2D,uBAA3D,C,CAEA;;;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AAEpC,MAAIC,QAAQ,GAAGL,WAAW,EAA1B;AACA,MAAIM,IAAI,GAAGP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACC,UAAhB,CAAtB,CAHoC,CAGc;;AAClD,MAAIC,MAAM,GAAGV,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACG,UAAhB,CAAxB,CAJoC,CAKpC;;AACA,MAAIC,KAAK,GAAGZ,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACK,SAAhB,CAAvB,CANoC,CAOpC;;AACA,MAAIC,MAAM,GAAGd,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACO,WAAhB,CAAxB;AAEA,MAAI,CAACC,SAAD,EAAYC,YAAZ,IAA4BpB,QAAQ,CAAC,EAAD,CAAxC,CAVoC,CAUU;;AAC9C,MAAI,CAACqB,MAAD,EAASC,SAAT,IAAsBtB,QAAQ,CAAC,EAAD,CAAlC,CAXoC,CAWI;AAExC;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,IAAI,KAAK,KAAb,EAAoB;AAClBD,MAAAA,QAAQ,CAACH,cAAc,EAAf,CAAR;AACAc,MAAAA,YAAY,CAACP,MAAD,CAAZ;AACD;;AACD,QAAIH,IAAI,KAAK,eAAb,EAA8B;AAC5BD,MAAAA,QAAQ,CAACH,cAAc,EAAf,CAAR;AACAc,MAAAA,YAAY,CAACG,IAAD,CAAZ;AACD,KARa,CAcd;;;AACEd,IAAAA,QAAQ,CAACF,WAAW,CAAC,EAAD,CAAZ,CAAR;AACAe,IAAAA,SAAS,CAAC,EAAD,CAAT;;AAEF,QAAIE,eAAe,GAAG,CAACd,IAAD,EAAOa,IAAP,EAAaE,GAAb,KAAqB;AACzC,UAAIf,IAAI,KAAK,eAAb,EAA8B;AAC5B;AACAD,QAAAA,QAAQ,CAACJ,aAAa,EAAd,CAAR;AACAe,QAAAA,YAAY,CAACK,GAAD,CAAZ,CAH4B,CAGT;AACpB;;AACD,UAAIf,IAAI,KAAK,KAAb,EAAoB;AAClB;AACAD,QAAAA,QAAQ,CAACH,cAAc,EAAf,CAAR;AACAc,QAAAA,YAAY,CAACG,IAAD,CAAZ,CAHkB,CAIlB;AACD;AACF,KAZD;;AAaAC,IAAAA,eAAe,CAACd,IAAD,EAAOgB,SAAS,CAACC,OAAjB,EAA0BC,QAAQ,CAACD,OAAnC,CAAf,CA/Bc,CA+B6C;AAC5D,GAhCQ,EAgCN,CAACjB,IAAD,EAAOD,QAAP,CAhCM,CAAT,CAfoC,CAiDpC;;AACAR,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,YAAY,CAACS,SAAD,CAAZ;AACD,GAFQ,EAEN,CAACA,SAAD,CAFM,CAAT;AAIA5B,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,YAAY,CAACU,QAAD,CAAZ;AACD,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT,CAtDoC,CA0DpC;;AACA,WAASC,YAAT,CAAsBC,CAAtB,EAAyB;AACvBvB,IAAAA,QAAQ,CAACF,WAAW,CAACyB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAZ,CAAR;AACAZ,IAAAA,SAAS,CAACU,CAAC,CAACC,MAAF,CAASC,KAAV,CAAT;AACD,GA9DmC,CAgEpC;;;AACAjC,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,QAAQ,CAACF,WAAW,CAACc,MAAD,CAAZ,CAAR;AACD,GAFQ,EAEN,CAACA,MAAD,EAAQZ,QAAR,CAFM,CAAT,CAjEoC,CAqEpC;;AACAR,EAAAA,SAAS,CAAC,MAAM,CACd;AACA;AACA;AACA;AACD,GALQ,EAKN,CAACgB,MAAD,EAAQR,QAAR,CALM,CAAT;AAOA,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,2BACE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,SAAS,EAAC,SAFZ;AAGE,MAAA,KAAK,EAAEY,MAHT;AAIE,MAAA,QAAQ,EAAEU,YAJZ;AAAA,8BAME;AAAQ,QAAA,YAAY,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,EAOGZ,SAAS,IAAIA,SAAS,CAACgB,GAAV,CAAc,CAACC,MAAD,EAASC,KAAT,kBAC1B;AAAoB,QAAA,KAAK,EAAED,MAAM,CAACF,KAAlC;AAAA,kBAA0CE,MAAM,CAACE;AAAjD,SAAaD,KAAb;AAAA;AAAA;AAAA;AAAA,cADY,CAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GA5FuB7B,W;UAEPJ,W,EACJD,W,EACEA,W,EAEDA,W,EAECA,W;;;KARSK,W","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './GenreSelect.css';\nimport { dbGenOpSearch, apiGenOpSearch, searchGenre } from '../../actions/actions';\n\n//used on SearchMenu\n\nexport default function GenreSelect() {\n\n  let dispatch = useDispatch();\n  let orig = useSelector(state => state.searchOrig);// <--Busca el origen del store.\n  let apigop = useSelector(state => state.apigenopts);\n  // let apigenRef = useRef(apigenres);//<--para evitar missing dependency en useEffect\n  let dbgop = useSelector(state => state.dbgenopts);\n  // let dbgenRef = useRef(dbgenres);\n  let cleans = useSelector(state => state.cleansearch);\n\n  let [genreopts, setGenreopts] = useState(''); // opciones de géneros\n  let [sgenre, setSgenre] = useState(''); // género seleccionado\n\n  // Cada vez que cambie el origen guarda el estado en el store\n  // y setea genreopts con los valores correspondientes\n  useEffect(() => {\n    if (orig === 'API') {\n      dispatch(apiGenOpSearch());\n      setGenreopts(apigop);\n    }\n    if (orig === 'base de datos') {\n      dispatch(apiGenOpSearch());\n      setGenreopts(apig);\n    }\n\n\n\n\n\n    // Que limpie 1ro cualquier selección anterior de género\n      dispatch(searchGenre(''));\n      setSgenre('');\n\n    let sendgenopsearch = (orig, apig, dbg) => {\n      if (orig === 'base de datos') {\n        //console.log(orig);\n        dispatch(dbGenOpSearch());\n        setGenreopts(dbg); // <-- Cambiar en store...\n      }\n      if (orig === 'API') {\n        //console.log(orig);\n        dispatch(apiGenOpSearch());\n        setGenreopts(apig);\n        //console.log(apig);\n      }\n    }\n    sendgenopsearch(orig, apigenRef.current, dbgenRef.current);// <-- referencia a apigenres\n  }, [orig, dispatch]);\n\n  //Cada vez que cambie el origen guarda el estado en el store\n  useEffect(() => {\n    setGenreopts(apigenres);\n  }, [apigenres]);\n\n  useEffect(() => {\n    setGenreopts(dbgenres);\n  }, [dbgenres]);\n\n  // Manda al store el género a buscar\n  function handleChange(e) {\n    dispatch(searchGenre(e.target.value));\n    setSgenre(e.target.value);\n  }\n\n  // Cuando cambie el género seleccionado lo manda al store.\n  useEffect(() => {\n    dispatch(searchGenre(sgenre));\n  }, [sgenre,dispatch]);\n\n  // Si presiona nueva búsqueda limpia el género\n  useEffect(() => {\n    // if (cleans) {\n    //   dispatch(searchGenre(''));\n    //   setSgenre('');\n    // }\n  }, [cleans,dispatch]);\n\n  return (\n    <div className=\"gcont\">\n      <select\n        name=\"genres\"\n        className=\"gselect\"\n        value={sgenre}\n        onChange={handleChange}\n      >\n        <option defaultValue  >Género:</option>\n        {genreopts && genreopts.map((option, index) => (\n          <option key={index} value={option.value}>{option.label}</option>\n        ))}\n      </select>\n    </div>\n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}