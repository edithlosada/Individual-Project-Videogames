{"ast":null,"code":"var _jsxFileName = \"/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GamesToShow/GamesToShow.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport './GamesToShow.css';\nimport GameCard from '../GameCard/GameCard.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GamesToShow() {\n  _s();\n\n  const gamests = useSelector(state => state.gamestoshow); // juegos para mostrar\n\n  let [currentPage, setCurrentPage] = useState(0); //inicialmente la primer página\n\n  let [currentPageArr, setCurrentPArr] = useState([]);\n  let PER_PAGE = 6;\n  let pageCount = Math.ceil(gamests.length / PER_PAGE); // función que obtiene el subarreglo de juegos a mostrar según la pagina\n  // en la que se encuentre\n\n  function inpageshow(currentPage, perpage) {\n    let offset = currentPage * perpage;\n    let currentPageArr = gamests.slice(offset, offset + PER_PAGE);\n    console.log(currentPageArr);\n    setCurrentPArr([...currentPageArr]);\n  }\n\n  useEffect(() => {\n    inpageshow(currentPage, PER_PAGE);\n  }, []); //let [cambioP, setCambioP] = useState(false);\n\n  useEffect(() => {}, [gamests]); // if (titFiltGames) {\n  //   let allgames = titFiltGames.map((g, index) => (\n  //     <GameCard key={index} id={g.apId} name={g.name} img={g.img_url} genres={g.genres} />\n  //   ))\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cardcont\",\n    children: gamests && gamests.map((g, index) => /*#__PURE__*/_jsxDEV(GameCard, {\n      id: g.apId,\n      name: g.name,\n      img: g.img_url,\n      genres: g.genres\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GamesToShow, \"+Pw9hGv2NCifan0uSvIXNyMg47w=\", false, function () {\n  return [useSelector];\n});\n\n_c = GamesToShow;\n\nvar _c;\n\n$RefreshReg$(_c, \"GamesToShow\");","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GamesToShow/GamesToShow.jsx"],"names":["React","useState","useEffect","useSelector","GameCard","GamesToShow","gamests","state","gamestoshow","currentPage","setCurrentPage","currentPageArr","setCurrentPArr","PER_PAGE","pageCount","Math","ceil","length","inpageshow","perpage","offset","slice","console","log","map","g","index","apId","name","img_url","genres"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAO,mBAAP;AACA,OAAOC,QAAP,MAAqB,0BAArB;;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AAEpC,QAAMC,OAAO,GAAGH,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACC,WAAhB,CAA3B,CAFoC,CAEqB;;AAEzD,MAAI,CAACC,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,CAAD,CAA5C,CAJoC,CAIa;;AACjD,MAAI,CAACU,cAAD,EAAiBC,cAAjB,IAAmCX,QAAQ,CAAC,EAAD,CAA/C;AAEA,MAAIY,QAAQ,GAAG,CAAf;AACA,MAAIC,SAAS,GAAGC,IAAI,CAACC,IAAL,CAAUV,OAAO,CAACW,MAAR,GAAiBJ,QAA3B,CAAhB,CARoC,CAUpC;AACA;;AACA,WAASK,UAAT,CAAoBT,WAApB,EAAiCU,OAAjC,EAA0C;AACxC,QAAIC,MAAM,GAAGX,WAAW,GAAGU,OAA3B;AACA,QAAIR,cAAc,GAAGL,OAAO,CAACe,KAAR,CAAcD,MAAd,EAAsBA,MAAM,GAAGP,QAA/B,CAArB;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYZ,cAAZ;AACAC,IAAAA,cAAc,CAAC,CAAC,GAAGD,cAAJ,CAAD,CAAd;AACD;;AAEDT,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,UAAU,CAACT,WAAD,EAAcI,QAAd,CAAV;AACD,GAFQ,EAEN,EAFM,CAAT,CAnBoC,CAsBpC;;AAGAX,EAAAA,SAAS,CAAC,MAAM,CACf,CADQ,EACN,CAACI,OAAD,CADM,CAAT,CAzBoC,CA4BpC;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,cACGA,OAAO,IAAIA,OAAO,CAACkB,GAAR,CAAY,CAACC,CAAD,EAAIC,KAAJ,kBACtB,QAAC,QAAD;AAAsB,MAAA,EAAE,EAAED,CAAC,CAACE,IAA5B;AAAkC,MAAA,IAAI,EAAEF,CAAC,CAACG,IAA1C;AAAgD,MAAA,GAAG,EAAEH,CAAC,CAACI,OAAvD;AAAgE,MAAA,MAAM,EAAEJ,CAAC,CAACK;AAA1E,OAAeJ,KAAf;AAAA;AAAA;AAAA;AAAA,YADU;AADd;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAzCuBrB,W;UAENF,W;;;KAFME,W","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport './GamesToShow.css';\nimport GameCard from '../GameCard/GameCard.jsx';\n\nexport default function GamesToShow() {\n\n  const gamests = useSelector(state => state.gamestoshow); // juegos para mostrar\n\n  let [currentPage, setCurrentPage] = useState(0); //inicialmente la primer página\n  let [currentPageArr, setCurrentPArr] = useState([]);\n\n  let PER_PAGE = 6;\n  let pageCount = Math.ceil(gamests.length / PER_PAGE);\n\n  // función que obtiene el subarreglo de juegos a mostrar según la pagina\n  // en la que se encuentre\n  function inpageshow(currentPage, perpage) {\n    let offset = currentPage * perpage;\n    let currentPageArr = gamests.slice(offset, offset + PER_PAGE)\n    console.log(currentPageArr);\n    setCurrentPArr([...currentPageArr]);\n  }\n\n  useEffect(() => {\n    inpageshow(currentPage, PER_PAGE);\n  }, []);\n  //let [cambioP, setCambioP] = useState(false);\n\n\n  useEffect(() => {\n  }, [gamests])\n\n  // if (titFiltGames) {\n  //   let allgames = titFiltGames.map((g, index) => (\n  //     <GameCard key={index} id={g.apId} name={g.name} img={g.img_url} genres={g.genres} />\n  //   ))\n  // }\n\n  return (\n    <div className=\"cardcont\" >\n      {gamests && gamests.map((g, index) => (\n        <GameCard key={index} id={g.apId} name={g.name} img={g.img_url} genres={g.genres} />\n      ))}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}