{"ast":null,"code":"var _jsxFileName = \"/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/SearchBar/SearchBar.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './SearchBar.css';\nimport { titleSearch } from '../../actions/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SearchBar() {\n  _s();\n\n  const dispatch = useDispatch();\n  const sent = useSelector(state => state.initsearch);\n  const newseach = useSelector(state => state.cleancards);\n  const [gname, setGname] = useState('');\n  const [cleaninp, setCleaninp] = useState(false); // Registra cambios en el input de búsqueda \n  // y lo guarda en el estado local del componente\n\n  const handleChange = e => {\n    console.log(e.target.value);\n    setGname(e.target.value);\n  }; // Cada vez que presione buscar, manda el titulo al store y limpia el input\n\n\n  let gref = useRef(gname);\n  useEffect(() => {\n    if (sent) {\n      console.log(`buscaste ${gname}`);\n      dispatch(titleSearch(gname)); // setCleaninp(true);\n    }\n  }, [sent, gname, dispatch]);\n  console.log(sent, gname);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"search_input\",\n      type: \"text\",\n      placeholder: \" Ingrese el nombre del juego...\",\n      value: gname,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(SearchBar, \"zru99zBfIpAxw/9KOZQh+wEdm68=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = SearchBar;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/SearchBar/SearchBar.jsx"],"names":["React","useState","useEffect","useRef","useDispatch","useSelector","titleSearch","SearchBar","dispatch","sent","state","initsearch","newseach","cleancards","gname","setGname","cleaninp","setCleaninp","handleChange","e","console","log","target","value","gref"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA2BC,SAA3B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,WAAT,EAAuBC,WAAvB,QAAyC,aAAzC;AACA,OAAO,iBAAP;AACA,SAASC,WAAT,QAA4B,uBAA5B;;;AAEA,eAAe,SAASC,SAAT,GAAqB;AAAA;;AAElC,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B;AACA,QAAMK,IAAI,GAAGJ,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACC,UAAhB,CAAxB;AACA,QAAMC,QAAQ,GAAGP,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACG,UAAhB,CAA5B;AACA,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBd,QAAQ,CAAC,EAAD,CAAjC;AACA,QAAM,CAACe,QAAD,EAAUC,WAAV,IAAyBhB,QAAQ,CAAC,KAAD,CAAvC,CANkC,CAQlC;AACA;;AACA,QAAMiB,YAAY,GAAIC,CAAD,IAAO;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,MAAF,CAASC,KAArB;AACAR,IAAAA,QAAQ,CAACI,CAAC,CAACG,MAAF,CAASC,KAAV,CAAR;AACD,GAHD,CAVkC,CAelC;;;AACA,MAAIC,IAAI,GAAGrB,MAAM,CAACW,KAAD,CAAjB;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGO,IAAH,EAAQ;AACNW,MAAAA,OAAO,CAACC,GAAR,CAAa,YAAWP,KAAM,EAA9B;AACAN,MAAAA,QAAQ,CAACF,WAAW,CAACQ,KAAD,CAAZ,CAAR,CAFM,CAGN;AACD;AACF,GANQ,EAMP,CAACL,IAAD,EAAMK,KAAN,EAAYN,QAAZ,CANO,CAAT;AAQAY,EAAAA,OAAO,CAACC,GAAR,CAAYZ,IAAZ,EAAiBK,KAAjB;AAEA,sBACE;AAAA,2BACE;AAAO,MAAA,SAAS,EAAC,cAAjB;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,WAAW,EAAC,iCAFd;AAGE,MAAA,KAAK,EAAIA,KAHX;AAIE,MAAA,QAAQ,EAAII;AAJd;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAUD;;GArCuBX,S;UAELH,W,EACJC,W,EACIA,W;;;KAJKE,S;AAqCvB","sourcesContent":["import React, { useState , useEffect,useRef } from 'react';\nimport { useDispatch , useSelector} from 'react-redux';\nimport './SearchBar.css';\nimport { titleSearch } from '../../actions/actions';\n\nexport default function SearchBar() {\n\n  const dispatch = useDispatch();\n  const sent = useSelector(state => state.initsearch);\n  const newseach = useSelector(state => state.cleancards);\n  const [gname,setGname] = useState('');\n  const [cleaninp,setCleaninp] = useState(false);\n\n  // Registra cambios en el input de búsqueda \n  // y lo guarda en el estado local del componente\n  const handleChange = (e) => {\n    console.log(e.target.value);\n    setGname(e.target.value);\n  }\n\n  // Cada vez que presione buscar, manda el titulo al store y limpia el input\n  let gref = useRef(gname);\n  useEffect(() => {\n    if(sent){\n      console.log(`buscaste ${gname}`);\n      dispatch(titleSearch(gname));\n      // setCleaninp(true);\n    }\n  },[sent,gname,dispatch]);\n  \n  console.log(sent,gname);\n\n  return (\n    <>\n      <input className=\"search_input\"\n        type=\"text\" \n        placeholder=\" Ingrese el nombre del juego...\" \n        value = {gname}\n        onChange = {handleChange}\n      />\n    </>\n  )\n};\n\n"]},"metadata":{},"sourceType":"module"}