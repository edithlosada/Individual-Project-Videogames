{"ast":null,"code":"var _jsxFileName = \"/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GamesGetter/GamesGetter.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './GamesGetter.css';\nimport GamesToShow from '../GamesToShow/GamesToShow.jsx'; // import GameCard from '../GameCard/GameCard.jsx';\n\nimport { getApiGames, getDbGames, initsearch, setShowmsg, setGamesToShow } from '../../actions/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GamesGetter() {\n  _s();\n\n  let dispatch = useDispatch();\n  let inits = useSelector(state => state.initsearch);\n  let cleans = useSelector(state => state.cleansearch);\n  let orig = useSelector(state => state.searchOrig);\n  let show = useSelector(state => state.showmsg);\n  let apig = useSelector(state => state.apigames);\n  let dbg = useSelector(state => state.dbgames);\n  let sgenre = useSelector(state => state.searchgenre);\n  let st = useSelector(state => state.stitle); //let [showMsg, setShowMsg] = useState(true); //showmsg setShowmsg\n\n  let [gettingG, setGettingG] = useState(false);\n  let [games, setGames] = useState(null);\n  let gRef = useRef;\n  let [genFiltGames, setGenFiltGames] = useState(null);\n  let [titFiltGames, setTitFiltGames] = useState(null); // Según el origen manda a buscar el arreglo de juegos \n  // donde corresponda y admninistra mjes.\n\n  useEffect(() => {\n    setGames(null);\n\n    if (orig === 'API') {\n      //console.log('cargaste API');\n      dispatch(getApiGames()); // <<-- Sacar!!\n\n      dispatch(setShowmsg(false));\n    }\n\n    if (orig === 'base de datos') {\n      dispatch(getDbGames()); // <<-- Sacar!!\n\n      dispatch(setShowmsg(false));\n    }\n\n    setGettingG(true);\n    console.log(gettingG);\n  }, [orig, dispatch, setGettingG]); // Cuando obtiene el arreglo de juegos lo guarda localmente.\n  // y administra mjes\n\n  useEffect(() => {\n    if (orig === 'API') {\n      if (apig) {\n        setGames(apig);\n      }\n    }\n\n    if (orig === 'base de datos') {\n      if (dbg) {\n        setGames(dbg);\n      }\n    }\n\n    console.log(gettingG);\n  }, [orig, apig, dbg, setGettingG]);\n  useEffect(() => {}, [gettingG]); // Si se filtra por género reduce la búsqueda y guarda lo obtenido\n  // en el estado genFiltGames.\n\n  useEffect(() => {\n    if (games) {\n      console.log(games);\n      setGettingG(false);\n\n      if (sgenre) {\n        let newarr = games.filter(e => e.genres.includes(sgenre));\n        setGenFiltGames(newarr);\n      }\n\n      setTitFiltGames(null); // Si cambio el género que quite cualquier selección previa guardada por título.\n\n      dispatch(initsearch(false)); // Cancela cualquier búsqueda anterior para poder escribir.\n    }\n  }, [sgenre, games, dispatch, setGettingG]); // Cuando presiona \"buscar\" filtra lo que ya tenía según el título\n\n  useEffect(() => {\n    //console.log(genFiltGames); //........\n    if (inits) {\n      // Si presionó/está en buscar\n      let arr = games; // arreglo obtenido según orígen\n\n      if (!sgenre) {\n        console.log('no había género de búsqueda');\n      } else {\n        // si filtró x género usa el arreglo ya filtrado\n        console.log(genFiltGames);\n        arr = genFiltGames;\n      }\n\n      if (!st) {\n        // si no ingreso texto trae todo\n        console.log('no había texto de búsqueda');\n        console.log(genFiltGames); //........\n\n        setTitFiltGames(arr);\n      } else {\n        console.log('search title is' + st);\n        let newarr = arr.filter(e => e.name.toLowerCase().includes(st.toLowerCase()));\n        setTitFiltGames(newarr);\n      }\n    }\n  }, [inits, games, sgenre, genFiltGames, st]); // agregué games and sgenre\n\n  useEffect(() => {\n    if (cleans) {\n      setTitFiltGames([]);\n    }\n  }, [cleans]);\n  useEffect(() => {\n    // console.log(titFiltGames);\n    dispatch(setGamesToShow(titFiltGames));\n  }, [titFiltGames, dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p_cards_area\",\n    children: [show && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \" Seleccione primero un or\\xEDgen para su b\\xFAsqueda (API/DB)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 16\n    }, this), !gettingG && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\" ...Obteniendo juegos de la \", orig, \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(GamesToShow, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GamesGetter, \"/2xdEmS+Os2GJErELIomIJk7NAw=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = GamesGetter;\n\nvar _c;\n\n$RefreshReg$(_c, \"GamesGetter\");","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GamesGetter/GamesGetter.jsx"],"names":["React","useState","useEffect","useSelector","useDispatch","GamesToShow","getApiGames","getDbGames","initsearch","setShowmsg","setGamesToShow","GamesGetter","dispatch","inits","state","cleans","cleansearch","orig","searchOrig","show","showmsg","apig","apigames","dbg","dbgames","sgenre","searchgenre","st","stitle","gettingG","setGettingG","games","setGames","gRef","useRef","genFiltGames","setGenFiltGames","titFiltGames","setTitFiltGames","console","log","newarr","filter","e","genres","includes","arr","name","toLowerCase"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './GamesGetter.css';\nimport GamesToShow from '../GamesToShow/GamesToShow.jsx';\n// import GameCard from '../GameCard/GameCard.jsx';\nimport { getApiGames, getDbGames, initsearch, setShowmsg, setGamesToShow } from '../../actions/actions';\n\nexport default function GamesGetter() {\n\n  let dispatch = useDispatch();\n\n  let inits = useSelector(state => state.initsearch);\n  let cleans = useSelector(state => state.cleansearch);\n  let orig = useSelector(state => state.searchOrig);\n  let show = useSelector(state => state.showmsg);\n  let apig = useSelector(state => state.apigames);\n  let dbg = useSelector(state => state.dbgames);\n  let sgenre = useSelector(state => state.searchgenre);\n  let st = useSelector(state => state.stitle);\n\n  //let [showMsg, setShowMsg] = useState(true); //showmsg setShowmsg\n  let [gettingG, setGettingG] = useState(false);\n  let [games, setGames] = useState(null);\n  let gRef = useRef\n  let [genFiltGames, setGenFiltGames] = useState(null);\n  let [titFiltGames, setTitFiltGames] = useState(null);\n\n  // Según el origen manda a buscar el arreglo de juegos \n  // donde corresponda y admninistra mjes.\n  useEffect(() => {\n    setGames(null);\n    if (orig === 'API') {\n      //console.log('cargaste API');\n      dispatch(getApiGames());  // <<-- Sacar!!\n      dispatch(setShowmsg(false));\n    }\n    if (orig === 'base de datos') {\n      dispatch(getDbGames());  // <<-- Sacar!!\n      dispatch(setShowmsg(false));\n    }\n    setGettingG(true);\n    console.log(gettingG)\n  }, [orig, dispatch, setGettingG]);\n\n  \n  // Cuando obtiene el arreglo de juegos lo guarda localmente.\n  // y administra mjes\n  useEffect(() => {\n    if (orig === 'API') {\n      if (apig) {\n        setGames(apig);\n      }\n    }\n    if (orig === 'base de datos') {\n      if (dbg) {\n        setGames(dbg);\n      }\n    }\n    console.log(gettingG)\n  }, [orig, apig, dbg, setGettingG]);\n  \n  useEffect(() => {\n  }, [gettingG])\n\n  // Si se filtra por género reduce la búsqueda y guarda lo obtenido\n  // en el estado genFiltGames.\n  useEffect(() => {\n    if (games) {\n      console.log(games);\n      setGettingG(false);\n      if (sgenre) {\n        let newarr = games.filter(e => e.genres.includes(sgenre));\n        setGenFiltGames(newarr);\n      }\n      setTitFiltGames(null); // Si cambio el género que quite cualquier selección previa guardada por título.\n      dispatch(initsearch(false)); // Cancela cualquier búsqueda anterior para poder escribir.\n    }\n  }, [sgenre, games, dispatch, setGettingG])\n\n  // Cuando presiona \"buscar\" filtra lo que ya tenía según el título\n  useEffect(() => {\n\n    //console.log(genFiltGames); //........\n    if (inits) { // Si presionó/está en buscar\n      let arr = games; // arreglo obtenido según orígen\n      if (!sgenre) {\n        console.log('no había género de búsqueda');\n      } else {// si filtró x género usa el arreglo ya filtrado\n        console.log(genFiltGames);\n        arr = genFiltGames;\n      }\n      if (!st) {// si no ingreso texto trae todo\n        console.log('no había texto de búsqueda');\n        console.log(genFiltGames); //........\n        setTitFiltGames(arr);\n      } else {\n        console.log('search title is' + st);\n        let newarr = arr.filter(e => e.name.toLowerCase().includes(st.toLowerCase()));\n        setTitFiltGames(newarr);\n      }\n    }\n  }, [inits, games, sgenre, genFiltGames, st]) // agregué games and sgenre\n\n  useEffect(() => {\n    if (cleans) {\n      setTitFiltGames([]);\n    }\n  }, [cleans])\n\n  useEffect(() => {\n    // console.log(titFiltGames);\n    dispatch(setGamesToShow(titFiltGames));\n  }, [titFiltGames, dispatch])\n\n\n  return (\n    <div className=\"p_cards_area\">\n      {show && <h3> Seleccione primero un orígen para su búsqueda (API/DB)</h3>}\n      {!gettingG && <h3> ...Obteniendo juegos de la {orig}.</h3>}\n      <GamesToShow />\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}