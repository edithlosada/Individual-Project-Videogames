{"ast":null,"code":"var _jsxFileName = \"/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GamesToShow/GamesToShow.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport './GamesToShow.css';\nimport GameCard from '../GameCard/GameCard.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GamesToShow() {\n  _s();\n\n  let gamests = useSelector(state => state.gamestoshow);\n  const PER_PAGE = 3;\n  let pageCount = Math.ceil(data.length / PER_PAGE);\n\n  function inpageshow(currentPage, perpage) {\n    let offset = currentPage * perpage;\n    let currentPageArr = data.slice(offset, offset + PER_PAGE);\n    console.log(currentPageArr);\n    setCurrentPArr([...currentPageArr]);\n  }\n\n  let [currentPageArr, setCurrentPArr] = useState([]);\n  useEffect(() => {\n    inpageshow(currentPage, PER_PAGE);\n  }, []); //let [cambioP, setCambioP] = useState(false);\n\n  useEffect(() => {}, [gamests]); // if (titFiltGames) {\n  //   let allgames = titFiltGames.map((g, index) => (\n  //     <GameCard key={index} id={g.apId} name={g.name} img={g.img_url} genres={g.genres} />\n  //   ))\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cardcont\",\n    children: gamests && gamests.map((g, index) => /*#__PURE__*/_jsxDEV(GameCard, {\n      id: g.apId,\n      name: g.name,\n      img: g.img_url,\n      genres: g.genres\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GamesToShow, \"G/qH0dtFY0VYjZfJlXhFk8Iyjbg=\", false, function () {\n  return [useSelector];\n});\n\n_c = GamesToShow;\n\nvar _c;\n\n$RefreshReg$(_c, \"GamesToShow\");","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GamesToShow/GamesToShow.jsx"],"names":["React","useEffect","useSelector","GameCard","GamesToShow","gamests","state","gamestoshow","PER_PAGE","pageCount","Math","ceil","data","length","inpageshow","currentPage","perpage","offset","currentPageArr","slice","console","log","setCurrentPArr","useState","map","g","index","apId","name","img_url","genres"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,WAAT,QAA2B,aAA3B;AACA,OAAO,mBAAP;AACA,OAAOC,QAAP,MAAqB,0BAArB;;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AAEpC,MAAIC,OAAO,GAAGH,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACC,WAAhB,CAAzB;AAIA,QAAMC,QAAQ,GAAG,CAAjB;AACA,MAAIC,SAAS,GAAGC,IAAI,CAACC,IAAL,CAAUC,IAAI,CAACC,MAAL,GAAcL,QAAxB,CAAhB;;AAEA,WAASM,UAAT,CAAoBC,WAApB,EAAiCC,OAAjC,EAAyC;AACvC,QAAIC,MAAM,GAAGF,WAAW,GAAGC,OAA3B;AACA,QAAIE,cAAc,GAAGN,IAAI,CAACO,KAAL,CAAWF,MAAX,EAAmBA,MAAM,GAAGT,QAA5B,CAArB;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAYH,cAAZ;AACAI,IAAAA,cAAc,CAAC,CAAC,GAAGJ,cAAJ,CAAD,CAAd;AACD;;AACD,MAAI,CAACA,cAAD,EAAgBI,cAAhB,IAAkCC,QAAQ,CAAC,EAAD,CAA9C;AACAtB,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,UAAU,CAACC,WAAD,EAAcP,QAAd,CAAV;AACD,GAFQ,EAEP,EAFO,CAAT,CAhBoC,CAmBpC;;AAGAP,EAAAA,SAAS,CAAC,MAAM,CACf,CADQ,EACN,CAACI,OAAD,CADM,CAAT,CAtBoC,CAyBpC;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,cACGA,OAAO,IAAIA,OAAO,CAACmB,GAAR,CAAY,CAACC,CAAD,EAAIC,KAAJ,kBACxB,QAAC,QAAD;AAAsB,MAAA,EAAE,EAAED,CAAC,CAACE,IAA5B;AAAkC,MAAA,IAAI,EAAEF,CAAC,CAACG,IAA1C;AAAgD,MAAA,GAAG,EAAEH,CAAC,CAACI,OAAvD;AAAgE,MAAA,MAAM,EAAEJ,CAAC,CAACK;AAA1E,OAAeJ,KAAf;AAAA;AAAA;AAAA;AAAA,YADY;AADd;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAtCuBtB,W;UAERF,W;;;KAFQE,W","sourcesContent":["import React, {useEffect} from 'react';\nimport { useSelector} from 'react-redux';\nimport './GamesToShow.css';\nimport GameCard from '../GameCard/GameCard.jsx';\n\nexport default function GamesToShow() {\n\n  let gamests = useSelector(state => state.gamestoshow);\n\n\n  \n  const PER_PAGE = 3;\n  let pageCount = Math.ceil(data.length / PER_PAGE);\n\n  function inpageshow(currentPage, perpage){\n    let offset = currentPage * perpage;\n    let currentPageArr = data.slice(offset, offset + PER_PAGE)\n    console.log(currentPageArr);\n    setCurrentPArr([...currentPageArr]);\n  }\n  let [currentPageArr,setCurrentPArr] = useState([]);\n  useEffect(() => {\n    inpageshow(currentPage, PER_PAGE);\n  },[]);\n  //let [cambioP, setCambioP] = useState(false);\n\n\n  useEffect(() => {\n  }, [gamests])\n\n  // if (titFiltGames) {\n  //   let allgames = titFiltGames.map((g, index) => (\n  //     <GameCard key={index} id={g.apId} name={g.name} img={g.img_url} genres={g.genres} />\n  //   ))\n  // }\n\n  return (\n    <div className=\"cardcont\" >\n      {gamests && gamests.map((g, index) => (\n      <GameCard key={index} id={g.apId} name={g.name} img={g.img_url} genres={g.genres} />\n    ))}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}