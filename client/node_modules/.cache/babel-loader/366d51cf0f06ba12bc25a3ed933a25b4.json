{"ast":null,"code":"import _objectSpread from\"/home/edith/Desktop/PI/FT10-PI-Videogames/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{GET_API_PLATFORMS,GET_GENRE_OPT,SET_NG_GEN_SEL}from'../actions/actions';//GET_PLATFORMS,GET_GENRES,ADD_NEW_PLATFORM,ADD_NEW_GENRE\nvar initialState={genreopt:[],nggensel:[],apiplatforms:[]//arreglo de plataformas de la api\n// moviesLoaded: [], // peliculas que nos trae la busqueda\n// movieDetail: {} // info de una sola película\n};function reducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case GET_API_PLATFORMS:return _objectSpread(_objectSpread({},state),{},{apiplatforms:action.payload});case GET_GENRE_OPT:return _objectSpread(_objectSpread({},state),{},{genreopt:action.payload});case SET_NG_GEN_SEL:return _objectSpread(_objectSpread({},state),{},{nggensel:action.payload});// case GET_MOVIE_DETAIL:\n//   return {\n//     ...state,\n//     movieDetail: action.payload\n//   }\n// case ADD_MOVIE_FAVORITE:\n//   let foundMovie = state.moviesLoaded.find(peli => peli.imdbID !== action.payload)\n//   return {\n//     ...state,\n//     //moviesFavorite: state.moviesFavorite.concat(foundMovie)\n//     moviesFavorite: [...state.moviesFavorite,foundMovie]\n//   }\n// case REMOVE_MOVIE_FAVORITE:\n//   return {\n//     ...state,\n//     moviesFavorite: state.moviesFavorite.filter( (peli) => peli.imdbID !== action.payload)\n//     //crea un nuevo array con todos los elementos que cumplan la condición\n//     //cada peli es un objeto que en particular tiene una prop id\n//   }\ndefault:return state;}};export default reducer;","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/reducers/reducers.js"],"names":["GET_API_PLATFORMS","GET_GENRE_OPT","SET_NG_GEN_SEL","initialState","genreopt","nggensel","apiplatforms","reducer","state","action","type","payload"],"mappings":"sKAAA,OAASA,iBAAT,CAA4BC,aAA5B,CAA2CC,cAA3C,KAAiE,oBAAjE,CACA;AAEA,GAAMC,CAAAA,YAAY,CAAG,CACnBC,QAAQ,CAAE,EADS,CAEnBC,QAAQ,CAAE,EAFS,CAGnBC,YAAY,CAAE,EAAI;AAClB;AACA;AALmB,CAArB,CAQA,QAASC,CAAAA,OAAT,EAA+C,IAA9BC,CAAAA,KAA8B,2DAAtBL,YAAsB,IAARM,CAAAA,MAAQ,2CAE7C,OAAQA,MAAM,CAACC,IAAf,EACE,IAAKV,CAAAA,iBAAL,CACE,sCACKQ,KADL,MAEEF,YAAY,CAAEG,MAAM,CAACE,OAFvB,GAIF,IAAKV,CAAAA,aAAL,CACE,sCACKO,KADL,MAEEJ,QAAQ,CAAEK,MAAM,CAACE,OAFnB,GAIF,IAAKT,CAAAA,cAAL,CACE,sCACKM,KADL,MAEEH,QAAQ,CAAEI,MAAM,CAACE,OAFnB,GAIF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QACE,MAAOH,CAAAA,KAAP,CApCJ,CAsCD,EAED,cAAeD,CAAAA,OAAf","sourcesContent":["import { GET_API_PLATFORMS, GET_GENRE_OPT, SET_NG_GEN_SEL } from '../actions/actions';\n//GET_PLATFORMS,GET_GENRES,ADD_NEW_PLATFORM,ADD_NEW_GENRE\n\nconst initialState = {\n  genreopt: [],\n  nggensel: [],\n  apiplatforms: [], //arreglo de plataformas de la api\n  // moviesLoaded: [], // peliculas que nos trae la busqueda\n  // movieDetail: {} // info de una sola película\n};\n\nfunction reducer(state = initialState, action) {\n\n  switch (action.type) {\n    case GET_API_PLATFORMS:\n      return {\n        ...state,\n        apiplatforms: action.payload\n      }\n    case GET_GENRE_OPT:\n      return {\n        ...state,\n        genreopt: action.payload\n      }\n    case SET_NG_GEN_SEL:\n      return {\n        ...state,\n        nggensel: action.payload\n      }\n    // case GET_MOVIE_DETAIL:\n    //   return {\n    //     ...state,\n    //     movieDetail: action.payload\n    //   }\n    // case ADD_MOVIE_FAVORITE:\n    //   let foundMovie = state.moviesLoaded.find(peli => peli.imdbID !== action.payload)\n    //   return {\n    //     ...state,\n    //     //moviesFavorite: state.moviesFavorite.concat(foundMovie)\n    //     moviesFavorite: [...state.moviesFavorite,foundMovie]\n    //   }\n    // case REMOVE_MOVIE_FAVORITE:\n    //   return {\n    //     ...state,\n    //     moviesFavorite: state.moviesFavorite.filter( (peli) => peli.imdbID !== action.payload)\n    //     //crea un nuevo array con todos los elementos que cumplan la condición\n    //     //cada peli es un objeto que en particular tiene una prop id\n    //   }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}