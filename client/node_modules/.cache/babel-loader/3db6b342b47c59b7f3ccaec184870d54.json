{"ast":null,"code":"var _jsxFileName = \"/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/MultiSelectPlatform/MultiSelectPlatform.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './MultiSelectPlatform.css';\nimport { connect } from \"react-redux\";\nimport { getApiPlatforms } from '../../actions/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function MultiSelectPlatform(props) {\n  _s();\n\n  //console.log(props);\n  //const platfopt = props.getApiPlatforms();\n  async function getPlatforms() {\n    let plataformas = await fetch(\"https://api.rawg.io/api/platforms\") //url de api con plataformas\n    .then(response => response.json()) //aplica json y retorna\n    .then(json => {\n      let data = json.results;\n      let apiPlatfs = Promise.all(data.map(e => e.name));\n      return apiPlatfs.json();\n      ;\n    }).catch(error => console.log(error)); //     .then(platfs => console.log(platfs));\n\n    return plataformas;\n  }\n\n  let plataformas = getPlatforms();\n  console.log(plataformas); //const platfopt1 = plataformas.map(e => {e});\n  //console.log(platfopt1);\n\n  const platfopt = [{\n    value: 'chocolate',\n    label: 'Chocolate'\n  }, {\n    value: 'strawberry',\n    label: 'Strawberry'\n  }, {\n    value: 'vanilla',\n    label: 'Vanilla'\n  }];\n  let [splatforms, setSplatforms] = useState([]); // selected platforms\n\n  function removeItem(item) {\n    let newItems = splatforms.filter(e => e !== item);\n    setSplatforms(newItems);\n  }\n\n  async function handleChange(e) {\n    let itemP = e.target.value;\n    let hasItem = splatforms.includes(itemP);\n\n    if (!hasItem) {\n      setSplatforms([...splatforms, itemP]);\n    } else {\n      removeItem(itemP);\n    }\n  }\n\n  function handleClick(e) {\n    let itm = e.target.value;\n    removeItem(itm);\n  }\n\n  useEffect(() => {}, [splatforms]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"selplatfom\",\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"platforms\",\n      placeholder: \"Plataformas...\",\n      className: \"multselectpf\",\n      value: '',\n      onChange: handleChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        defaultValue: true,\n        children: \"Plataformas:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), platfopt.map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: item.value,\n        children: item.label\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"platfcont\",\n      children: splatforms.map((item, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"selplatfbtn\",\n        value: item,\n        onClick: handleClick,\n        children: item\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n} // Función que recibe como argumento el estado de Redux y retorna\n// como \"props\" un objeto que contiene el estado.\n\n_s(MultiSelectPlatform, \"JidCj2aTRoSdkQ8cj9qo5Ayovxg=\");\n\n_c = MultiSelectPlatform;\n\nconst mapStateToProps = state => {\n  return {\n    platforms: state.apiplatforms\n  };\n}; // // Función que recibe como argumento el método dispatch() de Redux\n// // y retorna un objeto.\n// const mapDispatchToProps = dispatch => {\n// \treturn { getplatforms: () => dispatch(getApiPlatforms()) }\n// }\n\n\nexport default connect(mapStateToProps, {\n  getApiPlatforms\n})(MultiSelectPlatform);\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiSelectPlatform\");","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/MultiSelectPlatform/MultiSelectPlatform.jsx"],"names":["React","useState","useEffect","connect","getApiPlatforms","MultiSelectPlatform","props","getPlatforms","plataformas","fetch","then","response","json","data","results","apiPlatfs","Promise","all","map","e","name","catch","error","console","log","platfopt","value","label","splatforms","setSplatforms","removeItem","item","newItems","filter","handleChange","itemP","target","hasItem","includes","handleClick","itm","index","mapStateToProps","state","platforms","apiplatforms"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './MultiSelectPlatform.css';\nimport { connect } from \"react-redux\";\nimport { getApiPlatforms } from '../../actions/actions';\n\nexport function MultiSelectPlatform(props) {\n  //console.log(props);\n  //const platfopt = props.getApiPlatforms();\n\n  async function getPlatforms() {\n    let plataformas = await fetch(\"https://api.rawg.io/api/platforms\") //url de api con plataformas\n      .then(response => response.json()) //aplica json y retorna\n      .then(json => {\n        let data = json.results;\n        let apiPlatfs = Promise.all(data.map(e => e.name));\n        return apiPlatfs.json();;\n      })\n      .catch(error => console.log(error))\n //     .then(platfs => console.log(platfs));\n      return plataformas;\n  }\n  \n  let plataformas = getPlatforms();\n  console.log(plataformas);\n  //const platfopt1 = plataformas.map(e => {e});\n\n  //console.log(platfopt1);\n\n  const platfopt = [\n    { value: 'chocolate', label: 'Chocolate' },\n    { value: 'strawberry', label: 'Strawberry' },\n    { value: 'vanilla', label: 'Vanilla' }\n  ]\n\n  let [splatforms, setSplatforms] = useState([]); // selected platforms\n\n  function removeItem(item) {\n    let newItems = splatforms.filter(e => e !== item);\n    setSplatforms(newItems);\n  }\n\n  async function handleChange(e) {\n    let itemP = e.target.value;\n    let hasItem = splatforms.includes(itemP);\n    if (!hasItem) {\n      setSplatforms([...splatforms, itemP]);\n    } else {\n      removeItem(itemP);\n    }\n  }\n\n  function handleClick(e) {\n    let itm = e.target.value;\n    removeItem(itm);\n  }\n\n  useEffect(() => {\n  }, [splatforms]);\n\n  return (\n    <div className=\"selplatfom\">\n      <select\n        name=\"platforms\"\n        placeholder=\"Plataformas...\"\n        className=\"multselectpf\"\n        value={''}\n        onChange={handleChange}\n      >\n        <option defaultValue>Plataformas:</option>\n        {platfopt.map((item, index) => (\n          <option key={index} value={item.value}>{item.label}</option>\n        ))}\n      </select>\n      <div className=\"platfcont\">\n        {splatforms.map((item, index) => (\n          <button className=\"selplatfbtn\" value={item}\n            onClick={handleClick} key={index}>\n            {item}\n          </button>\n        ))}\n      </div>\n    </div>\n  )\n}\n\n// Función que recibe como argumento el estado de Redux y retorna\n// como \"props\" un objeto que contiene el estado.\nconst mapStateToProps = state => {\n  return { platforms: state.apiplatforms }\n}\n\n// // Función que recibe como argumento el método dispatch() de Redux\n// // y retorna un objeto.\n\n// const mapDispatchToProps = dispatch => {\n// \treturn { getplatforms: () => dispatch(getApiPlatforms()) }\n// }\n\nexport default connect(mapStateToProps, { getApiPlatforms })(MultiSelectPlatform);\n"]},"metadata":{},"sourceType":"module"}