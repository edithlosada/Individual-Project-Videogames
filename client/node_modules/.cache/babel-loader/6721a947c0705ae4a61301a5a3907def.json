{"ast":null,"code":"var _jsxFileName = \"/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GenreSelect/GenreSelect.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './GenreSelect.css';\nimport { dbGenOpSearch, apiGenOpSearch, searchGenre } from '../../actions/actions'; //used on SearchMenu\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GenreSelect() {\n  _s();\n\n  let origin = useSelector(state => state.searchOrig); // <--Busca el origen del store.\n\n  let dispatch = useDispatch();\n  let apigenres = useSelector(state => state.apigenopts);\n  let apigenRef = useRef(apigenres); //<--para evitar missing dependency en useEffect\n\n  let dbgenres = useSelector(state => state.dbgenopts);\n  let dbgenRef = useRef(dbgenres);\n  let [genres, setGenres] = useState(''); // Cada vez que cambie el origen guarda el estado en el store\n  // y setea genres con los valores correspondientes\n\n  useEffect(() => {\n    let genreopts = (orig, apig, dbg) => {\n      if (orig === 'base de datos') {\n        //console.log(orig);\n        //dispatch(dbGenOpSearch()); // <-- Hacer...\n        setGenres(dbg);\n      }\n\n      if (orig === 'API') {\n        //console.log(orig);\n        dispatch(apiGenOpSearch()); // setGenres(apig);\n        //console.log(apig);\n      }\n    };\n\n    genreopts(origin, apigenRef.current, dbgenRef.current); // <-- referencia a apigenres\n  }, [origin, dispatch]); //Cada vez que cambie el origen guarda el estado en el store\n\n  useEffect(() => {\n    setGenres(apigenres);\n  }, [apigenres]);\n  useEffect(() => {\n    setGenres(dbgenres);\n  }, [dbgenres]); // Manda al store el género a buscar\n\n  function handleChange(e) {\n    dispatch(searchGenre(e.target.value));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gcont\",\n    children: /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"genres\",\n      className: \"gselect\",\n      value: genres,\n      onChange: handleChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        defaultValue: true,\n        children: \"G\\xE9nero:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), genres && genres.map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: option.value,\n        children: option.label\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GenreSelect, \"Z1rTzDfp6nVm0KDH9ccfhzgwKmM=\", false, function () {\n  return [useSelector, useDispatch, useSelector, useSelector];\n});\n\n_c = GenreSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenreSelect\");","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GenreSelect/GenreSelect.jsx"],"names":["React","useState","useEffect","useRef","useSelector","useDispatch","dbGenOpSearch","apiGenOpSearch","searchGenre","GenreSelect","origin","state","searchOrig","dispatch","apigenres","apigenopts","apigenRef","dbgenres","dbgenopts","dbgenRef","genres","setGenres","genreopts","orig","apig","dbg","current","handleChange","e","target","value","map","option","index","label"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAO,mBAAP;AACA,SAASC,aAAT,EAAwBC,cAAxB,EAAwCC,WAAxC,QAA2D,uBAA3D,C,CAEA;;;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AACpC,MAAIC,MAAM,GAAGN,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACC,UAAhB,CAAxB,CADoC,CACgB;;AAEpD,MAAIC,QAAQ,GAAGR,WAAW,EAA1B;AACA,MAAIS,SAAS,GAAGV,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACI,UAAhB,CAA3B;AACA,MAAIC,SAAS,GAAGb,MAAM,CAACW,SAAD,CAAtB,CALoC,CAKF;;AAClC,MAAIG,QAAQ,GAAGb,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACO,SAAhB,CAA1B;AACA,MAAIC,QAAQ,GAAGhB,MAAM,CAACc,QAAD,CAArB;AAEA,MAAI,CAACG,MAAD,EAASC,SAAT,IAAsBpB,QAAQ,CAAC,EAAD,CAAlC,CAToC,CAWpC;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIoB,SAAS,GAAG,CAACC,IAAD,EAAOC,IAAP,EAAaC,GAAb,KAAqB;AACnC,UAAIF,IAAI,KAAK,eAAb,EAA8B;AAC5B;AACA;AACAF,QAAAA,SAAS,CAACI,GAAD,CAAT;AACD;;AACD,UAAIF,IAAI,KAAK,KAAb,EAAoB;AAClB;AACAV,QAAAA,QAAQ,CAACN,cAAc,EAAf,CAAR,CAFkB,CAGlB;AACA;AACD;AACF,KAZD;;AAaAe,IAAAA,SAAS,CAACZ,MAAD,EAASM,SAAS,CAACU,OAAnB,EAA4BP,QAAQ,CAACO,OAArC,CAAT,CAdc,CAcyC;AACxD,GAfQ,EAeN,CAAChB,MAAD,EAASG,QAAT,CAfM,CAAT,CAboC,CA8BpC;;AACAX,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,SAAS,CAACP,SAAD,CAAT;AACD,GAFQ,EAEN,CAACA,SAAD,CAFM,CAAT;AAIAZ,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,SAAS,CAACJ,QAAD,CAAT;AACD,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT,CAnCoC,CAuCpC;;AACA,WAASU,YAAT,CAAsBC,CAAtB,EAAyB;AACvBf,IAAAA,QAAQ,CAACL,WAAW,CAACoB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAZ,CAAR;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,2BACE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,SAAS,EAAC,SAFZ;AAGE,MAAA,KAAK,EAAEV,MAHT;AAIE,MAAA,QAAQ,EAAEO,YAJZ;AAAA,8BAME;AAAQ,QAAA,YAAY,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,EAOGP,MAAM,IAAIA,MAAM,CAACW,GAAP,CAAW,CAACC,MAAD,EAASC,KAAT,kBACpB;AAAoB,QAAA,KAAK,EAAED,MAAM,CAACF,KAAlC;AAAA,kBAA0CE,MAAM,CAACE;AAAjD,SAAaD,KAAb;AAAA;AAAA;AAAA;AAAA,cADS,CAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GA3DuBxB,W;UACTL,W,EAEEC,W,EACCD,W,EAEDA,W;;;KANOK,W","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './GenreSelect.css';\nimport { dbGenOpSearch, apiGenOpSearch, searchGenre } from '../../actions/actions';\n\n//used on SearchMenu\n\nexport default function GenreSelect() {\n  let origin = useSelector(state => state.searchOrig);// <--Busca el origen del store.\n\n  let dispatch = useDispatch();\n  let apigenres = useSelector(state => state.apigenopts);\n  let apigenRef = useRef(apigenres);//<--para evitar missing dependency en useEffect\n  let dbgenres = useSelector(state => state.dbgenopts);\n  let dbgenRef = useRef(dbgenres);\n\n  let [genres, setGenres] = useState('');\n\n  // Cada vez que cambie el origen guarda el estado en el store\n  // y setea genres con los valores correspondientes\n  useEffect(() => {\n    let genreopts = (orig, apig, dbg) => {\n      if (orig === 'base de datos') {\n        //console.log(orig);\n        //dispatch(dbGenOpSearch()); // <-- Hacer...\n        setGenres(dbg);\n      }\n      if (orig === 'API') {\n        //console.log(orig);\n        dispatch(apiGenOpSearch());\n        // setGenres(apig);\n        //console.log(apig);\n      }\n    }\n    genreopts(origin, apigenRef.current, dbgenRef.current);// <-- referencia a apigenres\n  }, [origin, dispatch]);\n\n  //Cada vez que cambie el origen guarda el estado en el store\n  useEffect(() => {\n    setGenres(apigenres);\n  }, [apigenres]);\n\n  useEffect(() => {\n    setGenres(dbgenres);\n  }, [dbgenres]);\n\n  // Manda al store el género a buscar\n  function handleChange(e) {\n    dispatch(searchGenre(e.target.value));\n  }\n\n  return (\n    <div className=\"gcont\">\n      <select\n        name=\"genres\"\n        className=\"gselect\"\n        value={genres}\n        onChange={handleChange}\n      >\n        <option defaultValue  >Género:</option>\n        {genres && genres.map((option, index) => (\n          <option key={index} value={option.value}>{option.label}</option>\n        ))}\n      </select>\n    </div>\n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}