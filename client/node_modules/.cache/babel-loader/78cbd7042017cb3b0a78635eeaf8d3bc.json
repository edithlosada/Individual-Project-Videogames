{"ast":null,"code":"var _jsxFileName = \"/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GamesToShow/GamesToShow.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; // import { useSelector } from 'react-redux';\n\nimport './GamesToShow.css';\nimport GameCard from '../GameCard/GameCard.jsx';\nimport store from '../../store/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GamesToShow() {\n  _s();\n\n  let games = store.getState().gamestoshow;\n  conso; // let inits = useSelector(state => state.initsearch);\n  // let gamests = useSelector(state => state.gamestoshow); // juegos para mostrar\n  // let [n, setN] = useState(gamests.length); // n es el número de juegos en el arreglo\n  // let [g, setG] = useState([gamests]);\n\n  useEffect(() => {\n    console.log(gamests);\n  }, [gamests]);\n  let arr = gamests; // console.log(arr);\n\n  let n = arr.length;\n  let PER_PAGE = 6;\n  let pageCount = Math.ceil(n / PER_PAGE);\n  let [currentPage, setCurrentPage] = useState(0); //inicialmente la primer página\n\n  let [currentPageArr, setCurrentPArr] = useState([]); // Función que obtiene el subarreglo de juegos a mostrar según la pagina\n  // en la que se encuentre.\n\n  function inpageshow(currentPage, perpage) {\n    let offset = currentPage * perpage;\n    let currentPageArr = gamests.slice(offset, offset + PER_PAGE);\n    console.log(currentPageArr);\n    setCurrentPArr([...currentPageArr]);\n  }\n\n  function handlePrev() {\n    if (currentPage) {\n      setCurrentPage(currentPage - 1);\n    }\n  }\n\n  function handleNext() {\n    if (currentPage < pageCount - 1) {\n      setCurrentPage(currentPage + 1);\n    }\n  }\n\n  function handlePage(e) {\n    setCurrentPage(e.target.value - 1);\n    console.log('current page is' + currentPage);\n  } // function pagesNumArr(pageCount) {\n  //   let arr = [];\n  //   for (let i = 1; i <= pageCount; i++) {\n  //     arr.push(i);\n  //   }\n  //   return arr;\n  // }\n  // let pages = pagesNumArr(pageCount);\n\n\n  useEffect(() => {}, [currentPageArr, currentPage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cardcont\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Games to show\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p_btn_area\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"p_button\",\n        onClick: handlePrev,\n        children: \"Anterior\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"p_button\",\n        onClick: handleNext,\n        children: \"Siguiente\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GamesToShow, \"OXZqKlBd3qSkJKsQWPBfDj4sJIg=\");\n\n_c = GamesToShow;\n\nvar _c;\n\n$RefreshReg$(_c, \"GamesToShow\");","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GamesToShow/GamesToShow.jsx"],"names":["React","useState","useEffect","GameCard","store","GamesToShow","games","getState","gamestoshow","conso","console","log","gamests","arr","n","length","PER_PAGE","pageCount","Math","ceil","currentPage","setCurrentPage","currentPageArr","setCurrentPArr","inpageshow","perpage","offset","slice","handlePrev","handleNext","handlePage","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;AACA,OAAO,mBAAP;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AAEpC,MAAIC,KAAK,GAAGF,KAAK,CAACG,QAAN,GAAiBC,WAA7B;AACAC,EAAAA,KAAK,CAH+B,CAKpC;AAEA;AAEA;AACA;;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,OAAO,CAACC,GAAR,CAAYC,OAAZ;AACD,GAFQ,EAEP,CAACA,OAAD,CAFO,CAAT;AAIA,MAAIC,GAAG,GAAGD,OAAV,CAhBoC,CAiBpC;;AACA,MAAIE,CAAC,GAAGD,GAAG,CAACE,MAAZ;AACA,MAAIC,QAAQ,GAAG,CAAf;AACA,MAAIC,SAAS,GAAGC,IAAI,CAACC,IAAL,CAAUL,CAAC,GAAGE,QAAd,CAAhB;AAEA,MAAI,CAACI,WAAD,EAAcC,cAAd,IAAgCpB,QAAQ,CAAC,CAAD,CAA5C,CAtBoC,CAsBa;;AACjD,MAAI,CAACqB,cAAD,EAAiBC,cAAjB,IAAmCtB,QAAQ,CAAC,EAAD,CAA/C,CAvBoC,CAyBpC;AACA;;AACA,WAASuB,UAAT,CAAoBJ,WAApB,EAAiCK,OAAjC,EAA0C;AACxC,QAAIC,MAAM,GAAGN,WAAW,GAAGK,OAA3B;AACA,QAAIH,cAAc,GAAGV,OAAO,CAACe,KAAR,CAAcD,MAAd,EAAsBA,MAAM,GAAGV,QAA/B,CAArB;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYW,cAAZ;AACAC,IAAAA,cAAc,CAAC,CAAC,GAAGD,cAAJ,CAAD,CAAd;AACD;;AAED,WAASM,UAAT,GAAsB;AACpB,QAAIR,WAAJ,EAAiB;AACfC,MAAAA,cAAc,CAACD,WAAW,GAAG,CAAf,CAAd;AACD;AACF;;AAED,WAASS,UAAT,GAAsB;AACpB,QAAIT,WAAW,GAAGH,SAAS,GAAG,CAA9B,EAAiC;AAC/BI,MAAAA,cAAc,CAACD,WAAW,GAAG,CAAf,CAAd;AACD;AACF;;AAED,WAASU,UAAT,CAAoBC,CAApB,EAAuB;AACrBV,IAAAA,cAAc,CAACU,CAAC,CAACC,MAAF,CAASC,KAAT,GAAiB,CAAlB,CAAd;AACAvB,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoBS,WAAhC;AACD,GAjDmC,CAmDpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAlB,EAAAA,SAAS,CAAC,MAAM,CACf,CADQ,EACN,CAACoB,cAAD,EAAgBF,WAAhB,CADM,CAAT;AAGA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAOE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BACE;AAAQ,QAAA,SAAS,EAAC,UAAlB;AAA6B,QAAA,OAAO,EAAEQ,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAQ,QAAA,SAAS,EAAC,UAAlB;AAA6B,QAAA,OAAO,EAAEC,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD;;GA/EuBxB,W;;KAAAA,W","sourcesContent":["import React, { useState, useEffect } from 'react';\n// import { useSelector } from 'react-redux';\nimport './GamesToShow.css';\nimport GameCard from '../GameCard/GameCard.jsx';\nimport store from '../../store/index';\n\nexport default function GamesToShow() {\n\n  let games = store.getState().gamestoshow\n  conso\n\n  // let inits = useSelector(state => state.initsearch);\n\n  // let gamests = useSelector(state => state.gamestoshow); // juegos para mostrar\n\n  // let [n, setN] = useState(gamests.length); // n es el número de juegos en el arreglo\n  // let [g, setG] = useState([gamests]);\n\n  useEffect(() => {\n    console.log(gamests);\n  },[gamests])\n\n  let arr = gamests;\n  // console.log(arr);\n  let n = arr.length;\n  let PER_PAGE = 6;\n  let pageCount = Math.ceil(n / PER_PAGE);\n  \n  let [currentPage, setCurrentPage] = useState(0); //inicialmente la primer página\n  let [currentPageArr, setCurrentPArr] = useState([]);\n  \n  // Función que obtiene el subarreglo de juegos a mostrar según la pagina\n  // en la que se encuentre.\n  function inpageshow(currentPage, perpage) {\n    let offset = currentPage * perpage;\n    let currentPageArr = gamests.slice(offset, offset + PER_PAGE)\n    console.log(currentPageArr);\n    setCurrentPArr([...currentPageArr]);\n  }\n\n  function handlePrev() {\n    if (currentPage) {\n      setCurrentPage(currentPage - 1);\n    }\n  }\n\n  function handleNext() {\n    if (currentPage < pageCount - 1) {\n      setCurrentPage(currentPage + 1);\n    }\n  }\n\n  function handlePage(e) {\n    setCurrentPage(e.target.value - 1);\n    console.log('current page is' + currentPage);\n  }\n\n  // function pagesNumArr(pageCount) {\n  //   let arr = [];\n  //   for (let i = 1; i <= pageCount; i++) {\n  //     arr.push(i);\n  //   }\n  //   return arr;\n  // }\n  // let pages = pagesNumArr(pageCount);\n  useEffect(() => {\n  }, [currentPageArr,currentPage])\n\n  return (\n    <div>\n      <div className=\"cardcont\" >\n        <h1>Games to show</h1>\n        {/* {currentPageArr && currentPageArr.map((g, i) => (\n          <GameCard key={i} id={g.apId} name={g.name} img={g.img_url} genres={g.genres} />\n        ))} */}\n      </div>\n      <div className=\"p_btn_area\">\n        <button className=\"p_button\" onClick={handlePrev}>Anterior</button>\n        {/* {pages && pages.map((p, i) => (\n          <button key={i} className=\"p_button\" onClick={handlePage} value={p}> {p} </button>\n        ))} */}\n        <button className=\"p_button\" onClick={handleNext}>Siguiente</button>\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}