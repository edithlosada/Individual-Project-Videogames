{"ast":null,"code":"var _jsxFileName = \"/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GenreSelect/GenreSelect.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './GenreSelect.css';\nimport { dbGenOpSearch, apiGenOpSearch, setSearchGenre } from '../../actions/actions'; //used on SearchMenu\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GenreSelect() {\n  _s();\n\n  const dispatch = useDispatch();\n  const origen = useSelector(state => state.searchOrig); // <--Busca el origen del store.\n  //const sgenres = useSelector(state => state.nggensel);\n\n  async function genreopts(origen) {\n    if (origen === 'db') {\n      console.log(origen); //dispatch(dbGenOpSearch());\n    }\n\n    if (origen === 'api') {\n      console.log(origen); //dispatch(apiGenOpSearch());\n    }\n  }\n\n  genreopts(origen);\n  const genres = [{\n    label: 'acción',\n    value: 'acción'\n  }, {\n    label: 'aventura',\n    value: 'aventura'\n  }];\n  let [genre, setGenre] = useState('');\n\n  function handleChange(e) {\n    setGenre(e.target.value);\n  } //Cada vez que cambie el origen guarda el estado en el store\n\n\n  useEffect(() => {\n    dispatch(setSearchGenre(genre));\n  }, [genre, dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gcont\",\n    children: /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"genres\",\n      className: \"gselect\",\n      value: genre,\n      onChange: handleChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        defaultValue: true,\n        children: \"G\\xE9nero:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), genres && genres.map((option, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: option.value,\n        children: option.label\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GenreSelect, \"FfK6WRBA4D+d9N8QD+RY3QQ1J9E=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = GenreSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenreSelect\");","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GenreSelect/GenreSelect.jsx"],"names":["React","useState","useEffect","useSelector","useDispatch","dbGenOpSearch","apiGenOpSearch","setSearchGenre","GenreSelect","dispatch","origen","state","searchOrig","genreopts","console","log","genres","label","value","genre","setGenre","handleChange","e","target","map","option","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAO,mBAAP;AACA,SAASC,aAAT,EAAwBC,cAAxB,EAAuCC,cAAvC,QAA6D,uBAA7D,C,CAEA;;;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AAEpC,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AAEA,QAAMM,MAAM,GAAGP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACC,UAAhB,CAA1B,CAJoC,CAIkB;AAEtD;;AACA,iBAAeC,SAAf,CAAyBH,MAAzB,EAAgC;AAC9B,QAAGA,MAAM,KAAK,IAAd,EAAmB;AACjBI,MAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ,EADiB,CAEjB;AACD;;AACD,QAAGA,MAAM,KAAK,KAAd,EAAoB;AAClBI,MAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ,EADkB,CAElB;AACD;AACF;;AAEDG,EAAAA,SAAS,CAACH,MAAD,CAAT;AAEA,QAAMM,MAAM,GAAG,CACb;AAAEC,IAAAA,KAAK,EAAE,QAAT;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GADa,EAEb;AAAED,IAAAA,KAAK,EAAE,UAAT;AAAqBC,IAAAA,KAAK,EAAE;AAA5B,GAFa,CAAf;AAKA,MAAI,CAACC,KAAD,EAAQC,QAAR,IAAoBnB,QAAQ,CAAC,EAAD,CAAhC;;AAEA,WAASoB,YAAT,CAAsBC,CAAtB,EAAyB;AACvBF,IAAAA,QAAQ,CAACE,CAAC,CAACC,MAAF,CAASL,KAAV,CAAR;AACD,GA7BmC,CA+BpC;;;AACAhB,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,QAAQ,CAACF,cAAc,CAACY,KAAD,CAAf,CAAR;AACD,GAFQ,EAEN,CAACA,KAAD,EAAQV,QAAR,CAFM,CAAT;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,2BACE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,SAAS,EAAC,SAFZ;AAGE,MAAA,KAAK,EAAEU,KAHT;AAIE,MAAA,QAAQ,EAAEE,YAJZ;AAAA,8BAME;AAAQ,QAAA,YAAY,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,EAOGL,MAAM,IAAIA,MAAM,CAACQ,GAAP,CAAW,CAACC,MAAD,EAASC,KAAT,kBACpB;AAAoB,QAAA,KAAK,EAAED,MAAM,CAACP,KAAlC;AAAA,kBAA0CO,MAAM,CAACR;AAAjD,SAAaS,KAAb;AAAA;AAAA;AAAA;AAAA,cADS,CAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GAnDuBlB,W;UAELJ,W,EAEFD,W;;;KAJOK,W","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './GenreSelect.css';\nimport { dbGenOpSearch, apiGenOpSearch,setSearchGenre } from '../../actions/actions';\n\n//used on SearchMenu\n\nexport default function GenreSelect() {\n\n  const dispatch = useDispatch();\n\n  const origen = useSelector(state => state.searchOrig);// <--Busca el origen del store.\n  \n  //const sgenres = useSelector(state => state.nggensel);\n  async function genreopts(origen){\n    if(origen === 'db'){\n      console.log(origen);\n      //dispatch(dbGenOpSearch());\n    }\n    if(origen === 'api'){\n      console.log(origen);\n      //dispatch(apiGenOpSearch());\n    } \n  } \n\n  genreopts(origen);\n  \n  const genres = [\n    { label: 'acción', value: 'acción' },\n    { label: 'aventura', value: 'aventura' }\n  ];\n\n  let [genre, setGenre] = useState('');\n\n  function handleChange(e) {\n    setGenre(e.target.value);\n  }\n\n  //Cada vez que cambie el origen guarda el estado en el store\n  useEffect(() => {\n    dispatch(setSearchGenre(genre));\n  }, [genre, dispatch]);\n\n  return (\n    <div className=\"gcont\">\n      <select\n        name=\"genres\"\n        className=\"gselect\"\n        value={genre}\n        onChange={handleChange}\n      >\n        <option defaultValue >Género:</option>\n        {genres && genres.map((option, index) => (\n          <option key={index} value={option.value}>{option.label}</option>\n        ))}\n      </select>\n    </div>\n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}