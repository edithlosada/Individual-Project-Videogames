{"ast":null,"code":"import _regeneratorRuntime from\"/home/edith/Desktop/PI/FT10-PI-Videogames/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/edith/Desktop/PI/FT10-PI-Videogames/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";export var GET_API_PLATFORMS=\"GET_API_PLATFORMS\";export var GET_GENRE_OPT=\"GET_GENRE_OPT\";export var SET_NG_GEN_SEL=\"SET_NG_GEN_SEL\";// export const SEARCH_API_PLATFORMS = \"GET_PLATFORMS\";\n// export const SEARCH_API_GENRES = \"GET_GENRES\";\n// export const ADD_NEW_PLATFORM = \"ADD_NEW_PLATFORM\";\n// export const ADD_NEW_GENRE = \"ADD_NEW_GENRE\";\n// Request a la API para traer las películas.\n// El payload va a ser el objeto que recibamos de nuestra request.\n// Request a la API para traer las plataformas de videojuegos.\nexport function getApiPlatforms(){return function(dispatch){return fetch(\"https://api.rawg.io/api/platforms\")//url de api con plataformas\n.then(function(response){return response.json();})//aplica json y retorna\n.then(function(json){var data=json.results;var apiPlatfs=data.map(function(e){return e.name;});return apiPlatfs;}).then(function(platfs){dispatch({type:GET_API_PLATFORMS,payload:platfs});// lo manda al reducer\n});};}// https://api.rawg.io/api/platforms\n//.results  --> arr =  [0,...,50]\n// arr[i].name  --> '...'\nexport function getDbGenres(){var genreopt=[];function buildGenObjArr(){return _buildGenObjArr.apply(this,arguments);}function _buildGenObjArr(){_buildGenObjArr=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:fetch(\"http://localhost:3001/genres\").then(function(response){return response.json();}).then(function(arr){for(var i=0;i<arr.length;i++){var obj={value:arr[i].name,label:arr[i].name};genreopt.push(obj);}}).catch(function(error){return console.log(error);});case 1:case\"end\":return _context.stop();}}},_callee);}));return _buildGenObjArr.apply(this,arguments);}buildGenObjArr();return{type:GET_GENRE_OPT,payload:genreopt};}// export function setNgGenSel(arr) {\n//   return { type: SET_NG_GEN_SEL, payload: arr };\n// }","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/actions/actions.js"],"names":["GET_API_PLATFORMS","GET_GENRE_OPT","SET_NG_GEN_SEL","getApiPlatforms","dispatch","fetch","then","response","json","data","results","apiPlatfs","map","e","name","platfs","type","payload","getDbGenres","genreopt","buildGenObjArr","arr","i","length","obj","value","label","push","catch","error","console","log"],"mappings":"2UAAA,MAAO,IAAMA,CAAAA,iBAAiB,CAAG,mBAA1B,CACP,MAAO,IAAMC,CAAAA,aAAa,CAAG,eAAtB,CACP,MAAO,IAAMC,CAAAA,cAAc,CAAG,gBAAvB,CAEP;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA,MAAO,SAASC,CAAAA,eAAT,EAA2B,CAChC,MAAO,UAAUC,QAAV,CAAoB,CACzB,MAAOC,CAAAA,KAAK,CAAC,mCAAD,CAAsC;AAA3C,CACJC,IADI,CACC,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAT,EAAJ,EADT,CAC8B;AAD9B,CAEJF,IAFI,CAEC,SAAAE,IAAI,CAAI,CACZ,GAAIC,CAAAA,IAAI,CAAGD,IAAI,CAACE,OAAhB,CACA,GAAIC,CAAAA,SAAS,CAAGF,IAAI,CAACG,GAAL,CAAS,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACC,IAAN,EAAV,CAAhB,CACA,MAAOH,CAAAA,SAAP,CACD,CANI,EAOJL,IAPI,CAOC,SAAAS,MAAM,CAAI,CACdX,QAAQ,CAAC,CAAEY,IAAI,CAAEhB,iBAAR,CAA2BiB,OAAO,CAAEF,MAApC,CAAD,CAAR,CAAuD;AACxD,CATI,CAAP,CAUD,CAXD,CAYD,CAED;AACA;AACA;AAEA,MAAO,SAASG,CAAAA,WAAT,EAAuB,CAE5B,GAAMC,CAAAA,QAAQ,CAAG,EAAjB,CAF4B,QAIZC,CAAAA,cAJY,oJAI3B,mIACCf,KAAK,CAAC,8BAAD,CAAL,CACGC,IADH,CACQ,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAT,EAAJ,EADhB,EAEGF,IAFH,CAEQ,SAAAe,GAAG,CAAI,CACX,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGD,GAAG,CAACE,MAAxB,CAAgCD,CAAC,EAAjC,CAAqC,CACnC,GAAIE,CAAAA,GAAG,CAAG,CAAEC,KAAK,CAAEJ,GAAG,CAACC,CAAD,CAAH,CAAOR,IAAhB,CAAsBY,KAAK,CAAEL,GAAG,CAACC,CAAD,CAAH,CAAOR,IAApC,CAAV,CACAK,QAAQ,CAACQ,IAAT,CAAcH,GAAd,EACD,CACF,CAPH,EAQGI,KARH,CAQS,SAAAC,KAAK,QAAIC,CAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAAJ,EARd,EADD,sDAJ2B,iDAgB5BT,cAAc,GAEd,MAAO,CAAEJ,IAAI,CAAEf,aAAR,CAAuBgB,OAAO,CAAEE,QAAhC,CAAP,CACD,CAED;AACA;AACA","sourcesContent":["export const GET_API_PLATFORMS = \"GET_API_PLATFORMS\";\nexport const GET_GENRE_OPT = \"GET_GENRE_OPT\";\nexport const SET_NG_GEN_SEL = \"SET_NG_GEN_SEL\";\n\n// export const SEARCH_API_PLATFORMS = \"GET_PLATFORMS\";\n// export const SEARCH_API_GENRES = \"GET_GENRES\";\n// export const ADD_NEW_PLATFORM = \"ADD_NEW_PLATFORM\";\n// export const ADD_NEW_GENRE = \"ADD_NEW_GENRE\";\n\n// Request a la API para traer las películas.\n// El payload va a ser el objeto que recibamos de nuestra request.\n\n// Request a la API para traer las plataformas de videojuegos.\nexport function getApiPlatforms() {\n  return function (dispatch) {\n    return fetch(\"https://api.rawg.io/api/platforms\") //url de api con plataformas\n      .then(response => response.json()) //aplica json y retorna\n      .then(json => {\n        let data = json.results;\n        let apiPlatfs = data.map(e => e.name);\n        return apiPlatfs;\n      })\n      .then(platfs => {\n        dispatch({ type: GET_API_PLATFORMS, payload: platfs }) // lo manda al reducer\n      });\n  };\n}\n\n// https://api.rawg.io/api/platforms\n//.results  --> arr =  [0,...,50]\n// arr[i].name  --> '...'\n\nexport function getDbGenres() {\n\n  const genreopt = [];\n\n   async function buildGenObjArr() {\n    fetch(\"http://localhost:3001/genres\")\n      .then(response => response.json())\n      .then(arr => {\n        for (let i = 0; i < arr.length; i++) {\n          let obj = { value: arr[i].name, label: arr[i].name };\n          genreopt.push(obj);\n        }\n      })\n      .catch(error => console.log(error))\n  }\n\n  buildGenObjArr();\n\n  return { type: GET_GENRE_OPT, payload: genreopt };\n}\n\n// export function setNgGenSel(arr) {\n//   return { type: SET_NG_GEN_SEL, payload: arr };\n// }\n"]},"metadata":{},"sourceType":"module"}