{"ast":null,"code":"import { GET_API_PLATFORMS, GET_GENRE_OPT } from '../actions/actions'; //GET_PLATFORMS,GET_GENRES,ADD_NEW_PLATFORM,ADD_NEW_GENRE\n\nconst initialState = {\n  loading: true,\n  genreopt: [],\n  apiplatforms: [] //arreglo de plataformas de la api\n  // moviesLoaded: [], // peliculas que nos trae la busqueda\n  // movieDetail: {} // info de una sola película\n\n};\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_API_PLATFORMS:\n      return { ...state,\n        apiplatforms: action.payload\n      };\n\n    case GET_GENRE_OPT:\n      return { ...state,\n        genreopt: action.payload,\n        loading: false\n      };\n    // case GET_MOVIE_DETAIL:\n    //   return {\n    //     ...state,\n    //     movieDetail: action.payload\n    //   }\n    // case ADD_MOVIE_FAVORITE:\n    //   let foundMovie = state.moviesLoaded.find(peli => peli.imdbID !== action.payload)\n    //   return {\n    //     ...state,\n    //     //moviesFavorite: state.moviesFavorite.concat(foundMovie)\n    //     moviesFavorite: [...state.moviesFavorite,foundMovie]\n    //   }\n    // case REMOVE_MOVIE_FAVORITE:\n    //   return {\n    //     ...state,\n    //     moviesFavorite: state.moviesFavorite.filter( (peli) => peli.imdbID !== action.payload)\n    //     //crea un nuevo array con todos los elementos que cumplan la condición\n    //     //cada peli es un objeto que en particular tiene una prop id\n    //   }\n\n    default:\n      return state;\n  }\n}\n\n;\nexport default reducer;","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/reducers/reducers.js"],"names":["GET_API_PLATFORMS","GET_GENRE_OPT","initialState","loading","genreopt","apiplatforms","reducer","state","action","type","payload"],"mappings":"AAAA,SAAQA,iBAAR,EAA2BC,aAA3B,QAA+C,oBAA/C,C,CACA;;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,IADU;AAEnBC,EAAAA,QAAQ,EAAE,EAFS;AAGnBC,EAAAA,YAAY,EAAE,EAHK,CAGD;AAClB;AACA;;AALmB,CAArB;;AAQA,SAASC,OAAT,CAAiBC,KAAK,GAAGL,YAAzB,EAAuCM,MAAvC,EAA+C;AAE7C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,iBAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELF,QAAAA,YAAY,EAAEG,MAAM,CAACE;AAFhB,OAAP;;AAIF,SAAKT,aAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELH,QAAAA,QAAQ,EAAEI,MAAM,CAACE,OAFZ;AAGLP,QAAAA,OAAO,EAAE;AAHJ,OAAP;AAKF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACE,aAAOI,KAAP;AAhCJ;AAkCD;;AAAA;AAED,eAAeD,OAAf","sourcesContent":["import {GET_API_PLATFORMS, GET_GENRE_OPT} from '../actions/actions';\n//GET_PLATFORMS,GET_GENRES,ADD_NEW_PLATFORM,ADD_NEW_GENRE\n\nconst initialState = {\n  loading: true,\n  genreopt: [],\n  apiplatforms: [], //arreglo de plataformas de la api\n  // moviesLoaded: [], // peliculas que nos trae la busqueda\n  // movieDetail: {} // info de una sola película\n};\n\nfunction reducer(state = initialState, action) {\n\n  switch (action.type) {\n    case GET_API_PLATFORMS:\n      return {\n        ...state,\n        apiplatforms: action.payload\n      }\n    case GET_GENRE_OPT:\n      return {\n        ...state,\n        genreopt: action.payload,\n        loading: false\n      }\n    // case GET_MOVIE_DETAIL:\n    //   return {\n    //     ...state,\n    //     movieDetail: action.payload\n    //   }\n    // case ADD_MOVIE_FAVORITE:\n    //   let foundMovie = state.moviesLoaded.find(peli => peli.imdbID !== action.payload)\n    //   return {\n    //     ...state,\n    //     //moviesFavorite: state.moviesFavorite.concat(foundMovie)\n    //     moviesFavorite: [...state.moviesFavorite,foundMovie]\n    //   }\n    // case REMOVE_MOVIE_FAVORITE:\n    //   return {\n    //     ...state,\n    //     moviesFavorite: state.moviesFavorite.filter( (peli) => peli.imdbID !== action.payload)\n    //     //crea un nuevo array con todos los elementos que cumplan la condición\n    //     //cada peli es un objeto que en particular tiene una prop id\n    //   }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}