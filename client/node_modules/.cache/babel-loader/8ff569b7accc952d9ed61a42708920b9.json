{"ast":null,"code":"import _slicedToArray from\"/home/edith/Desktop/PI/FT10-PI-Videogames/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,useRef}from'react';import{useSelector,useDispatch}from'react-redux';import'./Pagination.css';import GameCard from'../GameCard/GameCard.jsx';import{getApiGames,getdbGames,initsearch}from'../../actions/actions';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Pagination(){var dispatch=useDispatch();var origin=useSelector(function(state){return state.searchOrig;});var apiGames=useSelector(function(state){return state.apigames;});var dbGames=useSelector(function(state){return state.dbgames;});var search_gen=useSelector(function(state){return state.searchgenre;});var search_t=useSelector(function(state){return state.stitle;});var sent=useSelector(function(state){return state.initsearch;});var cleancards=useSelector(function(state){return state.cleancards;});var _useState=useState(true),_useState2=_slicedToArray(_useState,2),showMsg=_useState2[0],setShowMsg=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),gettingG=_useState4[0],setGettingG=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),games=_useState6[0],setGames=_useState6[1];var _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),genFiltGames=_useState8[0],setGenFiltGames=_useState8[1];var _useState9=useState(null),_useState10=_slicedToArray(_useState9,2),titFiltGames=_useState10[0],setTitFiltGames=_useState10[1];// Según el origen busca el arreglo de juegos\n// una vez elegido origen desactiva el mje de sel. orig. y activa \n// el mje de obteniendo juegos.\nuseEffect(function(){if(origin==='api'){console.log('cargaste API');//dispatch(getApiGames());\nsetShowMsg(false);// desactiva mje de seleccionar origen\nsetGettingG(true);// activa mje de obteniendo\n//limpiar dbgames\n}if(origin==='db'){console.log('falta cargar videojuegos en la base de datos');// dispatch(getdbGames());\nsetShowMsg(false);setGettingG(true);//limpiar apigames\n}},[origin,dispatch]);// Cuando registre un cambio en el estado de mjes, que actualice\nvar gRef=useRef(games);useEffect(function(){//console.log(gRef.current)\n},[showMsg,gettingG]);var origRef=useRef(origin);// Una vez cargados los juegos en el store desactiva mje \"buscando\"\n// y guarda el arreglo en el estado local games.\n// useEffect(() => {\n//   setGettingG(false);\n//   if (origRef.current === 'api') {\n//     setGames(apiGames)\n//     console.log(`(1)${apiGames}`);\n//     console.log(`(2)${gRef.current}`);\n//   }\n//   if (origRef.current === 'db') {\n//     setGames(dbGames)\n//   }\n// }, [apiGames, dbGames])\n// useEffect(() => {\n//   console.log(`(3)${gRef.current}`);\n// }, [games])\n// function genreFilter(arr, str) {\n//   let newarr = arr.filter(e => e.genres.includes(str));\n//   return newarr;\n// }\n// // Si se especifica un género para filtar llama a genreFilter\n// useEffect(() => {\n//   let newarr = genreFilter(gRef.current, search_gen);\n//   setGenFiltGames(newarr);\n//   setTitFiltGames(null); // Si cambio el género que quite cualquier selección previa guardada por título.\n//   //limpiar area\n// }, [search_gen])\n// function titleFilter(arr, str) {\n//   let newarr = arr.filter(e => e.name.includes(str));\n//   setTitFiltGames(newarr);\n//   return newarr;\n// }\n// let gfg = useRef(genFiltGames)\n// let tref= useRef(search_t)\n// let tfgRef = useRef(titFiltGames);\n// useEffect(() => {\n//   let newarr = titleFilter(gfg.current||gRef.current, tref.current);// Si no filtro por género que deje los de la api\n//   setTitFiltGames(newarr);\n//   // console.log(tfgRef.current);\n//   // console.log(sent);\n// }, [sent]) // en submit\n// useEffect(()=>{\n//   dispatch(initsearch(false)); // limpia????\n//   // setShowMsg(true);// desactiva mje de seleccionar origen\n//   // setSearchingG(false);\n// },[cleancards,dispatch])\n// // traerme el arreglo\n// // traerme el género y el título a buscar\n// // hacer el filtrado\n// // mostrar de a 6\n// // \n// // si es api y el texto de búsqueda es '' trae 100 de la ruta local / videogames\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[showMsg&&/*#__PURE__*/_jsx(\"h3\",{children:\" Seleccione primero un or\\xEDgen para su b\\xFAsqueda (API/DB)\"}),gettingG&&/*#__PURE__*/_jsxs(\"h3\",{children:[\" ...Obteniendo juegos de $\",origin]}),cleancards&&/*#__PURE__*/_jsxs(\"div\",{className:\"p_cards_area\",children:[/*#__PURE__*/_jsx(GameCard,{}),/*#__PURE__*/_jsx(GameCard,{})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"p_btn_area\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"p_button\",children:\"Anterior\"}),/*#__PURE__*/_jsx(\"button\",{className:\"p_button\",children:\"Siguiente\"})]})]});}","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/Pagination/Pagination.jsx"],"names":["React","useState","useEffect","useRef","useSelector","useDispatch","GameCard","getApiGames","getdbGames","initsearch","Pagination","dispatch","origin","state","searchOrig","apiGames","apigames","dbGames","dbgames","search_gen","searchgenre","search_t","stitle","sent","cleancards","showMsg","setShowMsg","gettingG","setGettingG","games","setGames","genFiltGames","setGenFiltGames","titFiltGames","setTitFiltGames","console","log","gRef","origRef"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './Pagination.css';\nimport GameCard from '../GameCard/GameCard.jsx';\nimport { getApiGames, getdbGames, initsearch } from '../../actions/actions';\n\nexport default function Pagination() {\n\n  const dispatch = useDispatch();\n\n  const origin = useSelector(state => state.searchOrig);\n  const apiGames = useSelector(state => state.apigames);\n  const dbGames = useSelector(state => state.dbgames);\n  const search_gen = useSelector(state => state.searchgenre);\n  const search_t = useSelector(state => state.stitle);\n  const sent = useSelector(state => state.initsearch);\n  const cleancards = useSelector(state => state.cleancards);\n\n  const [showMsg, setShowMsg] = useState(true);\n  const [gettingG, setGettingG] = useState(false);\n  const [games, setGames] = useState([]);\n  const [genFiltGames, setGenFiltGames] = useState(null);\n  const [titFiltGames, setTitFiltGames] = useState(null);\n\n  // Según el origen busca el arreglo de juegos\n  // una vez elegido origen desactiva el mje de sel. orig. y activa \n  // el mje de obteniendo juegos.\n  useEffect(() => {\n    if (origin === 'api') {\n      console.log('cargaste API');\n      //dispatch(getApiGames());\n      setShowMsg(false);// desactiva mje de seleccionar origen\n      setGettingG(true); // activa mje de obteniendo\n      //limpiar dbgames\n    }\n    if (origin === 'db') {\n      console.log('falta cargar videojuegos en la base de datos');\n      // dispatch(getdbGames());\n      setShowMsg(false);\n      setGettingG(true);\n      //limpiar apigames\n    }\n  }, [origin, dispatch])\n\n  // Cuando registre un cambio en el estado de mjes, que actualice\n  let gRef = useRef(games);\n  useEffect(() => {\n    //console.log(gRef.current)\n  }, [showMsg, gettingG])\n\n  let origRef = useRef(origin);\n  // Una vez cargados los juegos en el store desactiva mje \"buscando\"\n  // y guarda el arreglo en el estado local games.\n  // useEffect(() => {\n  //   setGettingG(false);\n  //   if (origRef.current === 'api') {\n  //     setGames(apiGames)\n  //     console.log(`(1)${apiGames}`);\n  //     console.log(`(2)${gRef.current}`);\n  //   }\n  //   if (origRef.current === 'db') {\n  //     setGames(dbGames)\n  //   }\n  // }, [apiGames, dbGames])\n\n  // useEffect(() => {\n  //   console.log(`(3)${gRef.current}`);\n  // }, [games])\n\n  // function genreFilter(arr, str) {\n  //   let newarr = arr.filter(e => e.genres.includes(str));\n  //   return newarr;\n  // }\n\n\n  // // Si se especifica un género para filtar llama a genreFilter\n  // useEffect(() => {\n  //   let newarr = genreFilter(gRef.current, search_gen);\n  //   setGenFiltGames(newarr);\n  //   setTitFiltGames(null); // Si cambio el género que quite cualquier selección previa guardada por título.\n  //   //limpiar area\n  // }, [search_gen])\n\n  // function titleFilter(arr, str) {\n  //   let newarr = arr.filter(e => e.name.includes(str));\n  //   setTitFiltGames(newarr);\n  //   return newarr;\n  // }\n\n  // let gfg = useRef(genFiltGames)\n  // let tref= useRef(search_t)\n  // let tfgRef = useRef(titFiltGames);\n  // useEffect(() => {\n  //   let newarr = titleFilter(gfg.current||gRef.current, tref.current);// Si no filtro por género que deje los de la api\n  //   setTitFiltGames(newarr);\n  //   // console.log(tfgRef.current);\n  //   // console.log(sent);\n  // }, [sent]) // en submit\n\n  // useEffect(()=>{\n  //   dispatch(initsearch(false)); // limpia????\n  //   // setShowMsg(true);// desactiva mje de seleccionar origen\n  //   // setSearchingG(false);\n  // },[cleancards,dispatch])\n\n  // // traerme el arreglo\n  // // traerme el género y el título a buscar\n  // // hacer el filtrado\n  // // mostrar de a 6\n  // // \n\n  // // si es api y el texto de búsqueda es '' trae 100 de la ruta local / videogames\n\n\n  return (\n    <div>\n      {showMsg && <h3> Seleccione primero un orígen para su búsqueda (API/DB)</h3>}\n      {gettingG && <h3> ...Obteniendo juegos de ${origin}</h3>}\n      {cleancards && <div className=\"p_cards_area\">\n        <GameCard />\n        <GameCard />\n      </div>}\n      <div className=\"p_btn_area\">\n        <button className=\"p_button\">Anterior</button>\n        <button className=\"p_button\">Siguiente</button>\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}