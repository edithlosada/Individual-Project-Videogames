{"ast":null,"code":"import fetch from 'node-fetch';\nexport const SET_NG_GEN_SEL = \"SET_NG_GEN_SEL\";\nexport const SET_NG_PTF_SEL = \"SET_NG_PTF_SEL\";\nexport const SEND_FORM = \"SEND_FORM\";\nexport const SEND_SEARCH = \"SEND_SEARCH\";\nexport const SET_ORIG = \"SET_ORIG\";\nexport const SET_ORDER_OPT = \"SET_ORDER_OPT\";\nexport const SET_SEARCH_GEN = \"SET_SEARCH_GEN\";\nexport const DB_GEN_OP_SEARCH = \"DB_GEN_OP_SEARCH\";\nexport const API_GEN_OP_SEARCH = \"API_GEN_OP_SEARCH\";\nexport const TITLE_SEARCH = \"TITLE_SEARCH\";\nexport const GET_API_GAMES = \"GET_API_GAMES\";\nexport const GET_DB_GAMES = \"GET_DB_GAMES\"; //---------New Game -----------\n\nexport function saveNgGenSel(arr) {\n  return {\n    type: SET_NG_GEN_SEL,\n    payload: arr\n  };\n}\nexport function saveNgPlatfSel(arr) {\n  return {\n    type: SET_NG_PTF_SEL,\n    payload: arr\n  };\n}\nexport function sendedForm(boolean) {\n  return {\n    type: SEND_FORM,\n    payload: boolean\n  };\n} //---------Search Game -----------\n\nexport function searchOptions(obj) {\n  return {\n    type: SEND_SEARCH,\n    payload: obj\n  };\n}\nexport function setOrigOpt(str) {\n  return {\n    type: SET_ORIG,\n    payload: str\n  };\n}\nexport function searchGenre(str) {\n  return {\n    type: SET_SEARCH_GEN,\n    payload: str\n  };\n}\nexport function setOrderOpt(str) {\n  return {\n    type: SET_ORDER_OPT,\n    payload: str\n  };\n}\nexport function dbGenOpSearch() {\n  return {\n    type: DB_GEN_OP_SEARCH,\n    payload: ''\n  }; // <---arreglar ''\n}\nexport function apiGenOpSearch() {\n  const genObjFromArr = arreglo => {\n    let arr = arreglo;\n    let gen = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      let obj = {\n        value: arr[i].name,\n        label: arr[i].name\n      };\n      gen.push(obj);\n    }\n\n    return gen;\n  };\n\n  return function (dispatch) {\n    fetch(\"https://api.rawg.io/api/genres?key=bb129cbd5b1b4968a7aec68ed0a7b91d\").then(response => {\n      return response.json();\n    }).then(json => {\n      return json.results;\n    }).then(async jarr => {\n      let narr = await genObjFromArr(jarr);\n      return narr; //<---\n    }).then(arr => {\n      dispatch({\n        type: API_GEN_OP_SEARCH,\n        payload: arr\n      });\n    });\n  };\n}\nexport function titleSearch(str) {\n  return {\n    type: TITLE_SEARCH,\n    payload: str\n  };\n} // Request a la API para traer los 100 primeros videojuegos.\n\nexport function getApiGames() {\n  return async function (dispatch) {\n    return fetch(\"http://localhost:3001/videogames\").then(response => response.json()).then(arr => {\n      console.log(arr);\n      dispatch({\n        type: GET_API_GAMES,\n        payload: arr\n      });\n    });\n  };\n} // Request a la DB para traer los 100 primeros videojuegos.\n\nexport function getDbGames() {\n  return async function (dispatch) {\n    return fetch(\"http://localhost:3001/dbvideogames\").then(response => response.json()).then(arr => {\n      console.log(arr);\n      dispatch({\n        type: GET_DB_GAMES,\n        payload: arr\n      });\n    });\n  };\n} // export function addNgGen(str) {\n//   return { type: ADD_NG_GEN, payload: str };\n// }\n// export function addNgPtf(str) {\n//   return { type: ADD_NG_PTF, payload: str };\n// }\n// Request a la API para traer las plataformas de videojuegos.\n// export function getApiPlatforms() {\n//   return function (dispatch) {\n//     return fetch(\"https://api.rawg.io/api/platforms\") //url de api con plataformas\n//       .then(response => response.json()) //aplica json y retorna\n//       .then(json => {\n//         let data = json.results;\n//         let apiPlatfs = data.map(e => e.name);\n//         return apiPlatfs;\n//       })\n//       .then(platfs => {\n//         dispatch({ type: GET_API_PLATFORMS, payload: platfs }) // lo manda al reducer\n//       });\n//   };\n// }\n// https://api.rawg.io/api/platforms\n//.results  --> arr =  [0,...,50]\n// arr[i].name  --> '...'","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/actions/actions.js"],"names":["fetch","SET_NG_GEN_SEL","SET_NG_PTF_SEL","SEND_FORM","SEND_SEARCH","SET_ORIG","SET_ORDER_OPT","SET_SEARCH_GEN","DB_GEN_OP_SEARCH","API_GEN_OP_SEARCH","TITLE_SEARCH","GET_API_GAMES","GET_DB_GAMES","saveNgGenSel","arr","type","payload","saveNgPlatfSel","sendedForm","boolean","searchOptions","obj","setOrigOpt","str","searchGenre","setOrderOpt","dbGenOpSearch","apiGenOpSearch","genObjFromArr","arreglo","gen","i","length","value","name","label","push","dispatch","then","response","json","results","jarr","narr","titleSearch","getApiGames","console","log","getDbGames"],"mappings":"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","sourcesContent":["import fetch from 'node-fetch';\nexport const SET_NG_GEN_SEL = \"SET_NG_GEN_SEL\";\nexport const SET_NG_PTF_SEL = \"SET_NG_PTF_SEL\";\nexport const SEND_FORM = \"SEND_FORM\";\nexport const SEND_SEARCH = \"SEND_SEARCH\";\nexport const SET_ORIG = \"SET_ORIG\";\nexport const SET_ORDER_OPT = \"SET_ORDER_OPT\";\nexport const SET_SEARCH_GEN = \"SET_SEARCH_GEN\";\nexport const DB_GEN_OP_SEARCH = \"DB_GEN_OP_SEARCH\";\nexport const API_GEN_OP_SEARCH = \"API_GEN_OP_SEARCH\";\nexport const TITLE_SEARCH = \"TITLE_SEARCH\";\nexport const GET_API_GAMES = \"GET_API_GAMES\";\nexport const GET_DB_GAMES = \"GET_DB_GAMES\";\n\n//---------New Game -----------\nexport function saveNgGenSel(arr) {\n  return { type: SET_NG_GEN_SEL, payload: arr };\n}\n\nexport function saveNgPlatfSel(arr) {\n  return { type: SET_NG_PTF_SEL, payload: arr };\n}\n\nexport function sendedForm(boolean) {\n  return { type: SEND_FORM, payload: boolean };\n}\n\n//---------Search Game -----------\n\nexport function searchOptions(obj) {\n  return { type: SEND_SEARCH, payload: obj };\n}\n\nexport function setOrigOpt(str) {\n  return { type: SET_ORIG, payload: str };\n}\n\nexport function searchGenre(str) {\n  return { type: SET_SEARCH_GEN, payload: str };\n}\n\nexport function setOrderOpt(str) {\n  return { type: SET_ORDER_OPT, payload: str };\n}\n\nexport function dbGenOpSearch() {\n  return { type: DB_GEN_OP_SEARCH, payload: '' };// <---arreglar ''\n}\n\nexport function apiGenOpSearch() {\n\n  const genObjFromArr = (arreglo) => {\n    let arr = arreglo;\n    let gen = [];\n    for (let i = 0; i < arr.length; i++) {\n      let obj = { value: arr[i].name, label: arr[i].name };\n      gen.push(obj);\n    }\n    return gen;\n  }\n\n  return function (dispatch) {\n    fetch(\"https://api.rawg.io/api/genres?key=bb129cbd5b1b4968a7aec68ed0a7b91d\")\n      .then(response => {\n        return response.json();\n      })\n      .then(json => {\n        return json.results;\n      })\n      .then(async jarr => {\n        let narr = await genObjFromArr(jarr);\n        return narr; //<---\n      })\n      .then(arr => {\n        dispatch({ type: API_GEN_OP_SEARCH, payload: arr })\n      })\n  }\n}\n\nexport function titleSearch(str) {\n  return { type: TITLE_SEARCH, payload: str };\n}\n\n// Request a la API para traer los 100 primeros videojuegos.\nexport function getApiGames() {\n  return async function (dispatch) {\n    return fetch(\"http://localhost:3001/videogames\")\n      .then(response => response.json()) \n      .then(arr => {\n        console.log(arr);\n        dispatch({ type: GET_API_GAMES, payload: arr });\n      })\n  }\n}\n\n// Request a la DB para traer los 100 primeros videojuegos.\nexport function getDbGames() {\n  return async function (dispatch) {\n    return fetch(\"http://localhost:3001/dbvideogames\")\n      .then(response => response.json()) \n      .then(arr => {\n        console.log(arr);\n        dispatch({ type: GET_DB_GAMES, payload: arr });\n      })\n  }\n}\n\n// export function addNgGen(str) {\n//   return { type: ADD_NG_GEN, payload: str };\n// }\n\n// export function addNgPtf(str) {\n//   return { type: ADD_NG_PTF, payload: str };\n// }\n\n// Request a la API para traer las plataformas de videojuegos.\n// export function getApiPlatforms() {\n//   return function (dispatch) {\n//     return fetch(\"https://api.rawg.io/api/platforms\") //url de api con plataformas\n//       .then(response => response.json()) //aplica json y retorna\n//       .then(json => {\n//         let data = json.results;\n//         let apiPlatfs = data.map(e => e.name);\n//         return apiPlatfs;\n//       })\n//       .then(platfs => {\n//         dispatch({ type: GET_API_PLATFORMS, payload: platfs }) // lo manda al reducer\n//       });\n//   };\n// }\n\n// https://api.rawg.io/api/platforms\n//.results  --> arr =  [0,...,50]\n// arr[i].name  --> '...'"]},"metadata":{},"sourceType":"module"}