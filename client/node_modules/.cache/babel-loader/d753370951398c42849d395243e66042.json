{"ast":null,"code":"var _jsxFileName = \"/home/edith/Desktop/FT10-PI-Videogames/client/src/components/GamesGetter/GamesGetter.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './GamesGetter.css';\nimport GamesToShow from '../GamesToShow/GamesToShow.jsx';\nimport { getApiGames, getDbGames, initsearch, setShowmsg, setGamesToShow } from '../../actions/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GamesGetter() {\n  _s();\n\n  let dispatch = useDispatch();\n  let inits = useSelector(state => state.initsearch);\n  let cleans = useSelector(state => state.cleansearch);\n  let orig = useSelector(state => state.searchOrig);\n  let show = useSelector(state => state.showmsg);\n  let apig = useSelector(state => state.apigames);\n  let dbg = useSelector(state => state.dbgames);\n  let sgenre = useSelector(state => state.searchgenre);\n  let st = useSelector(state => state.stitle);\n  let [gettingG, setGettingG] = useState(false);\n  let [games, setGames] = useState(null);\n  let [genFiltGames, setGenFiltGames] = useState(null);\n  let [titFiltGames, setTitFiltGames] = useState(null);\n  let [cardnum, setCardnum] = useState(6);\n  useEffect(() => {}, [show, inits]); // Según el origen manda a buscar el arreglo de juegos \n  // donde corresponda y admninistra mjes.\n\n  useEffect(() => {\n    if (orig) {\n      setGames(null);\n\n      if (orig === 'API') {\n        //console.log('cargaste API');\n        dispatch(getApiGames()); // <<-- Sacar!!\n\n        dispatch(setShowmsg(false));\n        setGettingG(true);\n      }\n\n      if (orig === 'DB') {\n        dispatch(getDbGames()); // <<-- Sacar!!\n\n        dispatch(setShowmsg(false));\n        setGettingG(true);\n      }\n    }\n  }, [orig, dispatch, setGettingG]); // Cuando obtiene el arreglo de juegos lo guarda localmente.\n  // y administra mjes\n\n  useEffect(() => {\n    if (orig) {\n      if (orig === 'API') {\n        if (apig) {\n          setGames(apig);\n        }\n      }\n\n      if (orig === 'DB') {\n        if (dbg) {\n          setGames(dbg);\n        }\n      }\n    }\n  }, [orig, apig, dbg, setGames]);\n  useEffect(() => {}, [gettingG]); // Si se filtra por género reduce la búsqueda y guarda lo obtenido\n  // en el estado genFiltGames.\n\n  useEffect(() => {\n    if (games) {\n      // console.log(games);\n      setGettingG(false);\n\n      if (sgenre) {\n        let newarr = games.filter(e => e.genres.includes(sgenre));\n        setGenFiltGames(newarr);\n      }\n\n      setTitFiltGames(null); // Si cambio el género que quite cualquier selección previa guardada por título.\n\n      dispatch(initsearch(false)); // Cancela cualquier búsqueda anterior para poder escribir.\n    }\n  }, [sgenre, games, dispatch, setGettingG]); // Cuando presiona \"buscar\" filtra lo que ya tenía según el título\n\n  useEffect(() => {\n    //console.log(genFiltGames); //........\n    if (inits) {\n      // Si presionó/está en buscar\n      let arr = games; // arreglo obtenido según orígen\n\n      if (!sgenre) {\n        console.log('no había género de búsqueda');\n      } else {\n        // si filtró x género usa el arreglo ya filtrado\n        // console.log(genFiltGames);\n        arr = genFiltGames;\n      }\n\n      if (!st) {\n        // si no ingreso texto trae todo\n        // console.log('no había texto de búsqueda');\n        // console.log(genFiltGames); //........\n        setTitFiltGames(arr);\n      } else {\n        // console.log('search title is' + st);\n        let newarr = arr.filter(e => e.name.toLowerCase().includes(st.toLowerCase()));\n        setTitFiltGames(newarr);\n      }\n    }\n  }, [inits, games, sgenre, genFiltGames, st]); // agregué games and sgenre\n\n  useEffect(() => {\n    if (cleans) {\n      setTitFiltGames([]);\n    }\n  }, [cleans]);\n  useEffect(() => {\n    // console.log(titFiltGames);\n    dispatch(setGamesToShow(titFiltGames));\n  }, [titFiltGames, dispatch]);\n\n  function handleChange(e) {}\n\n  useEffect(() => {}, [cardnum]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p_cards_area\",\n    children: [show && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \" At first choose a search origin (API/DB)...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 16\n    }, this), gettingG && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\" ...Getting games from \", orig, \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 20\n    }, this), !show && !gettingG && /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"ppage\",\n        className: \"perpage_label\",\n        children: \"Per page: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"ppage\",\n        className: \"perpage\",\n        defaultValue: \"6\",\n        min: \"6\",\n        max: \"20\",\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 32\n    }, this), /*#__PURE__*/_jsxDEV(GamesToShow, {\n      perpage: 'lalala'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GamesGetter, \"LMJCNzT6bJ09LBYY8moR9DeFZIg=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = GamesGetter;\n\nvar _c;\n\n$RefreshReg$(_c, \"GamesGetter\");","map":{"version":3,"sources":["/home/edith/Desktop/FT10-PI-Videogames/client/src/components/GamesGetter/GamesGetter.jsx"],"names":["React","useState","useEffect","useSelector","useDispatch","GamesToShow","getApiGames","getDbGames","initsearch","setShowmsg","setGamesToShow","GamesGetter","dispatch","inits","state","cleans","cleansearch","orig","searchOrig","show","showmsg","apig","apigames","dbg","dbgames","sgenre","searchgenre","st","stitle","gettingG","setGettingG","games","setGames","genFiltGames","setGenFiltGames","titFiltGames","setTitFiltGames","cardnum","setCardnum","newarr","filter","e","genres","includes","arr","console","log","name","toLowerCase","handleChange"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './GamesGetter.css';\nimport GamesToShow from '../GamesToShow/GamesToShow.jsx';\nimport { getApiGames, getDbGames, initsearch, setShowmsg, setGamesToShow } from '../../actions/actions';\n\nexport default function GamesGetter() {\n\n  let dispatch = useDispatch();\n\n  let inits = useSelector(state => state.initsearch);\n  let cleans = useSelector(state => state.cleansearch);\n  let orig = useSelector(state => state.searchOrig);\n  let show = useSelector(state => state.showmsg);\n  let apig = useSelector(state => state.apigames);\n  let dbg = useSelector(state => state.dbgames);\n  let sgenre = useSelector(state => state.searchgenre);\n  let st = useSelector(state => state.stitle);\n\n  let [gettingG, setGettingG] = useState(false);\n  let [games, setGames] = useState(null);\n  let [genFiltGames, setGenFiltGames] = useState(null);\n  let [titFiltGames, setTitFiltGames] = useState(null);\n\n  let [cardnum, setCardnum] = useState(6);\n\n  useEffect(() => {\n  }, [show, inits]);\n\n  // Según el origen manda a buscar el arreglo de juegos \n  // donde corresponda y admninistra mjes.\n  useEffect(() => {\n    if (orig) {\n      setGames(null);\n      if (orig === 'API') {\n        //console.log('cargaste API');\n        dispatch(getApiGames());  // <<-- Sacar!!\n        dispatch(setShowmsg(false));\n        setGettingG(true);\n      }\n      if (orig === 'DB') {\n        dispatch(getDbGames());  // <<-- Sacar!!\n        dispatch(setShowmsg(false));\n        setGettingG(true);\n      }\n    }\n  }, [orig, dispatch, setGettingG]);\n\n\n  // Cuando obtiene el arreglo de juegos lo guarda localmente.\n  // y administra mjes\n  useEffect(() => {\n    if (orig) {\n      if (orig === 'API') {\n        if (apig) {\n          setGames(apig);\n        }\n      }\n      if (orig === 'DB') {\n        if (dbg) {\n          setGames(dbg);\n        }\n      }\n    }\n  }, [orig, apig, dbg, setGames]);\n\n  useEffect(() => {\n  }, [gettingG])\n\n  // Si se filtra por género reduce la búsqueda y guarda lo obtenido\n  // en el estado genFiltGames.\n  useEffect(() => {\n    if (games) {\n      // console.log(games);\n      setGettingG(false);\n      if (sgenre) {\n        let newarr = games.filter(e => e.genres.includes(sgenre));\n        setGenFiltGames(newarr);\n      }\n      setTitFiltGames(null); // Si cambio el género que quite cualquier selección previa guardada por título.\n      dispatch(initsearch(false)); // Cancela cualquier búsqueda anterior para poder escribir.\n    }\n  }, [sgenre, games, dispatch, setGettingG])\n\n  // Cuando presiona \"buscar\" filtra lo que ya tenía según el título\n  useEffect(() => {\n\n    //console.log(genFiltGames); //........\n    if (inits) { // Si presionó/está en buscar\n      let arr = games; // arreglo obtenido según orígen\n      if (!sgenre) {\n        console.log('no había género de búsqueda');\n      } else {// si filtró x género usa el arreglo ya filtrado\n        // console.log(genFiltGames);\n        arr = genFiltGames;\n      }\n      if (!st) {// si no ingreso texto trae todo\n        // console.log('no había texto de búsqueda');\n        // console.log(genFiltGames); //........\n        setTitFiltGames(arr);\n      } else {\n        // console.log('search title is' + st);\n        let newarr = arr.filter(e => e.name.toLowerCase().includes(st.toLowerCase()));\n        setTitFiltGames(newarr);\n      }\n    }\n  }, [inits, games, sgenre, genFiltGames, st]) // agregué games and sgenre\n\n  useEffect(() => {\n    if (cleans) {\n      setTitFiltGames([]);\n    }\n  }, [cleans])\n\n  useEffect(() => {\n    // console.log(titFiltGames);\n    dispatch(setGamesToShow(titFiltGames));\n  }, [titFiltGames, dispatch])\n\n  function handleChange(e){\n\n  }\n\n  useEffect(() => {\n  }, [cardnum]);\n\n\n  return (\n    <div className=\"p_cards_area\">\n      {show && <h3> At first choose a search origin (API/DB)...</h3>}\n      {gettingG && <h3> ...Getting games from {orig}.</h3>}\n      {(!show && !gettingG )&& <form>\n        <label htmlFor=\"ppage\" className=\"perpage_label\">Per page: </label>\n        <input type=\"number\" id=\"ppage\" className=\"perpage\" defaultValue=\"6\" min=\"6\" max=\"20\" onChange={handleChange}/>\n      </form>}\n      <GamesToShow perpage={'lalala'}/>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}