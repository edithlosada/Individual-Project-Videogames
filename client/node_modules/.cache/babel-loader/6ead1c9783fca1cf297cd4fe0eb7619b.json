{"ast":null,"code":"var _jsxFileName = \"/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GamesGetter/GamesGetter.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './GamesGetter.css';\nimport GamesToShow from '../GamesToShow/GamesToShow.jsx'; // import GameCard from '../GameCard/GameCard.jsx';\n\nimport { getApiGames, getDbGames, initsearch, setShowmsg, setGamesToShow } from '../../actions/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GamesGetter() {\n  _s();\n\n  let dispatch = useDispatch();\n  let inits = useSelector(state => state.initsearch);\n  let cleans = useSelector(state => state.cleansearch);\n  let orig = useSelector(state => state.searchOrig);\n  let show = useSelector(state => state.showmsg);\n  let apig = useSelector(state => state.apigames);\n  let apigRef = useRef(apig); //---\n\n  let dbg = useSelector(state => state.dbgames);\n  let dbgRef = useRef(dbg); //---\n\n  let sgenre = useSelector(state => state.searchgenre);\n  let st = useSelector(state => state.stitle);\n  let stRef = useRef(st); //---\n\n  let gamests = useSelector(state => state.gamestoshow); // juegos para mostrar\n  //let [showMsg, setShowMsg] = useState(true); //showmsg setShowmsg\n\n  let [gettingG, setGettingG] = useState(false);\n  let [games, setGames] = useState([]);\n  let gRef = useRef(games); //---\n\n  let [genFiltGames, setGenFiltGames] = useState(null);\n  let gfgRef = useRef(genFiltGames); //---\n\n  let [titFiltGames, setTitFiltGames] = useState(null);\n  let tfgRef = useRef(titFiltGames); //---\n  // Según el origen manda a buscar el arreglo de juegos \n  // donde corresponda y admninistra mjes.\n\n  useEffect(() => {\n    setGames([]);\n\n    if (orig === 'API') {\n      //console.log('cargaste API');\n      dispatch(getApiGames()); // <<-- Sacar!!\n\n      dispatch(setShowmsg(false));\n      setGettingG(true);\n    }\n\n    if (orig === 'base de datos') {\n      dispatch(getDbGames()); // <<-- Sacar!!\n\n      dispatch(setShowmsg(false));\n      setGettingG(true);\n    }\n  }, [orig, dispatch]); // Cuando obtiene el arreglo de juegos lo guarda localmente.\n  // y administra mje-\n  // useEffect(() => {\n  //   if (orig === 'API') {\n  //     setGettingG(false);\n  //     console.log(apigRef.current);\n  //     setGames(apigRef.current);\n  //   }\n  //   if (orig === 'base de datos') {\n  //     setGettingG(false);\n  //     console.log(dbgRef.current);\n  //     setGames(dbgRef.current);\n  //   }\n  // }, [gettingG, orig]); //sacar gettingG y dejar apiG / dbg\n\n  useEffect(() => {\n    if (orig === 'API') {\n      if (apig) {\n        setGames(apig);\n      }\n    }\n\n    if (orig === 'base de datos') {\n      if (dbg) {\n        setGames(dbg);\n      }\n    }\n\n    setGettingG(false);\n  }, [orig, apig, dbg]); // Si se filtra por género reduce la búsqueda y guarda lo obtenido\n  // en el estado genFiltGames.\n\n  useEffect(() => {\n    if (games) {\n      let newarr = games.filter(e => e.genres.includes(sgenre));\n      setGenFiltGames(newarr);\n      setTitFiltGames(null); // Si cambio el género que quite cualquier selección previa guardada por título.\n\n      dispatch(initsearch(false)); // Cancela cualquier búsqueda anterior para poder escribir.\n      // console.log('cleans,'+cleans+', inits,' +inits)\n    }\n  }, [sgenre, games, dispatch]); // useEffect(() => {\n  //   console.log(genFiltGames); //........\n  // }, [genFiltGames])\n  // Cuando presiona \"buscar\" filtra lo que ya tenía según el título\n\n  useEffect(() => {\n    //console.log(genFiltGames); //........\n    if (inits) {\n      // Si presionó/está en buscar\n      let arr = games; // arreglo obtenido según orígen\n\n      if (!sgenre) {\n        console.log('no había género de búsqueda');\n      } else {\n        // si filtró x género usa el arreglo ya filtrado\n        console.log(genFiltGames);\n        arr = genFiltGames;\n      }\n\n      if (!st) {\n        // si no ingreso texto trae todo\n        console.log('no había texto de búsqueda');\n        console.log(genFiltGames); //........\n\n        setTitFiltGames(arr);\n      } else {\n        console.log('search title is' + st);\n        let newarr = arr.filter(e => e.name.toLowerCase().includes(st.toLowerCase()));\n        setTitFiltGames(newarr);\n      }\n    }\n  }, [inits, games, sgenre, genFiltGames, st]); // agregué games and sgenre\n\n  useEffect(() => {\n    if (cleans) {\n      setTitFiltGames([]);\n    }\n  }, [cleans]);\n  useEffect(() => {\n    console.log(titFiltGames);\n    dispatch(setGamesToShow(titFiltGames)); // console.log('(1)');\n  }, [titFiltGames, dispatch]); // useEffect(() => {// borrar x qe es del store\n  // }, [gamests])\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p_cards_area\",\n    children: [show && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \" Seleccione primero un or\\xEDgen para su b\\xFAsqueda (API/DB)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 18\n    }, this), gettingG && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\" ...Obteniendo juegos de la \", orig, \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(GamesToShow, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 7\n  }, this);\n}\n\n_s(GamesGetter, \"OyAbyfi0m5n7Cz5t7NXEBj6vdYI=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = GamesGetter;\n\nvar _c;\n\n$RefreshReg$(_c, \"GamesGetter\");","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GamesGetter/GamesGetter.jsx"],"names":["React","useState","useEffect","useRef","useSelector","useDispatch","GamesToShow","getApiGames","getDbGames","initsearch","setShowmsg","setGamesToShow","GamesGetter","dispatch","inits","state","cleans","cleansearch","orig","searchOrig","show","showmsg","apig","apigames","apigRef","dbg","dbgames","dbgRef","sgenre","searchgenre","st","stitle","stRef","gamests","gamestoshow","gettingG","setGettingG","games","setGames","gRef","genFiltGames","setGenFiltGames","gfgRef","titFiltGames","setTitFiltGames","tfgRef","newarr","filter","e","genres","includes","arr","console","log","name","toLowerCase"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './GamesGetter.css';\nimport GamesToShow from '../GamesToShow/GamesToShow.jsx';\n// import GameCard from '../GameCard/GameCard.jsx';\nimport { getApiGames, getDbGames, initsearch, setShowmsg, setGamesToShow } from '../../actions/actions';\n\nexport default function GamesGetter() {\n\n  let dispatch = useDispatch();\n\n  let inits = useSelector(state => state.initsearch);\n  let cleans = useSelector(state => state.cleansearch);\n  let orig = useSelector(state => state.searchOrig);\n  let show = useSelector(state => state.showmsg);\n  let apig = useSelector(state => state.apigames);\n  let apigRef = useRef(apig); //---\n  let dbg = useSelector(state => state.dbgames);\n  let dbgRef = useRef(dbg); //---\n  let sgenre = useSelector(state => state.searchgenre);\n  let st = useSelector(state => state.stitle);\n  let stRef = useRef(st); //---\n  let gamests = useSelector(state => state.gamestoshow); // juegos para mostrar\n\n  //let [showMsg, setShowMsg] = useState(true); //showmsg setShowmsg\n  let [gettingG, setGettingG] = useState(false);\n  let [games, setGames] = useState([]);\n  let gRef = useRef(games); //---\n  let [genFiltGames, setGenFiltGames] = useState(null);\n  let gfgRef = useRef(genFiltGames); //---\n  let [titFiltGames, setTitFiltGames] = useState(null);\n  let tfgRef = useRef(titFiltGames); //---\n\n  // Según el origen manda a buscar el arreglo de juegos \n  // donde corresponda y admninistra mjes.\n  useEffect(() => {\n    setGames([]);\n    if (orig === 'API') {\n      //console.log('cargaste API');\n      dispatch(getApiGames());  // <<-- Sacar!!\n      dispatch(setShowmsg(false));\n      setGettingG(true);\n    }\n    if (orig === 'base de datos') {\n      dispatch(getDbGames());  // <<-- Sacar!!\n      dispatch(setShowmsg(false));\n      setGettingG(true);\n    }\n  }, [orig, dispatch]);\n\n  // Cuando obtiene el arreglo de juegos lo guarda localmente.\n  // y administra mje-\n  // useEffect(() => {\n  //   if (orig === 'API') {\n  //     setGettingG(false);\n  //     console.log(apigRef.current);\n  //     setGames(apigRef.current);\n  //   }\n  //   if (orig === 'base de datos') {\n  //     setGettingG(false);\n  //     console.log(dbgRef.current);\n  //     setGames(dbgRef.current);\n  //   }\n  // }, [gettingG, orig]); //sacar gettingG y dejar apiG / dbg\n\n\n  useEffect(() => {\n    if (orig === 'API') {\n      if (apig) {\n        setGames(apig);\n      }\n    }\n    if (orig === 'base de datos') {\n      if (dbg) {\n        setGames(dbg);\n      }\n    }\n    setGettingG(false);\n    }, [orig, apig, dbg]);\n\n\n\n\n    // Si se filtra por género reduce la búsqueda y guarda lo obtenido\n    // en el estado genFiltGames.\n    useEffect(() => {\n      if (games) {\n        let newarr = games.filter(e => e.genres.includes(sgenre));\n        setGenFiltGames(newarr);\n        setTitFiltGames(null); // Si cambio el género que quite cualquier selección previa guardada por título.\n        dispatch(initsearch(false)); // Cancela cualquier búsqueda anterior para poder escribir.\n        // console.log('cleans,'+cleans+', inits,' +inits)\n      }\n    }, [sgenre, games, dispatch])\n\n    // useEffect(() => {\n    //   console.log(genFiltGames); //........\n    // }, [genFiltGames])\n\n    // Cuando presiona \"buscar\" filtra lo que ya tenía según el título\n    useEffect(() => {\n      //console.log(genFiltGames); //........\n      if (inits) { // Si presionó/está en buscar\n        let arr = games; // arreglo obtenido según orígen\n        if (!sgenre) {\n          console.log('no había género de búsqueda');\n        } else {// si filtró x género usa el arreglo ya filtrado\n          console.log(genFiltGames);\n          arr = genFiltGames;\n        }\n        if (!st) {// si no ingreso texto trae todo\n          console.log('no había texto de búsqueda');\n          console.log(genFiltGames); //........\n          setTitFiltGames(arr);\n        } else {\n          console.log('search title is' + st);\n          let newarr = arr.filter(e => e.name.toLowerCase().includes(st.toLowerCase()));\n          setTitFiltGames(newarr);\n        }\n      }\n    }, [inits, games, sgenre, genFiltGames, st]) // agregué games and sgenre\n\n    useEffect(() => {\n      if (cleans) {\n        setTitFiltGames([]);\n      }\n    }, [cleans])\n\n    useEffect(() => {\n      console.log(titFiltGames);\n      dispatch(setGamesToShow(titFiltGames));\n      // console.log('(1)');\n    }, [titFiltGames, dispatch])\n\n    // useEffect(() => {// borrar x qe es del store\n    // }, [gamests])\n\n    return (\n      <div className=\"p_cards_area\">\n        {show && <h3> Seleccione primero un orígen para su búsqueda (API/DB)</h3>}\n        {gettingG && <h3> ...Obteniendo juegos de la {orig}.</h3>}\n        <GamesToShow />\n      </div>\n    )\n  }\n"]},"metadata":{},"sourceType":"module"}