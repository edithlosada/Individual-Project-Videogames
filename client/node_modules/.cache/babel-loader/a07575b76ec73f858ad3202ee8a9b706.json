{"ast":null,"code":"var _jsxFileName = \"/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GamesToShow/GamesToShow.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport './GamesToShow.css';\nimport GameCard from '../GameCard/GameCard.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function GamesToShow() {\n  _s();\n\n  let inits = useSelector(state => state.initsearch);\n  let titFiltGames = useSelector(state => state.gamestoshow); // juegos para mostrar\n\n  let [pageCount, setPageCount] = useState(null);\n  let [currentPage, setCurrentPage] = useState(0); //inicialmente la primer página\n\n  let [currentPageArr, setCurrentPArr] = useState([]);\n  let [pages, setPages] = useState(null);\n  let PER_PAGE = 3;\n  useEffect(() => {\n    if (titFiltGames) {\n      console.log('Toy acá 1');\n      let n = titFiltGames.length; // Nro de juegos a mostrar\n\n      let pc = Math.ceil(n / PER_PAGE); // Nro de páginas a mostrar\n\n      setPageCount(pc);\n    }\n  }, [titFiltGames, PER_PAGE]);\n  useEffect(() => {\n    if (pageCount) {\n      // Función que crea botones para cáda página\n      function pagesNumArr(pageCount) {\n        let arr = [];\n\n        for (let i = 1; i <= pageCount; i++) {\n          arr.push(i);\n        }\n\n        return arr;\n      }\n\n      let pages = pagesNumArr(pageCount);\n      setPages(pages);\n    }\n  }, [pageCount]);\n  useEffect(() => {\n    if (pages) {\n      // Función que obtiene el subarreglo de juegos a mostrar según la pagina\n      // en la que se encuentre.\n      function inpageshow(currentPage, perpage, titFiltGames) {\n        let offset = currentPage * perpage;\n        let currentPageArr = titFiltGames.slice(offset, offset + PER_PAGE);\n        console.log(currentPageArr);\n        setCurrentPArr([...currentPageArr]);\n      }\n\n      if (titFiltGames) {\n        console.log('Toy acá 2');\n        inpageshow(currentPage, PER_PAGE, titFiltGames);\n      }\n    }\n  }, [currentPage, PER_PAGE, titFiltGames, pages]);\n\n  function handlePrev() {\n    if (currentPage != 0) {\n      setCurrentPage(currentPage - 1);\n    }\n  }\n\n  const handleNext = e => {\n    console.log(currentPage);\n    console.log(pageCount);\n\n    if (currentPage < pageCount - 1) {\n      setCurrentPage(currentPage + 1);\n    }\n  };\n\n  function handlePage(e) {\n    setCurrentPage(e.target.value - 1);\n    console.log('current page is' + currentPage);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: inits && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cardcont\",\n        children: currentPageArr && currentPageArr.map((g, i) => /*#__PURE__*/_jsxDEV(GameCard, {\n          id: g.apId,\n          name: g.name,\n          img: g.img_url,\n          genres: g.genres\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p_btn_area\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"p_button\",\n          onClick: handlePrev,\n          children: \"Anterior\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), pages && pages.map((p, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"op_button\",\n          onClick: handlePage,\n          value: p,\n          children: [\" \", p, \" \"]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"p_button\",\n          onClick: handleNext,\n          children: \"Siguiente\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GamesToShow, \"gzPbSkva221kCWCKJJwcCJL2uiE=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = GamesToShow;\n\nvar _c;\n\n$RefreshReg$(_c, \"GamesToShow\");","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GamesToShow/GamesToShow.jsx"],"names":["React","useState","useEffect","useSelector","GameCard","GamesToShow","inits","state","initsearch","titFiltGames","gamestoshow","pageCount","setPageCount","currentPage","setCurrentPage","currentPageArr","setCurrentPArr","pages","setPages","PER_PAGE","console","log","n","length","pc","Math","ceil","pagesNumArr","arr","i","push","inpageshow","perpage","offset","slice","handlePrev","handleNext","e","handlePage","target","value","map","g","apId","name","img_url","genres","p"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport './GamesToShow.css';\nimport GameCard from '../GameCard/GameCard.jsx';\n\nexport default function GamesToShow() {\n\n  let inits = useSelector(state => state.initsearch);\n  let titFiltGames = useSelector(state => state.gamestoshow); // juegos para mostrar\n\n  let [pageCount, setPageCount] = useState(null);\n  let [currentPage, setCurrentPage] = useState(0); //inicialmente la primer página\n  let [currentPageArr, setCurrentPArr] = useState([]);\n  let [pages, setPages] = useState(null);\n  let PER_PAGE = 3;\n\n  useEffect(() => {\n    if (titFiltGames) {\n      console.log('Toy acá 1')\n      let n = titFiltGames.length; // Nro de juegos a mostrar\n      let pc = Math.ceil(n / PER_PAGE); // Nro de páginas a mostrar\n      setPageCount(pc);\n    }\n  }, [titFiltGames, PER_PAGE])\n\n  useEffect(() => {\n    if(pageCount){\n      // Función que crea botones para cáda página\n      function pagesNumArr(pageCount) {\n        let arr = [];\n        for (let i = 1; i <= pageCount; i++) {\n          arr.push(i);\n        }\n        return arr;\n      }\n      let pages = pagesNumArr(pageCount);\n      setPages(pages);\n    }\n  }, [pageCount])\n\n  useEffect(() => {\n    if(pages){\n      // Función que obtiene el subarreglo de juegos a mostrar según la pagina\n      // en la que se encuentre.\n      function inpageshow(currentPage, perpage, titFiltGames) {\n        let offset = currentPage * perpage;\n        let currentPageArr = titFiltGames.slice(offset, offset + PER_PAGE)\n        console.log(currentPageArr);\n        setCurrentPArr([...currentPageArr]);\n      }\n\n      if(titFiltGames){\n      console.log('Toy acá 2')\n      inpageshow(currentPage, PER_PAGE, titFiltGames);\n      }\n    }\n  }, [currentPage, PER_PAGE, titFiltGames,pages])\n\n  function handlePrev() {\n    if (currentPage != 0) {\n      setCurrentPage(currentPage - 1);\n    }\n  }\n\n  const handleNext = (e) => {\n    console.log(currentPage);\n    console.log(pageCount);\n    if (currentPage < pageCount - 1) {\n      setCurrentPage(currentPage + 1);\n    }\n  }\n\n  function handlePage(e) {\n    setCurrentPage(e.target.value - 1);\n    console.log('current page is' + currentPage);\n  }\n\n  return (\n    <div>\n      {inits && <>\n        {/* <GameCard key={1} id={3498} name={\"Grand Theft Auto V\"} genres={\"Action,Adventure,Indie, Puzzle,Platformer\"} /> */}\n        <div className=\"cardcont\" >\n          {currentPageArr && currentPageArr.map((g, i) => (\n            <GameCard key={i} id={g.apId} name={g.name} img={g.img_url} genres={g.genres} />\n          ))}\n        </div>\n        <div className=\"p_btn_area\">\n          <button className=\"p_button\" onClick={handlePrev}>Anterior</button>\n          {pages && pages.map((p, i) => (\n            <button key={i} className=\"op_button\" onClick={handlePage} value={p}> {p} </button>\n          ))}\n          <button className=\"p_button\" onClick={handleNext}>Siguiente</button>\n        </div>\n      </>}\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}