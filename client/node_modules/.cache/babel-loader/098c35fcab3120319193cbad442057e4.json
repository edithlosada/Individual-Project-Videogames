{"ast":null,"code":"import _slicedToArray from\"/home/edith/Desktop/PI/FT10-PI-Videogames/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,useRef}from'react';import{useSelector,useDispatch}from'react-redux';import'./GenreSelect.css';import{dbGenOpSearch,apiGenOpSearch,searchGenre}from'../../actions/actions';//used on SearchMenu\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function GenreSelect(){var dispatch=useDispatch();var origin=useSelector(function(state){return state.searchOrig;});// <--Busca el origen del store.\nvar apigenres=useSelector(function(state){return state.apigenopts;});var apigenRef=useRef(apigenres);//<--para evitar missing dependency en useEffect\nvar dbgenres=useSelector(function(state){return state.dbgenopts;});var dbgenRef=useRef(dbgenres);var _useState=useState(''),_useState2=_slicedToArray(_useState,2),genres=_useState2[0],setGenres=_useState2[1];// Cada vez que cambie el origen guarda el estado en el store\n// y setea genres con los valores correspondientes\nuseEffect(function(){var genreopts=function genreopts(orig,apig,dbg){if(orig==='base de datos'){//console.log(orig);\n//dispatch(dbGenOpSearch()); // <-- Hacer...\nsetGenres(dbg);}if(orig==='API'){//console.log(orig);\ndispatch(apiGenOpSearch());// setGenres(apig);\n//console.log(apig);\n}};genreopts(origin,apigenRef.current,dbgenRef.current);// <-- referencia a apigenres\n},[origin,dispatch]);//Cada vez que cambie el origen guarda el estado en el store\nuseEffect(function(){setGenres(apigenres);},[apigenres]);useEffect(function(){setGenres(dbgenres);},[dbgenres]);// Manda al store el género a buscar\nfunction handleChange(e){dispatch(searchGenre(e.target.value));}return/*#__PURE__*/_jsx(\"div\",{className:\"gcont\",children:/*#__PURE__*/_jsxs(\"select\",{name:\"genres\",className:\"gselect\",value:genres,onChange:handleChange,children:[/*#__PURE__*/_jsx(\"option\",{defaultValue:true,children:\"G\\xE9nero:\"}),genres&&genres.map(function(option,index){return/*#__PURE__*/_jsx(\"option\",{value:option.value,children:option.label},index);})]})});}","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GenreSelect/GenreSelect.jsx"],"names":["React","useState","useEffect","useRef","useSelector","useDispatch","dbGenOpSearch","apiGenOpSearch","searchGenre","GenreSelect","dispatch","origin","state","searchOrig","apigenres","apigenopts","apigenRef","dbgenres","dbgenopts","dbgenRef","genres","setGenres","genreopts","orig","apig","dbg","current","handleChange","e","target","value","map","option","index","label"],"mappings":"uKAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,CAAqCC,MAArC,KAAmD,OAAnD,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,MAAO,mBAAP,CACA,OAASC,aAAT,CAAwBC,cAAxB,CAAwCC,WAAxC,KAA2D,uBAA3D,CAEA;wFAEA,cAAe,SAASC,CAAAA,WAAT,EAAuB,CAEpC,GAAIC,CAAAA,QAAQ,CAAGL,WAAW,EAA1B,CACA,GAAIM,CAAAA,MAAM,CAAGP,WAAW,CAAC,SAAAQ,KAAK,QAAIA,CAAAA,KAAK,CAACC,UAAV,EAAN,CAAxB,CAAoD;AACpD,GAAIC,CAAAA,SAAS,CAAGV,WAAW,CAAC,SAAAQ,KAAK,QAAIA,CAAAA,KAAK,CAACG,UAAV,EAAN,CAA3B,CACA,GAAIC,CAAAA,SAAS,CAAGb,MAAM,CAACW,SAAD,CAAtB,CAAkC;AAClC,GAAIG,CAAAA,QAAQ,CAAGb,WAAW,CAAC,SAAAQ,KAAK,QAAIA,CAAAA,KAAK,CAACM,SAAV,EAAN,CAA1B,CACA,GAAIC,CAAAA,QAAQ,CAAGhB,MAAM,CAACc,QAAD,CAArB,CAPoC,cASVhB,QAAQ,CAAC,EAAD,CATE,wCAS/BmB,MAT+B,eASvBC,SATuB,eAWpC;AACA;AACAnB,SAAS,CAAC,UAAM,CACd,GAAIoB,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,IAAD,CAAOC,IAAP,CAAaC,GAAb,CAAqB,CACnC,GAAIF,IAAI,GAAK,eAAb,CAA8B,CAC5B;AACA;AACAF,SAAS,CAACI,GAAD,CAAT,CACD,CACD,GAAIF,IAAI,GAAK,KAAb,CAAoB,CAClB;AACAb,QAAQ,CAACH,cAAc,EAAf,CAAR,CACA;AACA;AACD,CACF,CAZD,CAaAe,SAAS,CAACX,MAAD,CAASK,SAAS,CAACU,OAAnB,CAA4BP,QAAQ,CAACO,OAArC,CAAT,CAAuD;AACxD,CAfQ,CAeN,CAACf,MAAD,CAASD,QAAT,CAfM,CAAT,CAiBA;AACAR,SAAS,CAAC,UAAM,CACdmB,SAAS,CAACP,SAAD,CAAT,CACD,CAFQ,CAEN,CAACA,SAAD,CAFM,CAAT,CAIAZ,SAAS,CAAC,UAAM,CACdmB,SAAS,CAACJ,QAAD,CAAT,CACD,CAFQ,CAEN,CAACA,QAAD,CAFM,CAAT,CAIA;AACA,QAASU,CAAAA,YAAT,CAAsBC,CAAtB,CAAyB,CACvBlB,QAAQ,CAACF,WAAW,CAACoB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAZ,CAAR,CACD,CAED,mBACE,YAAK,SAAS,CAAC,OAAf,uBACE,gBACE,IAAI,CAAC,QADP,CAEE,SAAS,CAAC,SAFZ,CAGE,KAAK,CAAEV,MAHT,CAIE,QAAQ,CAAEO,YAJZ,wBAME,eAAQ,YAAY,KAApB,wBANF,CAOGP,MAAM,EAAIA,MAAM,CAACW,GAAP,CAAW,SAACC,MAAD,CAASC,KAAT,qBACpB,eAAoB,KAAK,CAAED,MAAM,CAACF,KAAlC,UAA0CE,MAAM,CAACE,KAAjD,EAAaD,KAAb,CADoB,EAAX,CAPb,GADF,EADF,CAeD","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './GenreSelect.css';\nimport { dbGenOpSearch, apiGenOpSearch, searchGenre } from '../../actions/actions';\n\n//used on SearchMenu\n\nexport default function GenreSelect() {\n\n  let dispatch = useDispatch();\n  let origin = useSelector(state => state.searchOrig);// <--Busca el origen del store.\n  let apigenres = useSelector(state => state.apigenopts);\n  let apigenRef = useRef(apigenres);//<--para evitar missing dependency en useEffect\n  let dbgenres = useSelector(state => state.dbgenopts);\n  let dbgenRef = useRef(dbgenres);\n\n  let [genres, setGenres] = useState('');\n\n  // Cada vez que cambie el origen guarda el estado en el store\n  // y setea genres con los valores correspondientes\n  useEffect(() => {\n    let genreopts = (orig, apig, dbg) => {\n      if (orig === 'base de datos') {\n        //console.log(orig);\n        //dispatch(dbGenOpSearch()); // <-- Hacer...\n        setGenres(dbg);\n      }\n      if (orig === 'API') {\n        //console.log(orig);\n        dispatch(apiGenOpSearch());\n        // setGenres(apig);\n        //console.log(apig);\n      }\n    }\n    genreopts(origin, apigenRef.current, dbgenRef.current);// <-- referencia a apigenres\n  }, [origin, dispatch]);\n\n  //Cada vez que cambie el origen guarda el estado en el store\n  useEffect(() => {\n    setGenres(apigenres);\n  }, [apigenres]);\n\n  useEffect(() => {\n    setGenres(dbgenres);\n  }, [dbgenres]);\n\n  // Manda al store el género a buscar\n  function handleChange(e) {\n    dispatch(searchGenre(e.target.value));\n  }\n\n  return (\n    <div className=\"gcont\">\n      <select\n        name=\"genres\"\n        className=\"gselect\"\n        value={genres}\n        onChange={handleChange}\n      >\n        <option defaultValue  >Género:</option>\n        {genres && genres.map((option, index) => (\n          <option key={index} value={option.value}>{option.label}</option>\n        ))}\n      </select>\n    </div>\n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}