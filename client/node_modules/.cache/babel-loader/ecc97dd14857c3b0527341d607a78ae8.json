{"ast":null,"code":"var _jsxFileName = \"/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/MultiSelectGenre/MultiSelectGenre.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux'; // import { useSelector } from 'react-redux';\n\nimport './MultiSelectGenre.css';\nimport store from '../../store/index'; //import genresopt from '../Genres/Genres';\n\nimport { getDbGenres } from '../../actions/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function MultiSelectGenre() {\n  _s();\n\n  //store.subscribe() ??\n  //const estado = useSelector((state) => (state))\n  // when an action is dispatched to the Redux store, useSelector() only forces a re-render \n  // if the selector result appears to be different than the last result. \n  // export const CounterComponent = () => {\n  //   const counter = useSelector(state => state.counter)\n  //   return <div>{counter}</div>\n  // }\n  // const dispatch = useDispatch();\n  // let [genreop, setGenreop] = useState([]);\n  // let [show, setShow] = useState(false);\n  // const delay = (ms) => new Promise(resolve =>\n  //   setTimeout(resolve, ms)\n  // );\n  // const fetchObjects = () => {\n  //   return dispatch => {\n  //     store.dispatch(getDbGenres());\n  //     return delay(2000)\n  //     .then(() => {\n  //       console.log('Done!')\n  //     })\n  //   }\n  // }\n  // fetchObjects();\n  //  store.dispatch(getDbGenres()).then(() => {\n  //   console.log('Done!')\n  // })\n  //     .then(() => {\n  //       let genres = store.getState().genreopt;\n  //       console.log('genres = ' + genres);\n  //       return genres;\n  //     })\n  //     .then((genres) => {\n  //       setGenreop(genres);\n  //       console.log('genreop = ' + genreop);\n  //     })\n  //     .then(() => {\n  //       setShow(true);\n  //       console.log('show = ' + 'true');\n  //     })\n  //     .catch(error => console.log(error))\n  //   useEffect(() => {\n  //     //console.log(genreop);\n  //   }, [show])\n  //   // store.dispatch()\n  // (1) Cuando cargue el componente que despache la acción \n  // que busca los géneros.\n  useEffect(() => {\n    console.log('(1) se cargó la página');\n    store.dispatch(getDbGenres());\n  }, []); //const mygenres = useSelector(state => state.genreopt);\n  //console.log(mygenres);\n\n  function select(state) {\n    return state.genreopt;\n  } //  const genres = store.getState().genreopt;\n  //console.log(genres);\n  // console.log(store.getState().genreop);\n  // Se trae el el arreglo de géneros del store.\n  //const genres = useSelector(state => state.genreopt);\n\n\n  const [genreop, setGenreop] = useState([]);\n  let [show, setShow] = useState(false); //(2) Cuando cargó los géneros en (1) que cambie el estado \"show\" a true\n\n  useEffect(() => {\n    console.log('(2) El store se cargó');\n    const genres = store.getState().genreopt; //console.log(genres);\n\n    setGenreop(genres);\n    console.log(genreop);\n  }, [store.getState().genreopt]); //console.log(genres);\n\n  useEffect(() => {\n    console.log('(3) Se trajo el arreglo'); //console.log(genreop);\n\n    setShow(true);\n  }, [genreop]); //console.log('(2)cambió show a true, loading='+store.getState().loading);\n  // const genres = useSelector(state => state.genreopt);\n  // console.log(genres);\n  // useEffect(() => {\n  //   console.log(genreop);\n  //   setShow(true);\n  // }, [show,genreop])\n\n  console.log(show); // Estado de géneros seleccionados\n\n  let [sgenres, setSgenres] = useState([]); // selected genres\n\n  function removeItem(item) {\n    let newItems = sgenres.filter(e => e !== item);\n    setSgenres(newItems);\n  }\n\n  async function handleChange(e) {\n    let itemP = e.target.value;\n    let hasItem = sgenres.includes(itemP);\n\n    if (!hasItem) {\n      setSgenres([...sgenres, itemP]);\n    } else {\n      removeItem(itemP);\n    }\n  }\n\n  function handleClick(e) {\n    let itm = e.target.value;\n    removeItem(itm);\n  }\n\n  useEffect(() => {}, [sgenres]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"selgenfom\",\n    children: !show ? 'no muestra' : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"genres\",\n        placeholder: \"Plataformas...\",\n        className: \"multselectgen\",\n        value: '',\n        onChange: handleChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          defaultValue: true,\n          children: \"G\\xE9neros:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this), genreop && genreop.map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: item.value,\n          children: item.label\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gencont\",\n        children: sgenres.map((item, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"selgenbtn\",\n          value: item,\n          onClick: handleClick,\n          children: item\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MultiSelectGenre, \"gDUW1PvTnBVPOhSC1ZMsVMUUOiU=\");\n\n_c = MultiSelectGenre;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiSelectGenre\");","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/MultiSelectGenre/MultiSelectGenre.jsx"],"names":["React","useState","useEffect","useDispatch","store","getDbGenres","MultiSelectGenre","console","log","dispatch","select","state","genreopt","genreop","setGenreop","show","setShow","genres","getState","sgenres","setSgenres","removeItem","item","newItems","filter","e","handleChange","itemP","target","value","hasItem","includes","handleClick","itm","map","index","label"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n// import { useSelector } from 'react-redux';\nimport './MultiSelectGenre.css';\nimport store from '../../store/index';\n//import genresopt from '../Genres/Genres';\nimport { getDbGenres } from '../../actions/actions';\n\nexport default function MultiSelectGenre() {\n\n  //store.subscribe() ??\n  //const estado = useSelector((state) => (state))\n\n  // when an action is dispatched to the Redux store, useSelector() only forces a re-render \n  // if the selector result appears to be different than the last result. \n\n  // export const CounterComponent = () => {\n  //   const counter = useSelector(state => state.counter)\n  //   return <div>{counter}</div>\n  // }\n\n          // const dispatch = useDispatch();\n          // let [genreop, setGenreop] = useState([]);\n          // let [show, setShow] = useState(false);\n\n          // const delay = (ms) => new Promise(resolve =>\n          //   setTimeout(resolve, ms)\n          // );\n          \n          // const fetchObjects = () => {\n          //   return dispatch => {\n          //     store.dispatch(getDbGenres());\n          \n          //     return delay(2000)\n          //     .then(() => {\n          //       console.log('Done!')\n          //     })\n\n          //   }\n          // }\n          // fetchObjects();\n\n//  store.dispatch(getDbGenres()).then(() => {\n//   console.log('Done!')\n// })\n//     .then(() => {\n//       let genres = store.getState().genreopt;\n//       console.log('genres = ' + genres);\n//       return genres;\n//     })\n//     .then((genres) => {\n//       setGenreop(genres);\n//       console.log('genreop = ' + genreop);\n//     })\n//     .then(() => {\n//       setShow(true);\n//       console.log('show = ' + 'true');\n//     })\n//     .catch(error => console.log(error))\n\n\n//   useEffect(() => {\n//     //console.log(genreop);\n//   }, [show])\n\n\n  //   // store.dispatch()\n\n    // (1) Cuando cargue el componente que despache la acción \n    // que busca los géneros.\n    useEffect(() => {\n      console.log('(1) se cargó la página');\n      store.dispatch(getDbGenres());\n    }, []);\n\n    //const mygenres = useSelector(state => state.genreopt);\n    //console.log(mygenres);\n\n    function select(state){\n      return state.genreopt;\n    }\n\n  //  const genres = store.getState().genreopt;\n    //console.log(genres);\n\n   // console.log(store.getState().genreop);\n\n    // Se trae el el arreglo de géneros del store.\n    //const genres = useSelector(state => state.genreopt);\n\n    const [genreop, setGenreop] = useState([]);\n\n    let [show, setShow] = useState(false);\n\n    //(2) Cuando cargó los géneros en (1) que cambie el estado \"show\" a true\n    useEffect(() => {\n      console.log('(2) El store se cargó');\n      const genres = store.getState().genreopt;\n      //console.log(genres);\n      setGenreop(genres);\n      console.log(genreop);\n    }, [store.getState().genreopt])\n\n    //console.log(genres);\n\n    useEffect(() => {\n      console.log('(3) Se trajo el arreglo');\n      //console.log(genreop);\n      setShow(true);\n    }, [genreop])\n  \n    //console.log('(2)cambió show a true, loading='+store.getState().loading);\n\n    // const genres = useSelector(state => state.genreopt);\n    // console.log(genres);\n\n\n    // useEffect(() => {\n    //   console.log(genreop);\n    //   setShow(true);\n    // }, [show,genreop])\n\n    console.log(show);\n\n\n  // Estado de géneros seleccionados\n  let [sgenres, setSgenres] = useState([]);// selected genres\n\n  function removeItem(item) {\n    let newItems = sgenres.filter(e => e !== item);\n    setSgenres(newItems);\n  }\n\n  async function handleChange(e) {\n    let itemP = e.target.value;\n    let hasItem = sgenres.includes(itemP);\n    if (!hasItem) {\n      setSgenres([...sgenres, itemP]);\n    } else {\n      removeItem(itemP);\n    }\n  }\n\n  function handleClick(e) {\n    let itm = e.target.value;\n    removeItem(itm);\n  }\n\n  useEffect(() => {\n  }, [sgenres]);\n\n  return (\n    <div className=\"selgenfom\">\n      {!show ? 'no muestra' :\n        <>\n          <select\n            name=\"genres\"\n            placeholder=\"Plataformas...\"\n            className=\"multselectgen\"\n            value={''}\n            onChange={handleChange}\n          >\n            <option defaultValue>Géneros:</option>\n            {genreop && genreop.map((item, index) => (\n              <option key={index} value={item.value}>{item.label}</option>\n            ))}\n          </select>\n          <div className=\"gencont\">\n            {sgenres.map((item, index) => (\n              <button className=\"selgenbtn\" value={item}\n                onClick={handleClick} key={index}>\n                {item}\n              </button>\n            ))}\n          </div>\n        </>\n      }\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}