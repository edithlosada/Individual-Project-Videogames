{"ast":null,"code":"import _slicedToArray from\"/home/edith/Desktop/PI/FT10-PI-Videogames/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,useRef}from'react';import{useSelector,useDispatch}from'react-redux';import'./GenreSelect.css';import{dbGenOpSearch,apiGenOpSearch,searchGenre}from'../../actions/actions';//used on SearchMenu\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function GenreSelect(){var dispatch=useDispatch();var orig=useSelector(function(state){return state.searchOrig;});// <--Busca el origen del store.\nvar origRef=useRef(orig);var apigop=useSelector(function(state){return state.apigenopts;});// let apigenRef = useRef(apigenres);//<--para evitar missing dependency en useEffect\nvar dbgop=useSelector(function(state){return state.dbgenopts;});// let dbgenRef = useRef(dbgenres);\nvar cleans=useSelector(function(state){return state.cleansearch;});//sacar?\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),genOp=_useState2[0],setGenOp=_useState2[1];// opciones de géneros\nvar _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),sgenre=_useState4[0],setSgenre=_useState4[1];// género seleccionado\n// Cada vez que cambie el origen guarda el estado en el store\n// y setea genreopts con los valores correspondientes\nuseEffect(function(){// Que limpie 1ro cualquier selección anterior de género\ndispatch(searchGenre(''));setSgenre('');if(orig){if(orig==='API'){dispatch(apiGenOpSearch());}if(orig==='base de datos'){dispatch(dbGenOpSearch());}}console.log(\"(1) \".concat(genOp));},[orig,dispatch]);useEffect(function(){if(orig){if(orig==='API'){if(apigop){console.log(apigop);setGenOp(apigop);//setea localmente los géneros\n}}if(orig==='base de datos'){if(dbgop){console.log(dbgop);setGenOp(dbgop);}}}},[orig,apigop,dbgop,setGenOp]);//Carga el componente nuevamente cuando recibe los géneros\nuseEffect(function(){console.log(\"(3) \".concat(genOp));},[genOp]);// Manda al store el género a buscar\nfunction handleChange(e){dispatch(searchGenre(e.target.value));setSgenre(e.target.value);}// Cuando cambie el género seleccionado lo manda al store.\nuseEffect(function(){dispatch(searchGenre(sgenre));},[sgenre,dispatch]);// // Si presiona nueva búsqueda limpia el género\n// useEffect(() => {\n//   // if (cleans) {\n//   //   dispatch(searchGenre(''));\n//   //   setSgenre('');\n//   // }\n// }, [cleans, dispatch]);\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"gcont\",children:/*#__PURE__*/_jsxs(\"select\",{name:\"genres\",className:\"gselect\",value:sgenre,onChange:handleChange,children:[/*#__PURE__*/_jsx(\"option\",{defaultValue:true,children:\"G\\xE9nero:\"}),genOp&&genOp.map(function(option,index){return/*#__PURE__*/_jsx(\"option\",{value:option.value,children:option.label},index);})]})});}","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GenreSelect/GenreSelect.jsx"],"names":["React","useState","useEffect","useRef","useSelector","useDispatch","dbGenOpSearch","apiGenOpSearch","searchGenre","GenreSelect","dispatch","orig","state","searchOrig","origRef","apigop","apigenopts","dbgop","dbgenopts","cleans","cleansearch","genOp","setGenOp","sgenre","setSgenre","console","log","handleChange","e","target","value","map","option","index","label"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './GenreSelect.css';\nimport { dbGenOpSearch, apiGenOpSearch, searchGenre } from '../../actions/actions';\n\n//used on SearchMenu\n\nexport default function GenreSelect() {\n\n  let dispatch = useDispatch();\n  let orig = useSelector(state => state.searchOrig);// <--Busca el origen del store.\n  let origRef = useRef(orig);\n  let apigop = useSelector(state => state.apigenopts);\n  // let apigenRef = useRef(apigenres);//<--para evitar missing dependency en useEffect\n  let dbgop = useSelector(state => state.dbgenopts);\n  // let dbgenRef = useRef(dbgenres);\n  let cleans = useSelector(state => state.cleansearch); //sacar?\n\n  let [genOp, setGenOp] = useState([]); // opciones de géneros\n  let [sgenre, setSgenre] = useState(''); // género seleccionado\n\n  // Cada vez que cambie el origen guarda el estado en el store\n  // y setea genreopts con los valores correspondientes\n  useEffect(() => {\n    // Que limpie 1ro cualquier selección anterior de género\n    dispatch(searchGenre(''));\n    setSgenre('');\n    if (orig) {\n      if (orig === 'API') {\n        dispatch(apiGenOpSearch());\n      }\n      if (orig === 'base de datos') {\n        dispatch(dbGenOpSearch());\n      }\n    }\n    console.log(`(1) ${genOp}`);\n  }, [orig, dispatch]);\n\n  useEffect(() => {\n   if (orig) {\n      if (orig === 'API') {\n        if(apigop){\n          console.log(apigop);\n          setGenOp(apigop);//setea localmente los géneros\n        }\n      }\n      if (orig === 'base de datos') {\n        if(dbgop){\n          console.log(dbgop);\n          setGenOp(dbgop); \n        }\n      }\n   }\n  }, [orig,apigop,dbgop,setGenOp]); \n\n  //Carga el componente nuevamente cuando recibe los géneros\n  useEffect(() => {\n    console.log(`(3) ${genOp}`);\n  }, [genOp]);\n\n  // Manda al store el género a buscar\n  function handleChange(e) {\n    dispatch(searchGenre(e.target.value));\n    setSgenre(e.target.value);\n  }\n\n  // Cuando cambie el género seleccionado lo manda al store.\n  useEffect(() => {\n    dispatch(searchGenre(sgenre));\n  }, [sgenre, dispatch]);\n\n  // // Si presiona nueva búsqueda limpia el género\n  // useEffect(() => {\n  //   // if (cleans) {\n  //   //   dispatch(searchGenre(''));\n  //   //   setSgenre('');\n  //   // }\n  // }, [cleans, dispatch]);\n\n  return (\n    <div className=\"gcont\">\n      <select\n        name=\"genres\"\n        className=\"gselect\"\n        value={sgenre}\n        onChange={handleChange}\n      >\n        <option defaultValue  >Género:</option>\n        {genOp && genOp.map((option, index) => (\n          <option key={index} value={option.value}>{option.label}</option>\n        ))}\n      </select>\n    </div>\n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}