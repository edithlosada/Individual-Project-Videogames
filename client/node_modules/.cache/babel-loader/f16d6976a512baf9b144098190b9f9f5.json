{"ast":null,"code":"var _jsxFileName = \"/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GamesToShow/GamesToShow.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport './GamesToShow.css';\nimport GameCard from '../GameCard/GameCard.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GamesToShow() {\n  _s();\n\n  const gamests = useSelector(state => state.gamestoshow); // juegos para mostrar\n\n  let [currentPage, setCurrentPage] = useState(0); //inicialmente la primer página\n\n  let [currentPageArr, setCurrentPArr] = useState([]);\n  let PER_PAGE = 6;\n  let pageCount = Math.ceil(gamests.length / PER_PAGE); // Función que obtiene el subarreglo de juegos a mostrar según la pagina\n  // en la que se encuentre.\n\n  function inpageshow(currentPage, perpage) {\n    let offset = currentPage * perpage;\n    let currentPageArr = gamests.slice(offset, offset + PER_PAGE);\n    console.log(currentPageArr);\n    setCurrentPArr([...currentPageArr]);\n  }\n\n  function pagesNumArr(pageCount) {\n    let arr = [];\n\n    for (let i = 1; i <= pageCount; i++) {\n      arr.push(i);\n    }\n\n    return arr;\n  }\n\n  let pages = pagesNumArr(pageCount);\n  useEffect(() => {\n    inpageshow(currentPage, PER_PAGE);\n  }, []); //let [cambioP, setCambioP] = useState(false);\n\n  useEffect(() => {}, [gamests]); // if (titFiltGames) {\n  //   let allgames = titFiltGames.map((g, index) => (\n  //     <GameCard key={index} id={g.apId} name={g.name} img={g.img_url} genres={g.genres} />\n  //   ))\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cardcont\",\n      children: currentPageArr && currentPageArr.map((g, i) => /*#__PURE__*/_jsxDEV(GameCard, {\n        id: g.apId,\n        name: g.name,\n        img: g.img_url,\n        genres: g.genres\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p_btn_area\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"p_button\",\n        onClick: handlePrev,\n        children: \"Anterior\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"p_button\",\n        onClick: handleNext,\n        children: \"Siguiente\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GamesToShow, \"+Pw9hGv2NCifan0uSvIXNyMg47w=\", false, function () {\n  return [useSelector];\n});\n\n_c = GamesToShow;\n\nvar _c;\n\n$RefreshReg$(_c, \"GamesToShow\");","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GamesToShow/GamesToShow.jsx"],"names":["React","useState","useEffect","useSelector","GameCard","GamesToShow","gamests","state","gamestoshow","currentPage","setCurrentPage","currentPageArr","setCurrentPArr","PER_PAGE","pageCount","Math","ceil","length","inpageshow","perpage","offset","slice","console","log","pagesNumArr","arr","i","push","pages","map","g","apId","name","img_url","genres","handlePrev","handleNext"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAO,mBAAP;AACA,OAAOC,QAAP,MAAqB,0BAArB;;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AAEpC,QAAMC,OAAO,GAAGH,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACC,WAAhB,CAA3B,CAFoC,CAEqB;;AAEzD,MAAI,CAACC,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,CAAD,CAA5C,CAJoC,CAIa;;AACjD,MAAI,CAACU,cAAD,EAAiBC,cAAjB,IAAmCX,QAAQ,CAAC,EAAD,CAA/C;AAEA,MAAIY,QAAQ,GAAG,CAAf;AACA,MAAIC,SAAS,GAAGC,IAAI,CAACC,IAAL,CAAUV,OAAO,CAACW,MAAR,GAAiBJ,QAA3B,CAAhB,CARoC,CAUpC;AACA;;AACA,WAASK,UAAT,CAAoBT,WAApB,EAAiCU,OAAjC,EAA0C;AACxC,QAAIC,MAAM,GAAGX,WAAW,GAAGU,OAA3B;AACA,QAAIR,cAAc,GAAGL,OAAO,CAACe,KAAR,CAAcD,MAAd,EAAsBA,MAAM,GAAGP,QAA/B,CAArB;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYZ,cAAZ;AACAC,IAAAA,cAAc,CAAC,CAAC,GAAGD,cAAJ,CAAD,CAAd;AACD;;AAED,WAASa,WAAT,CAAqBV,SAArB,EAAgC;AAC9B,QAAIW,GAAG,GAAG,EAAV;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIZ,SAArB,EAAgCY,CAAC,EAAjC,EAAqC;AACnCD,MAAAA,GAAG,CAACE,IAAJ,CAASD,CAAT;AACD;;AACD,WAAOD,GAAP;AACD;;AACD,MAAIG,KAAK,GAAGJ,WAAW,CAACV,SAAD,CAAvB;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,UAAU,CAACT,WAAD,EAAcI,QAAd,CAAV;AACD,GAFQ,EAEN,EAFM,CAAT,CA5BoC,CA+BpC;;AAEAX,EAAAA,SAAS,CAAC,MAAM,CACf,CADQ,EACN,CAACI,OAAD,CADM,CAAT,CAjCoC,CAoCpC;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,gBACGK,cAAc,IAAIA,cAAc,CAACkB,GAAf,CAAmB,CAACC,CAAD,EAAIJ,CAAJ,kBACpC,QAAC,QAAD;AAAkB,QAAA,EAAE,EAAEI,CAAC,CAACC,IAAxB;AAA8B,QAAA,IAAI,EAAED,CAAC,CAACE,IAAtC;AAA4C,QAAA,GAAG,EAAEF,CAAC,CAACG,OAAnD;AAA4D,QAAA,MAAM,EAAEH,CAAC,CAACI;AAAtE,SAAeR,CAAf;AAAA;AAAA;AAAA;AAAA,cADiB;AADrB;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BACE;AAAQ,QAAA,SAAS,EAAC,UAAlB;AAA6B,QAAA,OAAO,EAAES,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,SAAS,EAAC,UAAlB;AAA6B,QAAA,OAAO,EAAEC,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GAvDuB/B,W;UAENF,W;;;KAFME,W","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport './GamesToShow.css';\nimport GameCard from '../GameCard/GameCard.jsx';\n\nexport default function GamesToShow() {\n\n  const gamests = useSelector(state => state.gamestoshow); // juegos para mostrar\n\n  let [currentPage, setCurrentPage] = useState(0); //inicialmente la primer página\n  let [currentPageArr, setCurrentPArr] = useState([]);\n\n  let PER_PAGE = 6;\n  let pageCount = Math.ceil(gamests.length / PER_PAGE);\n\n  // Función que obtiene el subarreglo de juegos a mostrar según la pagina\n  // en la que se encuentre.\n  function inpageshow(currentPage, perpage) {\n    let offset = currentPage * perpage;\n    let currentPageArr = gamests.slice(offset, offset + PER_PAGE)\n    console.log(currentPageArr);\n    setCurrentPArr([...currentPageArr]);\n  }\n\n  function pagesNumArr(pageCount) {\n    let arr = [];\n    for (let i = 1; i <= pageCount; i++) {\n      arr.push(i);\n    }\n    return arr;\n  }\n  let pages = pagesNumArr(pageCount) \n\n  useEffect(() => {\n    inpageshow(currentPage, PER_PAGE);\n  }, []);\n  //let [cambioP, setCambioP] = useState(false);\n\n  useEffect(() => {\n  }, [gamests])\n\n  // if (titFiltGames) {\n  //   let allgames = titFiltGames.map((g, index) => (\n  //     <GameCard key={index} id={g.apId} name={g.name} img={g.img_url} genres={g.genres} />\n  //   ))\n  // }\n\n  return (\n    <div>\n      <div className=\"cardcont\" >\n        {currentPageArr && currentPageArr.map((g, i) => (\n          <GameCard key={i} id={g.apId} name={g.name} img={g.img_url} genres={g.genres} />\n        ))}\n      </div>\n      <div className=\"p_btn_area\">\n        <button className=\"p_button\" onClick={handlePrev}>Anterior</button>\n        <button className=\"p_button\" onClick={handleNext}>Siguiente</button>\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}