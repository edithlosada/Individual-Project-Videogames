{"ast":null,"code":"import fetch from 'node-fetch';\nexport const SET_NG_GEN_SEL = \"SET_NG_GEN_SEL\";\nexport const SET_NG_PTF_SEL = \"SET_NG_PTF_SEL\";\nexport const SEND_FORM = \"SEND_FORM\";\nexport const INIT_SEARCH = \"INIT_SEARCH\";\nexport const CLEAN_SEARCH = \"CLEAN_SEARCH\";\nexport const SET_ORIG = \"SET_ORIG\";\nexport const SHOW_MSG = \"SHOW_MSG\";\nexport const SET_ORDER_OPT = \"SET_ORDER_OPT\";\nexport const SET_SEARCH_GEN = \"SET_SEARCH_GEN\";\nexport const DB_GEN_OP_SEARCH = \"DB_GEN_OP_SEARCH\";\nexport const API_GEN_OP_SEARCH = \"API_GEN_OP_SEARCH\";\nexport const TITLE_SEARCH = \"TITLE_SEARCH\";\nexport const GET_API_GAMES = \"GET_API_GAMES\";\nexport const GET_DB_GAMES = \"GET_DB_GAMES\";\nexport const CLEAN_CARDS = \"CLEAN_CARDS\"; //bORRAR\n\nexport const SET_GAMES_TO_SHOW = \"SET_GAMES_TO_SHOW\";\nexport const ADD_NG_GEN = \"ADD_NG_GEN\";\nexport const ADD_NG_PLTF = \"ADD_NG_PLTF,\"; //---------New Game -----------\n\nexport function saveNgGenSel(arr) {\n  return {\n    type: SET_NG_GEN_SEL,\n    payload: arr\n  };\n}\nexport function saveNgPlatfSel(arr) {\n  return {\n    type: SET_NG_PTF_SEL,\n    payload: arr\n  };\n}\nexport function sendedForm(boolean) {\n  return {\n    type: SEND_FORM,\n    payload: boolean\n  };\n} //---------Search Game -----------\n\nexport function initsearch(boolean) {\n  return {\n    type: INIT_SEARCH,\n    payload: boolean\n  };\n}\nexport function cleansearch(boolean) {\n  return {\n    type: CLEAN_SEARCH,\n    payload: boolean\n  };\n}\nexport function setOrigOpt(str) {\n  return {\n    type: SET_ORIG,\n    payload: str\n  };\n}\nexport function setShowmsg(boolean) {\n  return {\n    type: SHOW_MSG,\n    payload: boolean\n  };\n}\nexport function searchGenre(str) {\n  return {\n    type: SET_SEARCH_GEN,\n    payload: str\n  };\n}\nexport function setOrderOpt(str) {\n  return {\n    type: SET_ORDER_OPT,\n    payload: str\n  };\n}\nexport function dbGenOpSearch() {\n  return async function (dispatch) {\n    return fetch(\" http://localhost:3001/genres\").then(response => response.json()).then(arr => {\n      let newarr = arr.map(e => e.name);\n      return newarr;\n    }).then(arr => {\n      console.log(arr);\n      dispatch({\n        type: DB_GEN_OP_SEARCH,\n        payload: arr\n      });\n    });\n  };\n} // Request a la API para traerse los géneros desde el back.\n\nexport function apiGenOpSearch() {\n  return async function (dispatch) {\n    return fetch(\"http://localhost:3001/apigenres\").then(response => response.json()).then(arr => {\n      console.log(arr);\n      dispatch({\n        type: API_GEN_OP_SEARCH,\n        payload: arr\n      });\n    });\n  };\n}\nexport function titleSearch(str) {\n  return {\n    type: TITLE_SEARCH,\n    payload: str\n  };\n} // Request a la API para traer los 100 primeros videojuegos desde el back.\n\nexport function getApiGames() {\n  return async function (dispatch) {\n    return fetch(\"http://localhost:3001/videogames/\").then(response => response.json()).then(arr => {\n      //console.log(arr);\n      dispatch({\n        type: GET_API_GAMES,\n        payload: arr\n      });\n    });\n  };\n} // Request a la DB para traer los videojuegos.\n\nexport function getDbGames() {\n  return async function (dispatch) {\n    return fetch(\"http://localhost:3001/dbvideogames\").then(response => response.json()).then(arr => {\n      console.log(arr);\n      dispatch({\n        type: GET_DB_GAMES,\n        payload: arr\n      });\n    });\n  };\n}\nexport function cleancards(boolean) {\n  // Borrar!!!\n  return {\n    type: CLEAN_CARDS,\n    payload: boolean\n  };\n}\nexport function setGamesToShow(arr) {\n  // Borrar!!!\n  return {\n    type: SET_GAMES_TO_SHOW,\n    payload: arr\n  };\n}\nexport function addNgGen(arr) {\n  return {\n    type: ADD_NG_GEN,\n    payload: arr\n  };\n}\nexport function addNgPltf(arr) {\n  return {\n    type: ADD_NG_PLTF,\n    payload: arr\n  };\n} // Request a la API para traer las plataformas de videojuegos desde el front..\n// export function getApiPlatforms() {\n//   return function (dispatch) {\n//     return fetch(\"https://api.rawg.io/api/platforms\") //url de api con plataformas\n//       .then(response => response.json()) //aplica json y retorna\n//       .then(json => {\n//         let data = json.results;\n//         let apiPlatfs = data.map(e => e.name);\n//         return apiPlatfs;\n//       })\n//       .then(platfs => {\n//         dispatch({ type: GET_API_PLATFORMS, payload: platfs }) // lo manda al reducer\n//       });\n//   };\n// }\n//----------------------------------------------------------\n// Request a la API para traerse los géneros desde el front.\n// export function apiGenOpSearch() {\n//   const genObjFromArr = (arreglo) => {\n//     let arr = arreglo;\n//     let gen = [];\n//     for (let i = 0; i < arr.length; i++) {\n//       let obj = { value: arr[i].name, label: arr[i].name };\n//       gen.push(obj);\n//     }\n//     return gen;\n//   }\n//   return function (dispatch) {\n//     fetch(\"https://api.rawg.io/api/genres?key=bb129cbd5b1b4968a7aec68ed0a7b91d\")\n//       .then(response => {\n//         return response.json();\n//       })\n//       .then(json => {\n//         return json.results;\n//       })\n//       .then(async jarr => {\n//         let narr = await genObjFromArr(jarr);\n//         return narr; //<---\n//       })\n//       .then(arr => {\n//         dispatch({ type: API_GEN_OP_SEARCH, payload: arr })\n//       })\n//   }\n// }","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/actions/actions.js"],"names":["fetch","SET_NG_GEN_SEL","SET_NG_PTF_SEL","SEND_FORM","INIT_SEARCH","CLEAN_SEARCH","SET_ORIG","SHOW_MSG","SET_ORDER_OPT","SET_SEARCH_GEN","DB_GEN_OP_SEARCH","API_GEN_OP_SEARCH","TITLE_SEARCH","GET_API_GAMES","GET_DB_GAMES","CLEAN_CARDS","SET_GAMES_TO_SHOW","ADD_NG_GEN","ADD_NG_PLTF","saveNgGenSel","arr","type","payload","saveNgPlatfSel","sendedForm","boolean","initsearch","cleansearch","setOrigOpt","str","setShowmsg","searchGenre","setOrderOpt","dbGenOpSearch","dispatch","then","response","json","newarr","map","e","name","console","log","apiGenOpSearch","titleSearch","getApiGames","getDbGames","cleancards","setGamesToShow","addNgGen","addNgPltf"],"mappings":"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","sourcesContent":["import fetch from 'node-fetch';\nexport const SET_NG_GEN_SEL = \"SET_NG_GEN_SEL\";\nexport const SET_NG_PTF_SEL = \"SET_NG_PTF_SEL\";\nexport const SEND_FORM = \"SEND_FORM\";\nexport const INIT_SEARCH = \"INIT_SEARCH\";\nexport const CLEAN_SEARCH = \"CLEAN_SEARCH\";\nexport const SET_ORIG = \"SET_ORIG\";\nexport const SHOW_MSG = \"SHOW_MSG\";\nexport const SET_ORDER_OPT = \"SET_ORDER_OPT\";\nexport const SET_SEARCH_GEN = \"SET_SEARCH_GEN\";\nexport const DB_GEN_OP_SEARCH = \"DB_GEN_OP_SEARCH\";\nexport const API_GEN_OP_SEARCH = \"API_GEN_OP_SEARCH\";\nexport const TITLE_SEARCH = \"TITLE_SEARCH\";\nexport const GET_API_GAMES = \"GET_API_GAMES\";\nexport const GET_DB_GAMES = \"GET_DB_GAMES\";\nexport const CLEAN_CARDS = \"CLEAN_CARDS\";//bORRAR\nexport const SET_GAMES_TO_SHOW = \"SET_GAMES_TO_SHOW\";\nexport const ADD_NG_GEN = \"ADD_NG_GEN\";\nexport const ADD_NG_PLTF = \"ADD_NG_PLTF,\";\n\n//---------New Game -----------\nexport function saveNgGenSel(arr) {\n  return { type: SET_NG_GEN_SEL, payload: arr };\n}\n\nexport function saveNgPlatfSel(arr) {\n  return { type: SET_NG_PTF_SEL, payload: arr };\n}\n\nexport function sendedForm(boolean) {\n  return { type: SEND_FORM, payload: boolean };\n}\n\n//---------Search Game -----------\n\nexport function initsearch(boolean) {\n  return { type: INIT_SEARCH, payload: boolean };\n}\n\nexport function cleansearch(boolean) {\n  return { type: CLEAN_SEARCH, payload: boolean };\n}\n\nexport function setOrigOpt(str) {\n  return { type: SET_ORIG, payload: str };\n}\n\nexport function setShowmsg(boolean) {\n  return { type: SHOW_MSG, payload: boolean };\n}\n\nexport function searchGenre(str) {\n  return { type: SET_SEARCH_GEN, payload: str };\n}\n\nexport function setOrderOpt(str) {\n  return { type: SET_ORDER_OPT, payload: str };\n}\n\nexport function dbGenOpSearch() {\n  return async function (dispatch) {\n    return fetch(\" http://localhost:3001/genres\")\n      .then(response => response.json()) \n      .then(arr => {\n        let newarr = arr.map(e => e.name);\n        return newarr;\n      })\n      .then(arr => {\n        console.log(arr);\n        dispatch({ type: DB_GEN_OP_SEARCH, payload: arr })\n      })\n  }\n}\n\n// Request a la API para traerse los géneros desde el back.\nexport function apiGenOpSearch() {\n  return async function (dispatch) {\n    return fetch(\"http://localhost:3001/apigenres\")\n      .then(response => response.json()) \n      .then(arr => {\n        console.log(arr);\n        dispatch({ type: API_GEN_OP_SEARCH, payload: arr })\n      })\n  }\n}\n\nexport function titleSearch(str) {\n  return { type: TITLE_SEARCH, payload: str };\n}\n\n// Request a la API para traer los 100 primeros videojuegos desde el back.\nexport function getApiGames() {\n  return async function (dispatch) {\n    return fetch(\"http://localhost:3001/videogames/\")\n      .then(response => response.json()) \n      .then(arr => {\n        //console.log(arr);\n        dispatch({ type: GET_API_GAMES, payload: arr });\n      })\n  }\n}\n\n// Request a la DB para traer los videojuegos.\nexport function getDbGames() {\n  return async function (dispatch) {\n    return fetch(\"http://localhost:3001/dbvideogames\")\n      .then(response => response.json()) \n      .then(arr => {\n        console.log(arr);\n        dispatch({ type: GET_DB_GAMES, payload: arr });\n      })\n  }\n}\n\nexport function cleancards(boolean) { // Borrar!!!\n  return { type: CLEAN_CARDS, payload: boolean };\n}\n\nexport function setGamesToShow(arr) { // Borrar!!!\n  return { type: SET_GAMES_TO_SHOW, payload: arr };\n}\n\nexport function addNgGen(arr) {\n  return { type: ADD_NG_GEN, payload: arr };\n}\n\nexport function addNgPltf(arr) {\n  return { type: ADD_NG_PLTF, payload: arr };\n}\n\n// Request a la API para traer las plataformas de videojuegos desde el front..\n// export function getApiPlatforms() {\n//   return function (dispatch) {\n//     return fetch(\"https://api.rawg.io/api/platforms\") //url de api con plataformas\n//       .then(response => response.json()) //aplica json y retorna\n//       .then(json => {\n//         let data = json.results;\n//         let apiPlatfs = data.map(e => e.name);\n//         return apiPlatfs;\n//       })\n//       .then(platfs => {\n//         dispatch({ type: GET_API_PLATFORMS, payload: platfs }) // lo manda al reducer\n//       });\n//   };\n// }\n//----------------------------------------------------------\n// Request a la API para traerse los géneros desde el front.\n// export function apiGenOpSearch() {\n\n//   const genObjFromArr = (arreglo) => {\n//     let arr = arreglo;\n//     let gen = [];\n//     for (let i = 0; i < arr.length; i++) {\n//       let obj = { value: arr[i].name, label: arr[i].name };\n//       gen.push(obj);\n//     }\n//     return gen;\n//   }\n\n//   return function (dispatch) {\n//     fetch(\"https://api.rawg.io/api/genres?key=bb129cbd5b1b4968a7aec68ed0a7b91d\")\n//       .then(response => {\n//         return response.json();\n//       })\n//       .then(json => {\n//         return json.results;\n//       })\n//       .then(async jarr => {\n//         let narr = await genObjFromArr(jarr);\n//         return narr; //<---\n//       })\n//       .then(arr => {\n//         dispatch({ type: API_GEN_OP_SEARCH, payload: arr })\n//       })\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}