{"ast":null,"code":"var _jsxFileName = \"/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/MultiSelectGenre/MultiSelectGenre.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; // import { useDispatch } from 'react-redux';\n// import { useSelector } from 'react-redux';\n\nimport './MultiSelectGenre.css'; //import store from '../../store/index';\n//import genresopt from '../Genres/Genres';\n\nimport { getDbGenres } from '../../actions/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst fetch = require('node-fetch'); //<--\n\n\nexport default function MultiSelectGenre() {\n  _s();\n\n  const [genreopt, setGenreopt] = useState([]);\n  let [show, setShow] = useState(false);\n\n  async function getGenreAsync() {\n    let response = await fetch(\"http://localhost:3001/genres\");\n    let data = await response.json();\n    return data;\n  } //console.log(genreopt);\n\n\n  useEffect(() => {\n    getGenreAsync().then(arr => {\n      //console.log(arr);\n      let gen = [];\n\n      for (let i = 0; i < arr.length; i++) {\n        let obj = {\n          value: arr[i].name,\n          label: arr[i].name\n        };\n        gen.push(obj);\n      } //console.log(gen);\n\n\n      return gen;\n    }).then(gen => {\n      //console.log(gen);\n      setGenreopt(gen);\n    }).then(() => {\n      console.log(genreopt);\n      setShow(true);\n    }); // .then(generos => {\n    //   console.log(generos);\n    // })\n    // .then(() => {\n    //   console.log(genreopt);\n    // })\n  }, []); // const generos = [];\n  // for (let i = 0; i < arr.length; i++) {\n  //   let obj = { value: arr[i].name, label: arr[i].name };\n  //   generos.push(obj);\n  // }\n  // useEffect(() => {\n  //   const generos = [];\n  //   fetch(\"http://localhost:3001/genres\")\n  //       .then(response => {\n  //         return response.json()\n  //       })\n  //       .then(json => {\n  //         console.log(json);\n  //         return \n  //       })\n  //       // .then( arr => {\n  //       //   console.log(arr);\n  //       //   for (let i = 0; i < arr.length; i++) {\n  //       //     let obj = { value: arr[i].name, label: arr[i].name };\n  //       //     generos.push(obj);\n  //       //   }\n  //       //   //console.log(generos);\n  //       //   return generos;\n  //       // })\n  //       // .then( generos => {\n  //       //   // console.log(generos);\n  //       //   setGenreopt(generos)\n  //       // })\n  //       // .then( () => setShow(true))\n  // }, [])\n  // // const state = useSelector(state => state.genreopt);\n  // // console.log(state);\n  //   // (1) Cuando cargue el componente que despache la acción \n  //   // que busca los géneros.\n  //   useEffect(() => {\n  //     console.log('(1) se cargó la página');\n  //     store.dispatch(getDbGenres());\n  //   }, []);\n  //   const [genreop, setGenreop] = useState([]);\n  //   let [show, setShow] = useState(false);\n  //   //(2) Cuando cargó los géneros en (1) que cambie el estado \"show\" a true\n  //   useEffect(() => {\n  //     console.log('(2) El store se cargó');\n  //     const genres = store.getState().genreopt;\n  //     //console.log(genres);\n  //     setGenreop(genres);\n  //     //console.log(genreop);\n  //   }, [store.getState().genreopt]).then(()=>      console.log('(3) Se trajo el arreglo'))\n  //   //console.log(genres);\n  //   useEffect(() => {\n  //     console.log('(3) Se trajo el arreglo');\n  //     console.log(genreop);\n  //     setShow(true);\n  //   }, [genreop])\n  //console.log('(2)cambió show a true, loading='+store.getState().loading);\n  // const genres = useSelector(state => state.genreopt);\n  // console.log(genres);\n  // useEffect(() => {\n  //   console.log(genreop);\n  //   setShow(true);\n  // }, [show,genreop])\n\n  console.log(show); // Estado de géneros seleccionados\n\n  let [sgenres, setSgenres] = useState([]); // selected genres\n\n  function removeItem(item) {\n    let newItems = sgenres.filter(e => e !== item);\n    setSgenres(newItems);\n  }\n\n  async function handleChange(e) {\n    let itemP = e.target.value;\n    let hasItem = sgenres.includes(itemP);\n\n    if (!hasItem) {\n      setSgenres([...sgenres, itemP]);\n    } else {\n      removeItem(itemP);\n    }\n  }\n\n  function handleClick(e) {\n    let itm = e.target.value;\n    removeItem(itm);\n  }\n\n  useEffect(() => {}, [sgenres]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"selgenfom\",\n    children: !show ? 'no muestra' : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"genres\",\n        placeholder: \"Plataformas...\",\n        className: \"multselectgen\",\n        value: '',\n        onChange: handleChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          defaultValue: true,\n          children: \"G\\xE9neros:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this), genreopt && genreopt.map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: item.value,\n          children: item.label\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gencont\",\n        children: sgenres.map((item, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"selgenbtn\",\n          value: item,\n          onClick: handleClick,\n          children: item\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MultiSelectGenre, \"YTP+7Ja+LJXawFtIwGf5nud934k=\");\n\n_c = MultiSelectGenre;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiSelectGenre\");","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/MultiSelectGenre/MultiSelectGenre.jsx"],"names":["React","useState","useEffect","getDbGenres","fetch","require","MultiSelectGenre","genreopt","setGenreopt","show","setShow","getGenreAsync","response","data","json","then","arr","gen","i","length","obj","value","name","label","push","console","log","sgenres","setSgenres","removeItem","item","newItems","filter","e","handleChange","itemP","target","hasItem","includes","handleClick","itm","map","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n// import { useDispatch } from 'react-redux';\n// import { useSelector } from 'react-redux';\nimport './MultiSelectGenre.css';\n//import store from '../../store/index';\n//import genresopt from '../Genres/Genres';\nimport { getDbGenres } from '../../actions/actions';\nconst fetch = require('node-fetch');//<--\n\nexport default function MultiSelectGenre() {\n\n\n  const [genreopt, setGenreopt] = useState([]);\n\n  let [show, setShow] = useState(false);\n\n  async function getGenreAsync() {\n    let response = await fetch(\"http://localhost:3001/genres\");\n    let data = await response.json()\n    return data;\n  }\n  //console.log(genreopt);\n\n  useEffect(() => {\n    getGenreAsync()\n      .then(arr => {\n        //console.log(arr);\n        let gen = [];\n        for (let i = 0; i < arr.length; i++) {\n          let obj = { value: arr[i].name, label: arr[i].name };\n          gen.push(obj);\n        }\n        //console.log(gen);\n        return gen;\n      })\n    .then(gen => {\n      //console.log(gen);\n      setGenreopt(gen);\n    })\n    .then(() => {\n      console.log(genreopt);\n      setShow(true);\n    })\n    // .then(generos => {\n    //   console.log(generos);\n    // })\n    // .then(() => {\n    //   console.log(genreopt);\n    // })\n  }, [])\n\n  // const generos = [];\n  // for (let i = 0; i < arr.length; i++) {\n  //   let obj = { value: arr[i].name, label: arr[i].name };\n  //   generos.push(obj);\n  // }\n\n\n\n  // useEffect(() => {\n  //   const generos = [];\n  //   fetch(\"http://localhost:3001/genres\")\n  //       .then(response => {\n  //         return response.json()\n  //       })\n  //       .then(json => {\n  //         console.log(json);\n  //         return \n  //       })\n  //       // .then( arr => {\n  //       //   console.log(arr);\n  //       //   for (let i = 0; i < arr.length; i++) {\n  //       //     let obj = { value: arr[i].name, label: arr[i].name };\n  //       //     generos.push(obj);\n  //       //   }\n  //       //   //console.log(generos);\n  //       //   return generos;\n  //       // })\n  //       // .then( generos => {\n  //       //   // console.log(generos);\n  //       //   setGenreopt(generos)\n  //       // })\n  //       // .then( () => setShow(true))\n  // }, [])\n\n\n  // // const state = useSelector(state => state.genreopt);\n  // // console.log(state);\n\n  //   // (1) Cuando cargue el componente que despache la acción \n  //   // que busca los géneros.\n  //   useEffect(() => {\n  //     console.log('(1) se cargó la página');\n  //     store.dispatch(getDbGenres());\n  //   }, []);\n\n  //   const [genreop, setGenreop] = useState([]);\n\n  //   let [show, setShow] = useState(false);\n\n  //   //(2) Cuando cargó los géneros en (1) que cambie el estado \"show\" a true\n  //   useEffect(() => {\n  //     console.log('(2) El store se cargó');\n  //     const genres = store.getState().genreopt;\n  //     //console.log(genres);\n  //     setGenreop(genres);\n  //     //console.log(genreop);\n  //   }, [store.getState().genreopt]).then(()=>      console.log('(3) Se trajo el arreglo'))\n\n  //   //console.log(genres);\n\n  //   useEffect(() => {\n  //     console.log('(3) Se trajo el arreglo');\n  //     console.log(genreop);\n  //     setShow(true);\n  //   }, [genreop])\n\n  //console.log('(2)cambió show a true, loading='+store.getState().loading);\n\n  // const genres = useSelector(state => state.genreopt);\n  // console.log(genres);\n\n\n  // useEffect(() => {\n  //   console.log(genreop);\n  //   setShow(true);\n  // }, [show,genreop])\n\n  console.log(show);\n\n\n  // Estado de géneros seleccionados\n  let [sgenres, setSgenres] = useState([]);// selected genres\n\n  function removeItem(item) {\n    let newItems = sgenres.filter(e => e !== item);\n    setSgenres(newItems);\n  }\n\n  async function handleChange(e) {\n    let itemP = e.target.value;\n    let hasItem = sgenres.includes(itemP);\n    if (!hasItem) {\n      setSgenres([...sgenres, itemP]);\n    } else {\n      removeItem(itemP);\n    }\n  }\n\n  function handleClick(e) {\n    let itm = e.target.value;\n    removeItem(itm);\n  }\n\n  useEffect(() => {\n  }, [sgenres]);\n\n  return (\n    <div className=\"selgenfom\">\n      {!show ? 'no muestra' :\n        <>\n          <select\n            name=\"genres\"\n            placeholder=\"Plataformas...\"\n            className=\"multselectgen\"\n            value={''}\n            onChange={handleChange}\n          >\n            <option defaultValue>Géneros:</option>\n            {genreopt && genreopt.map((item, index) => (\n              <option key={index} value={item.value}>{item.label}</option>\n            ))}\n          </select>\n          <div className=\"gencont\">\n            {sgenres.map((item, index) => (\n              <button className=\"selgenbtn\" value={item}\n                onClick={handleClick} key={index}>\n                {item}\n              </button>\n            ))}\n          </div>\n        </>\n      }\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}