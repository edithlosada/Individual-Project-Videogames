{"ast":null,"code":"var _jsxFileName = \"/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/MultiSelectGenre/MultiSelectGenre.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './MultiSelectGenre.css';\nimport store from '../../store/index'; //import genresopt from '../Genres/Genres';\n\nimport { getDbGenres } from '../../actions/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function MultiSelectGenre() {\n  _s();\n\n  //   // console.log(props);\n  //   // props.findgenres();\n  //   // console.log(props.loading);\n  const dispatch = useDispatch();\n  const loading = useSelector(state => state.loading);\n  const genreopt = useSelector(state => state.genreopt);\n  console.log(loading); //   dispatch(getDbGenres());\n  //console.log(store.getState());\n  //   // store.dispatch(getDbGenres());\n  //   //console.log(store.getState())\n  // que obtenga los géneros al cargar la página\n\n  useEffect(() => {\n    dispatch(getDbGenres);\n  }, []);\n\n  function handleLoad() {\n    let previousValue = loading;\n    let currentValue = store.getState().loading;\n\n    if (previousValue !== currentValue) {\n      console.log(`Loading changed to ${currentValue}`);\n    }\n  }\n\n  let unsubscribe = store.subscribe(handleChange);\n  dispatch(getDbGenres);\n  handleLoad(); //console.log(genresopt);\n\n  let genres = genreopt; //console.log(genres);\n  // Estado de géneros seleccionados\n\n  let [sgenres, setSgenres] = useState([]); // selected genres\n\n  function removeItem(item) {\n    let newItems = sgenres.filter(e => e !== item);\n    setSgenres(newItems);\n  }\n\n  async function handleChange(e) {\n    let itemP = e.target.value;\n    let hasItem = sgenres.includes(itemP);\n\n    if (!hasItem) {\n      setSgenres([...sgenres, itemP]);\n    } else {\n      removeItem(itemP);\n    }\n  }\n\n  function handleClick(e) {\n    let itm = e.target.value;\n    removeItem(itm);\n  }\n\n  useEffect(() => {}, [sgenres]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"selgenfom\",\n    children: loading ? /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"ng_loading\",\n      children: \"...cargando g\\xE9neros\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 19\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"genres\",\n        placeholder: \"Plataformas...\",\n        className: \"multselectgen\",\n        value: '',\n        onChange: handleChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          defaultValue: true,\n          children: \"G\\xE9neros:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this), genres && genres.map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: item.value,\n          children: item.label\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gencont\",\n        children: sgenres.map((item, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"selgenbtn\",\n          value: item,\n          onClick: handleClick,\n          children: item\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MultiSelectGenre, \"aCyrG7Y9bEr2K1Qmtj4mNVkvkyE=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = MultiSelectGenre;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiSelectGenre\");","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/MultiSelectGenre/MultiSelectGenre.jsx"],"names":["React","useState","useEffect","useDispatch","useSelector","store","getDbGenres","MultiSelectGenre","dispatch","loading","state","genreopt","console","log","handleLoad","previousValue","currentValue","getState","unsubscribe","subscribe","handleChange","genres","sgenres","setSgenres","removeItem","item","newItems","filter","e","itemP","target","value","hasItem","includes","handleClick","itm","map","index","label"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './MultiSelectGenre.css';\nimport store from '../../store/index';\n//import genresopt from '../Genres/Genres';\nimport { getDbGenres } from '../../actions/actions';\n\nexport default function MultiSelectGenre() {\n\n  //   // console.log(props);\n  //   // props.findgenres();\n  //   // console.log(props.loading);\n  const dispatch = useDispatch();\n  const loading = useSelector(state => state.loading);\n  const genreopt = useSelector(state => state.genreopt);\n  console.log(loading)\n  //   dispatch(getDbGenres());\n\n  //console.log(store.getState());\n  //   // store.dispatch(getDbGenres());\n  //   //console.log(store.getState())\n\n  // que obtenga los géneros al cargar la página\n  useEffect(() => {\n    dispatch(getDbGenres)\n  },[])\n\n  function handleLoad() {\n    let previousValue = loading;\n    let currentValue = store.getState().loading;\n  \n    if (previousValue !== currentValue) {\n      console.log(`Loading changed to ${currentValue}`);\n    }\n  }\n  let unsubscribe = store.subscribe(handleChange);\n  dispatch(getDbGenres)\n  handleLoad();\n\n  //console.log(genresopt);\n  let genres = genreopt;\n  //console.log(genres);\n\n  // Estado de géneros seleccionados\n  let [sgenres, setSgenres] = useState([]);// selected genres\n\n  function removeItem(item) {\n    let newItems = sgenres.filter(e => e !== item);\n    setSgenres(newItems);\n  }\n\n  async function handleChange(e) {\n    let itemP = e.target.value;\n    let hasItem = sgenres.includes(itemP);\n    if (!hasItem) {\n      setSgenres([...sgenres, itemP]);\n    } else {\n      removeItem(itemP);\n    }\n  }\n\n  function handleClick(e) {\n    let itm = e.target.value;\n    removeItem(itm);\n  }\n\n  useEffect(() => {\n  }, [sgenres]);\n\n  return (\n    <div className=\"selgenfom\">\n      { loading ? <h3 className=\"ng_loading\">...cargando géneros</h3> :\n        <>\n          <select\n            name=\"genres\"\n            placeholder=\"Plataformas...\"\n            className=\"multselectgen\"\n            value={''}\n            onChange={handleChange}\n          >\n            <option defaultValue>Géneros:</option>\n            {genres && genres.map((item, index) => (\n              <option key={index} value={item.value}>{item.label}</option>\n            ))}\n          </select>\n          <div className=\"gencont\">\n            {sgenres.map((item, index) => (\n              <button className=\"selgenbtn\" value={item}\n                onClick={handleClick} key={index}>\n                {item}\n              </button>\n            ))}\n          </div>\n        </>\n      }\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}