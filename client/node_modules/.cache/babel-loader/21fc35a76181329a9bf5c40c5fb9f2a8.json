{"ast":null,"code":"import _slicedToArray from\"/home/edith/Desktop/PI/FT10-PI-Videogames/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{useSelector,useDispatch}from'react-redux';import'./GenreSelect.css';import{dbGenOpSearch,apiGenOpSearch,searchGenre}from'../../actions/actions';//used on SearchMenu\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function GenreSelect(){var dispatch=useDispatch();var orig=useSelector(function(state){return state.searchOrig;});// <--Busca el origen del store.\nvar apigop=useSelector(function(state){return state.apigenopts;});var dbgop=useSelector(function(state){return state.dbgenopts;});var _useState=useState([]),_useState2=_slicedToArray(_useState,2),genOp=_useState2[0],setGenOp=_useState2[1];// opciones de géneros\nvar _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),sgenre=_useState4[0],setSgenre=_useState4[1];// género seleccionado\n// Cada vez que cambie el origen guarda el estado en el store\n// y setea genreopts con los valores correspondientes\nuseEffect(function(){// Que limpie 1ro cualquier selección anterior de género\ndispatch(searchGenre(''));setSgenre('');if(orig){if(orig==='API'){dispatch(apiGenOpSearch());}if(orig==='DB'){dispatch(dbGenOpSearch());}}// console.log(`(1) ${genOp}`);\n},[orig,dispatch]);useEffect(function(){if(orig){if(orig==='API'){if(apigop){setGenOp(apigop);//setea localmente los géneros\n}}if(orig==='DB'){if(dbgop){setGenOp(dbgop);}}}},[orig,apigop,dbgop,setGenOp]);//Carga el componente nuevamente cuando recibe los géneros\nuseEffect(function(){},[genOp]);// Manda al store el género a buscar\nfunction handleChange(e){dispatch(searchGenre(e.target.value));setSgenre(e.target.value);}// Cuando cambie el género seleccionado lo manda al store.\nuseEffect(function(){dispatch(searchGenre(sgenre));},[sgenre,dispatch]);return/*#__PURE__*/_jsx(\"div\",{className:\"gcont\",children:/*#__PURE__*/_jsxs(\"select\",{name:\"genres\",className:\"gselect\",value:sgenre,onChange:handleChange,children:[/*#__PURE__*/_jsx(\"option\",{defaultValue:true,children:\"Genre:\"}),genOp&&genOp.map(function(option,index){return/*#__PURE__*/_jsx(\"option\",{value:option,children:option},index);})]})});}","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/GenreSelect/GenreSelect.jsx"],"names":["React","useState","useEffect","useSelector","useDispatch","dbGenOpSearch","apiGenOpSearch","searchGenre","GenreSelect","dispatch","orig","state","searchOrig","apigop","apigenopts","dbgop","dbgenopts","genOp","setGenOp","sgenre","setSgenre","handleChange","e","target","value","map","option","index"],"mappings":"uKAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,MAAO,mBAAP,CACA,OAASC,aAAT,CAAwBC,cAAxB,CAAwCC,WAAxC,KAA2D,uBAA3D,CAEA;wFAEA,cAAe,SAASC,CAAAA,WAAT,EAAuB,CAEpC,GAAIC,CAAAA,QAAQ,CAAGL,WAAW,EAA1B,CACA,GAAIM,CAAAA,IAAI,CAAGP,WAAW,CAAC,SAAAQ,KAAK,QAAIA,CAAAA,KAAK,CAACC,UAAV,EAAN,CAAtB,CAAkD;AAClD,GAAIC,CAAAA,MAAM,CAAGV,WAAW,CAAC,SAAAQ,KAAK,QAAIA,CAAAA,KAAK,CAACG,UAAV,EAAN,CAAxB,CACA,GAAIC,CAAAA,KAAK,CAAGZ,WAAW,CAAC,SAAAQ,KAAK,QAAIA,CAAAA,KAAK,CAACK,SAAV,EAAN,CAAvB,CALoC,cAOZf,QAAQ,CAAC,EAAD,CAPI,wCAO/BgB,KAP+B,eAOxBC,QAPwB,eAOE;AAPF,eAQVjB,QAAQ,CAAC,EAAD,CARE,yCAQ/BkB,MAR+B,eAQvBC,SARuB,eAQI;AAExC;AACA;AACAlB,SAAS,CAAC,UAAM,CACd;AACAO,QAAQ,CAACF,WAAW,CAAC,EAAD,CAAZ,CAAR,CACAa,SAAS,CAAC,EAAD,CAAT,CACA,GAAIV,IAAJ,CAAU,CACR,GAAIA,IAAI,GAAK,KAAb,CAAoB,CAClBD,QAAQ,CAACH,cAAc,EAAf,CAAR,CACD,CACD,GAAII,IAAI,GAAK,IAAb,CAAmB,CACjBD,QAAQ,CAACJ,aAAa,EAAd,CAAR,CACD,CACF,CACD;AACD,CAbQ,CAaN,CAACK,IAAD,CAAOD,QAAP,CAbM,CAAT,CAeAP,SAAS,CAAC,UAAM,CACf,GAAIQ,IAAJ,CAAU,CACP,GAAIA,IAAI,GAAK,KAAb,CAAoB,CAClB,GAAGG,MAAH,CAAU,CACRK,QAAQ,CAACL,MAAD,CAAR,CAAiB;AAClB,CACF,CACD,GAAIH,IAAI,GAAK,IAAb,CAAmB,CACjB,GAAGK,KAAH,CAAS,CACPG,QAAQ,CAACH,KAAD,CAAR,CACD,CACF,CACH,CACD,CAbQ,CAaN,CAACL,IAAD,CAAMG,MAAN,CAAaE,KAAb,CAAmBG,QAAnB,CAbM,CAAT,CAeA;AACAhB,SAAS,CAAC,UAAM,CACf,CADQ,CACN,CAACe,KAAD,CADM,CAAT,CAGA;AACA,QAASI,CAAAA,YAAT,CAAsBC,CAAtB,CAAyB,CACvBb,QAAQ,CAACF,WAAW,CAACe,CAAC,CAACC,MAAF,CAASC,KAAV,CAAZ,CAAR,CACAJ,SAAS,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAT,CACD,CAED;AACAtB,SAAS,CAAC,UAAM,CACdO,QAAQ,CAACF,WAAW,CAACY,MAAD,CAAZ,CAAR,CACD,CAFQ,CAEN,CAACA,MAAD,CAASV,QAAT,CAFM,CAAT,CAIA,mBACE,YAAK,SAAS,CAAC,OAAf,uBACE,gBACE,IAAI,CAAC,QADP,CAEE,SAAS,CAAC,SAFZ,CAGE,KAAK,CAAEU,MAHT,CAIE,QAAQ,CAAEE,YAJZ,wBAME,eAAQ,YAAY,KAApB,oBANF,CAOGJ,KAAK,EAAIA,KAAK,CAACQ,GAAN,CAAU,SAACC,MAAD,CAASC,KAAT,qBAClB,eAAoB,KAAK,CAAED,MAA3B,UAAoCA,MAApC,EAAaC,KAAb,CADkB,EAAV,CAPZ,GADF,EADF,CAeD","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './GenreSelect.css';\nimport { dbGenOpSearch, apiGenOpSearch, searchGenre } from '../../actions/actions';\n\n//used on SearchMenu\n\nexport default function GenreSelect() {\n\n  let dispatch = useDispatch();\n  let orig = useSelector(state => state.searchOrig);// <--Busca el origen del store.\n  let apigop = useSelector(state => state.apigenopts);\n  let dbgop = useSelector(state => state.dbgenopts);\n\n  let [genOp, setGenOp] = useState([]); // opciones de géneros\n  let [sgenre, setSgenre] = useState(''); // género seleccionado\n\n  // Cada vez que cambie el origen guarda el estado en el store\n  // y setea genreopts con los valores correspondientes\n  useEffect(() => {\n    // Que limpie 1ro cualquier selección anterior de género\n    dispatch(searchGenre(''));\n    setSgenre('');\n    if (orig) {\n      if (orig === 'API') {\n        dispatch(apiGenOpSearch());\n      }\n      if (orig === 'DB') {\n        dispatch(dbGenOpSearch());\n      }\n    }\n    // console.log(`(1) ${genOp}`);\n  }, [orig, dispatch]);\n\n  useEffect(() => {\n   if (orig) {\n      if (orig === 'API') {\n        if(apigop){\n          setGenOp(apigop);//setea localmente los géneros\n        }\n      }\n      if (orig === 'DB') {\n        if(dbgop){\n          setGenOp(dbgop); \n        }\n      }\n   }\n  }, [orig,apigop,dbgop,setGenOp]); \n\n  //Carga el componente nuevamente cuando recibe los géneros\n  useEffect(() => {\n  }, [genOp]);\n\n  // Manda al store el género a buscar\n  function handleChange(e) {\n    dispatch(searchGenre(e.target.value));\n    setSgenre(e.target.value);\n  }\n\n  // Cuando cambie el género seleccionado lo manda al store.\n  useEffect(() => {\n    dispatch(searchGenre(sgenre));\n  }, [sgenre, dispatch]);\n\n  return (\n    <div className=\"gcont\">\n      <select\n        name=\"genres\"\n        className=\"gselect\"\n        value={sgenre}\n        onChange={handleChange}\n      >\n        <option defaultValue  >Genre:</option>\n        {genOp && genOp.map((option, index) => (\n          <option key={index} value={option}>{option}</option>\n        ))}\n      </select>\n    </div>\n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}