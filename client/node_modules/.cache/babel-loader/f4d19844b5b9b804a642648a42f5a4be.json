{"ast":null,"code":"var _jsxFileName = \"/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/MultiSelectGenre/MultiSelectGenre.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './MultiSelectGenre.css';\nimport store from '../../store/index'; //import genresopt from '../Genres/Genres';\n\nimport { getDbGenres } from '../../actions/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MultiSelectGenre() {\n  _s();\n\n  const dispatch = useDispatch();\n  const loading = useSelector(state => state.loading); // Cuando cargue el componente que despache la acción \n  // que busca los géneros.\n\n  useEffect(() => {\n    dispatch(getDbGenres()); // console.log('se cargó la página');\n  }, []); // Se trae el el arreglo de géneros del store.\n\n  let genres = useSelector(state => state.genreopt);\n  let [genreop, setGenreop] = useState([]);\n  let [show, setShow] = useState(false); // Cuando cargue los géneros (el estado loading del store \n  // cambia a false), setea el estado \"show\" en true.\n\n  useEffect(() => {\n    setGenreop(genres);\n    setShow(true); // console.log(genreopt);\n  }, [store.getState().loading]); // Recarga el componente cuando show esté en true.\n\n  useEffect(() => {}, [show]); // Estado de géneros seleccionados\n\n  let [sgenres, setSgenres] = useState([]); // selected genres\n\n  function removeItem(item) {\n    let newItems = sgenres.filter(e => e !== item);\n    setSgenres(newItems);\n  }\n\n  async function handleChange(e) {\n    let itemP = e.target.value;\n    let hasItem = sgenres.includes(itemP);\n\n    if (!hasItem) {\n      setSgenres([...sgenres, itemP]);\n    } else {\n      removeItem(itemP);\n    }\n  }\n\n  function handleClick(e) {\n    let itm = e.target.value;\n    removeItem(itm);\n  } // Cada vez que se modifique la selección que lo recargue\n\n\n  useEffect(() => {}, [sgenres]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"selgenfom\",\n    children: !show ? 'no muestra' : muestra // <>\n    //   <select\n    //     name=\"genres\"\n    //     placeholder=\"Plataformas...\"\n    //     className=\"multselectgen\"\n    //     value={''}\n    //     onChange={handleChange}\n    //   >\n    //     <option defaultValue>Géneros:</option>\n    //     {genreop && genreop.map((item, index) => (\n    //       <option key={index} value={item.value}>{item.label}</option>\n    //     ))}\n    //   </select>\n    //   <div className=\"gencont\">\n    //     {sgenres.map((item, index) => (\n    //       <button className=\"selgenbtn\" value={item}\n    //         onClick={handleClick} key={index}>\n    //         {item}\n    //       </button>\n    //     ))}\n    //   </div>\n    // </>\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MultiSelectGenre, \"POEsDrSsXHMbiBuXatMvuz+vbaw=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = MultiSelectGenre;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiSelectGenre\");","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/MultiSelectGenre/MultiSelectGenre.jsx"],"names":["React","useState","useEffect","useDispatch","useSelector","store","getDbGenres","MultiSelectGenre","dispatch","loading","state","genres","genreopt","genreop","setGenreop","show","setShow","getState","sgenres","setSgenres","removeItem","item","newItems","filter","e","handleChange","itemP","target","value","hasItem","includes","handleClick","itm","muestra"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAO,wBAAP;AACA,OAAOC,KAAP,MAAkB,mBAAlB,C,CACA;;AACA,SAASC,WAAT,QAA4B,uBAA5B;;AAEA,eAAe,SAASC,gBAAT,GAA4B;AAAA;;AAEzC,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,QAAMM,OAAO,GAAGL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACD,OAAhB,CAA3B,CAHyC,CAKzC;AACA;;AACAP,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,QAAQ,CAACF,WAAW,EAAZ,CAAR,CADc,CAEd;AACD,GAHQ,EAGN,EAHM,CAAT,CAPyC,CAYzC;;AACA,MAAIK,MAAM,GAAGP,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACE,QAAhB,CAAxB;AAEA,MAAI,CAACC,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,EAAD,CAApC;AACA,MAAI,CAACc,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,CAAC,KAAD,CAA9B,CAhByC,CAkBzC;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,UAAU,CAACH,MAAD,CAAV;AACAK,IAAAA,OAAO,CAAC,IAAD,CAAP,CAFc,CAGd;AACD,GAJQ,EAIN,CAACX,KAAK,CAACY,QAAN,GAAiBR,OAAlB,CAJM,CAAT,CApByC,CA0BzC;;AACAP,EAAAA,SAAS,CAAC,MAAM,CACf,CADQ,EACN,CAACa,IAAD,CADM,CAAT,CA3ByC,CA8BzC;;AACA,MAAI,CAACG,OAAD,EAAUC,UAAV,IAAwBlB,QAAQ,CAAC,EAAD,CAApC,CA/ByC,CA+BA;;AAEzC,WAASmB,UAAT,CAAoBC,IAApB,EAA0B;AACxB,QAAIC,QAAQ,GAAGJ,OAAO,CAACK,MAAR,CAAeC,CAAC,IAAIA,CAAC,KAAKH,IAA1B,CAAf;AACAF,IAAAA,UAAU,CAACG,QAAD,CAAV;AACD;;AAED,iBAAeG,YAAf,CAA4BD,CAA5B,EAA+B;AAC7B,QAAIE,KAAK,GAAGF,CAAC,CAACG,MAAF,CAASC,KAArB;AACA,QAAIC,OAAO,GAAGX,OAAO,CAACY,QAAR,CAAiBJ,KAAjB,CAAd;;AACA,QAAI,CAACG,OAAL,EAAc;AACZV,MAAAA,UAAU,CAAC,CAAC,GAAGD,OAAJ,EAAaQ,KAAb,CAAD,CAAV;AACD,KAFD,MAEO;AACLN,MAAAA,UAAU,CAACM,KAAD,CAAV;AACD;AACF;;AAED,WAASK,WAAT,CAAqBP,CAArB,EAAwB;AACtB,QAAIQ,GAAG,GAAGR,CAAC,CAACG,MAAF,CAASC,KAAnB;AACAR,IAAAA,UAAU,CAACY,GAAD,CAAV;AACD,GAnDwC,CAqDzC;;;AACA9B,EAAAA,SAAS,CAAC,MAAM,CACf,CADQ,EACN,CAACgB,OAAD,CADM,CAAT;AAGA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,cACG,CAACH,IAAD,GAAQ,YAAR,GAAuBkB,OAD1B,CAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAvBJ;AAAA;AAAA;AAAA;AAAA,UADF;AA4BD;;GArFuB1B,gB;UAELJ,W,EACDC,W,EAUHA,W;;;KAbSG,gB","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './MultiSelectGenre.css';\nimport store from '../../store/index';\n//import genresopt from '../Genres/Genres';\nimport { getDbGenres } from '../../actions/actions';\n\nexport default function MultiSelectGenre() {\n\n  const dispatch = useDispatch();\n  const loading = useSelector(state => state.loading);\n  \n  // Cuando cargue el componente que despache la acción \n  // que busca los géneros.\n  useEffect(() => {\n    dispatch(getDbGenres());\n    // console.log('se cargó la página');\n  }, []);\n  \n  // Se trae el el arreglo de géneros del store.\n  let genres = useSelector(state => state.genreopt);\n\n  let [genreop, setGenreop] = useState([]);\n  let [show, setShow] = useState(false);\n\n  // Cuando cargue los géneros (el estado loading del store \n  // cambia a false), setea el estado \"show\" en true.\n  useEffect(() => {\n    setGenreop(genres);\n    setShow(true);\n    // console.log(genreopt);\n  }, [store.getState().loading])\n\n  // Recarga el componente cuando show esté en true.\n  useEffect(() => {\n  }, [show])\n\n  // Estado de géneros seleccionados\n  let [sgenres, setSgenres] = useState([]);// selected genres\n\n  function removeItem(item) {\n    let newItems = sgenres.filter(e => e !== item);\n    setSgenres(newItems);\n  }\n\n  async function handleChange(e) {\n    let itemP = e.target.value;\n    let hasItem = sgenres.includes(itemP);\n    if (!hasItem) {\n      setSgenres([...sgenres, itemP]);\n    } else {\n      removeItem(itemP);\n    }\n  }\n\n  function handleClick(e) {\n    let itm = e.target.value;\n    removeItem(itm);\n  }\n\n  // Cada vez que se modifique la selección que lo recargue\n  useEffect(() => {\n  }, [sgenres]);\n\n  return (\n    <div className=\"selgenfom\">\n      {!show ? 'no muestra' : muestra\n        // <>\n        //   <select\n        //     name=\"genres\"\n        //     placeholder=\"Plataformas...\"\n        //     className=\"multselectgen\"\n        //     value={''}\n        //     onChange={handleChange}\n        //   >\n        //     <option defaultValue>Géneros:</option>\n        //     {genreop && genreop.map((item, index) => (\n        //       <option key={index} value={item.value}>{item.label}</option>\n        //     ))}\n        //   </select>\n        //   <div className=\"gencont\">\n        //     {sgenres.map((item, index) => (\n        //       <button className=\"selgenbtn\" value={item}\n        //         onClick={handleClick} key={index}>\n        //         {item}\n        //       </button>\n        //     ))}\n        //   </div>\n        // </>\n      }\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}