{"ast":null,"code":"var _jsxFileName = \"/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/MultiSelectGenre/MultiSelectGenre.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux'; // import { useSelector } from 'react-redux';\n\nimport './MultiSelectGenre.css';\nimport store from '../../store/index'; //import genresopt from '../Genres/Genres';\n\nimport { getDbGenres } from '../../actions/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function MultiSelectGenre() {\n  _s();\n\n  //store.subscribe() ??\n  //const estado = useSelector((state) => (state))\n  //when an action is dispatched to the Redux store, useSelector() only forces a re-render if the selector result appears to be different than the last result. \n  const dispatch = useDispatch();\n  let [genreop, setGenreop] = useState([]);\n  let [show, setShow] = useState(false);\n\n  const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n  const fetchObjects = () => {\n    return dispatch => {\n      store.dispatch(getDbGenres());\n      return delay(2000).then(() => {\n        console.log('Done!');\n      });\n    };\n  };\n\n  fetchObjects(); //  store.dispatch(getDbGenres()).then(() => {\n  //   console.log('Done!')\n  // })\n  // .then(() => {\n  //   let genres = store.getState().genreopt;\n  //   console.log('genres = ' + genres);\n  //   return genres;\n  // })\n  // .then((genres) => {\n  //   setGenreop(genres);\n  //   console.log('genreop = ' + genreop);\n  // })\n  // .then(() => {\n  //   setShow(true);\n  //   console.log('show = ' + 'true');\n  // })\n  // .catch(error => console.log(error))\n\n  useEffect(() => {//console.log(genreop);\n  }, [show]); //   // store.dispatch()\n  //   // (1) Cuando cargue el componente que despache la acción \n  //   // que busca los géneros.\n  //   useEffect(() => {\n  //     console.log('(1) se cargó la página');\n  //     store.dispatch(getDbGenres());\n  //   }, []);\n  //   //const mygenres = useSelector(state => state.genreopt);\n  //   //console.log(mygenres);\n  //   function select(state){\n  //     return state.genreopt;\n  //   }\n  // //  const genres = store.getState().genreopt;\n  //   //console.log(genres);\n  //  // console.log(store.getState().genreop);\n  //   // Se trae el el arreglo de géneros del store.\n  //   //const genres = useSelector(state => state.genreopt);\n  //   let [genreop, setGenreop] = useState([]);\n  //   let [show, setShow] = useState(false);\n  //   // (2) Cuando cargó los géneros en (1) que cambie el estado \"show\" a true\n  //   useEffect(() => {\n  //     console.log('(2) El store se cargó');\n  //     const genres = store.getState().genreopt;\n  //     //console.log(genres);\n  //    // console.log(genres);\n  //     setGenreop(genres);\n  //    console.log(genreop);\n  //     setShow(true);\n  //   }, [store.getState().genreopt])\n  //   useEffect(() => {\n  //     //console.log(genreop);\n  //   }, [genreop])\n  //   //console.log('(2)cambió show a true, loading='+store.getState().loading);\n  //   // const genres = useSelector(state => state.genreopt);\n  //   // console.log(genres);\n  //   // useEffect(() => {\n  //   //   console.log(genreop);\n  //   //   setShow(true);\n  //   // }, [show,genreop])\n  //   console.log(show);\n  // Estado de géneros seleccionados\n\n  let [sgenres, setSgenres] = useState([]); // selected genres\n\n  function removeItem(item) {\n    let newItems = sgenres.filter(e => e !== item);\n    setSgenres(newItems);\n  }\n\n  async function handleChange(e) {\n    let itemP = e.target.value;\n    let hasItem = sgenres.includes(itemP);\n\n    if (!hasItem) {\n      setSgenres([...sgenres, itemP]);\n    } else {\n      removeItem(itemP);\n    }\n  }\n\n  function handleClick(e) {\n    let itm = e.target.value;\n    removeItem(itm);\n  }\n\n  useEffect(() => {}, [sgenres]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"selgenfom\",\n    children: !show ? 'no muestra' : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"genres\",\n        placeholder: \"Plataformas...\",\n        className: \"multselectgen\",\n        value: '',\n        onChange: handleChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          defaultValue: true,\n          children: \"G\\xE9neros:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this), genreop && genreop.map((item, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: item.value,\n          children: item.label\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gencont\",\n        children: sgenres.map((item, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"selgenbtn\",\n          value: item,\n          onClick: handleClick,\n          children: item\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MultiSelectGenre, \"INSgSfwpOsLcFSTFrh1NOzmA9v0=\", false, function () {\n  return [useDispatch];\n});\n\n_c = MultiSelectGenre;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiSelectGenre\");","map":{"version":3,"sources":["/home/edith/Desktop/PI/FT10-PI-Videogames/client/src/components/MultiSelectGenre/MultiSelectGenre.jsx"],"names":["React","useState","useEffect","useDispatch","store","getDbGenres","MultiSelectGenre","dispatch","genreop","setGenreop","show","setShow","delay","ms","Promise","resolve","setTimeout","fetchObjects","then","console","log","sgenres","setSgenres","removeItem","item","newItems","filter","e","handleChange","itemP","target","value","hasItem","includes","handleClick","itm","map","index","label"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n// import { useSelector } from 'react-redux';\nimport './MultiSelectGenre.css';\nimport store from '../../store/index';\n//import genresopt from '../Genres/Genres';\nimport { getDbGenres } from '../../actions/actions';\n\nexport default function MultiSelectGenre() {\n\n  //store.subscribe() ??\n  //const estado = useSelector((state) => (state))\n\n  //when an action is dispatched to the Redux store, useSelector() only forces a re-render if the selector result appears to be different than the last result. \n  \n\n  const dispatch = useDispatch();\n  let [genreop, setGenreop] = useState([]);\n  let [show, setShow] = useState(false);\n\n  const delay = (ms) => new Promise(resolve =>\n    setTimeout(resolve, ms)\n  );\n  \n  const fetchObjects = () => {\n    return dispatch => {\n      store.dispatch(getDbGenres());\n  \n      return delay(2000)\n      .then(() => {\n        console.log('Done!')\n      })\n\n    }\n  }\n  fetchObjects();\n\n//  store.dispatch(getDbGenres()).then(() => {\n//   console.log('Done!')\n// })\n    // .then(() => {\n    //   let genres = store.getState().genreopt;\n    //   console.log('genres = ' + genres);\n    //   return genres;\n    // })\n    // .then((genres) => {\n    //   setGenreop(genres);\n    //   console.log('genreop = ' + genreop);\n    // })\n    // .then(() => {\n    //   setShow(true);\n    //   console.log('show = ' + 'true');\n    // })\n    // .catch(error => console.log(error))\n\n\n  useEffect(() => {\n    //console.log(genreop);\n  }, [show])\n\n\n  //   // store.dispatch()\n\n  //   // (1) Cuando cargue el componente que despache la acción \n  //   // que busca los géneros.\n  //   useEffect(() => {\n  //     console.log('(1) se cargó la página');\n  //     store.dispatch(getDbGenres());\n  //   }, []);\n\n  //   //const mygenres = useSelector(state => state.genreopt);\n  //   //console.log(mygenres);\n\n  //   function select(state){\n  //     return state.genreopt;\n  //   }\n\n  // //  const genres = store.getState().genreopt;\n  //   //console.log(genres);\n\n  //  // console.log(store.getState().genreop);\n\n  //   // Se trae el el arreglo de géneros del store.\n  //   //const genres = useSelector(state => state.genreopt);\n\n  //   let [genreop, setGenreop] = useState([]);\n\n  //   let [show, setShow] = useState(false);\n\n  //   // (2) Cuando cargó los géneros en (1) que cambie el estado \"show\" a true\n  //   useEffect(() => {\n  //     console.log('(2) El store se cargó');\n  //     const genres = store.getState().genreopt;\n  //     //console.log(genres);\n  //    // console.log(genres);\n  //     setGenreop(genres);\n  //    console.log(genreop);\n  //     setShow(true);\n  //   }, [store.getState().genreopt])\n\n  //   useEffect(() => {\n  //     //console.log(genreop);\n  //   }, [genreop])\n\n\n  //   //console.log('(2)cambió show a true, loading='+store.getState().loading);\n\n  //   // const genres = useSelector(state => state.genreopt);\n  //   // console.log(genres);\n\n\n  //   // useEffect(() => {\n  //   //   console.log(genreop);\n  //   //   setShow(true);\n  //   // }, [show,genreop])\n\n  //   console.log(show);\n\n\n  // Estado de géneros seleccionados\n  let [sgenres, setSgenres] = useState([]);// selected genres\n\n  function removeItem(item) {\n    let newItems = sgenres.filter(e => e !== item);\n    setSgenres(newItems);\n  }\n\n  async function handleChange(e) {\n    let itemP = e.target.value;\n    let hasItem = sgenres.includes(itemP);\n    if (!hasItem) {\n      setSgenres([...sgenres, itemP]);\n    } else {\n      removeItem(itemP);\n    }\n  }\n\n  function handleClick(e) {\n    let itm = e.target.value;\n    removeItem(itm);\n  }\n\n  useEffect(() => {\n  }, [sgenres]);\n\n  return (\n    <div className=\"selgenfom\">\n      {!show ? 'no muestra' :\n        <>\n          <select\n            name=\"genres\"\n            placeholder=\"Plataformas...\"\n            className=\"multselectgen\"\n            value={''}\n            onChange={handleChange}\n          >\n            <option defaultValue>Géneros:</option>\n            {genreop && genreop.map((item, index) => (\n              <option key={index} value={item.value}>{item.label}</option>\n            ))}\n          </select>\n          <div className=\"gencont\">\n            {sgenres.map((item, index) => (\n              <button className=\"selgenbtn\" value={item}\n                onClick={handleClick} key={index}>\n                {item}\n              </button>\n            ))}\n          </div>\n        </>\n      }\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}